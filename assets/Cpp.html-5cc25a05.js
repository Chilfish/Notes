import{_ as i,V as u,W as r,Z as n,X as a,Y as o,$ as c,a0 as s,a1 as t,D as l}from"./framework-94985248.js";const d="/assets/cpp_overload-53d7a8e7.png",k="/assets/cpp_lambda-1589caa1.png",m="/assets/cpp_priority-704574c2.png",v={},b=n("p",null,[n("br"),n("p",{style:{"font-size":"32px","font-weight":"bold"}},"目录")],-1),g=t('<ul><li><a href="#%E4%B8%80%E4%BA%9B%E5%B0%8F%E8%AF%AD%E6%B3%95">一些小语法</a><ul><li><a href="#%E6%8C%87%E9%92%88%E4%B8%8E%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D">指针与内存分配</a></li><li><a href="#%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83">命名规范</a></li><li><a href="#%E7%BC%93%E5%86%B2%E5%8C%BA">缓冲区</a></li><li><a href="#stringstream">stringstream</a></li><li><a href="#%E6%A8%A1%E6%9D%BF-template">模板 template</a></li><li><a href="#class-%E7%B1%BB">Class 类</a><ul><li><a href="#%E5%AE%9A%E4%B9%89%E7%B1%BB">定义类</a></li><li><a href="#%E6%9E%84%E9%80%A0%E7%B1%BB">构造类</a></li><li><a href="#explicit-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">explicit 构造函数</a></li><li><a href="#%E7%BB%A7%E6%89%BF">继承</a></li><li><a href="#%E9%87%8D%E8%BD%BD">重载</a></li><li><a href="#%E7%B1%BB%E7%9A%84%E4%BA%94%E5%A4%A7%E5%87%BD%E6%95%B0">类的五大函数</a></li></ul></li><li><a href="#initializer_list-%E5%88%97%E8%A1%A8%E5%88%9D%E5%A7%8B%E5%8C%96">initializer_list 列表初始化</a></li><li><a href="#lambda-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0">Lambda 匿名函数</a></li><li><a href="#%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82%E7%B1%BB%E5%9E%8B">函数传参类型</a><ul><li><a href="#%E5%B7%A6%E5%80%BC%E5%BC%95%E7%94%A8%E4%B8%8E%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8">左值引用与右值引用</a></li></ul></li></ul></li><li><a href="#c-%E8%AA%9E%E8%A8%80%E4%B8%AD%E3%81%AB">C 語言中に</a></li></ul>',1),h=n("br",null,null,-1),w=n("code",null,"gcc version 7.3.0 (x86_64-posix-seh-rev0, Built by MinGW-W64 project)",-1),y=n("code",null,"Win10 2004",-1),f=t(`<br><h2 id="一些小语法" tabindex="-1"><a class="header-anchor" href="#一些小语法" aria-hidden="true">#</a> 一些小语法</h2><h3 id="指针与内存分配" tabindex="-1"><a class="header-anchor" href="#指针与内存分配" aria-hidden="true">#</a> 指针与内存分配</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">{</span>
  node <span class="token operator">*</span>next<span class="token punctuation">;</span>
  <span class="token function">node</span><span class="token punctuation">(</span>node <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token operator">:</span>
    next<span class="token punctuation">{</span>p<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  node <span class="token operator">*</span>a<span class="token punctuation">,</span>
    <span class="token operator">*</span>n <span class="token operator">=</span> <span class="token keyword">new</span> node<span class="token punctuation">,</span>
    <span class="token operator">*</span>m <span class="token operator">=</span> n<span class="token punctuation">,</span>
    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">node</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>

  cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> endl
    <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>0xe913d0 0xe913d0
0 0xe913f0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="命名规范" tabindex="-1"><a class="header-anchor" href="#命名规范" aria-hidden="true">#</a> 命名规范</h3>`,8),_={href:"https://blog.csdn.net/qq_37851620/article/details/94731227",target:"_blank",rel:"noopener noreferrer"},x=n("h3",{id:"缓冲区",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#缓冲区","aria-hidden":"true"},"#"),s(" 缓冲区")],-1),E={href:"https://blog.csdn.net/selina8921/article/details/79067941",target:"_blank",rel:"noopener noreferrer"},B=n("h3",{id:"stringstream",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#stringstream","aria-hidden":"true"},"#"),s(" stringstream")],-1),q={href:"https://www.cnblogs.com/wuchanming/p/3906176.html",target:"_blank",rel:"noopener noreferrer"},A=t(`<p>用 <code>getline</code> 与 <code>ss</code> 可以先读取一整行的数据，再用流传出去</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>string s<span class="token punctuation">;</span> <span class="token keyword">int</span> m<span class="token punctuation">;</span> map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> guo<span class="token punctuation">;</span>
<span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
stringstream ss<span class="token punctuation">;</span>
ss <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>ss <span class="token operator">&gt;&gt;</span> s <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">)</span>  guo<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">+=</span> m<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>C++11</code> 前，没有 <code>to_string</code> 的时候：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>string <span class="token function">Itos</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>  <span class="token comment">//int Stoi(string x)</span>
<span class="token punctuation">{</span>
  string t<span class="token punctuation">;</span> stringstream ss<span class="token punctuation">;</span>  <span class="token comment">// stringstream ss; int t;</span>
  ss <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">,</span> ss <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">,</span> ss<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//ss &lt;&lt; x, ss &gt;&gt; t, ss.clear();</span>
  <span class="token keyword">return</span> t<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模板-template" tabindex="-1"><a class="header-anchor" href="#模板-template" aria-hidden="true">#</a> 模板 template</h3>`,5),C={href:"https://blog.csdn.net/qq_35637562/article/details/55194097",target:"_blank",rel:"noopener noreferrer"},S={href:"https://github.com/wuye9036/CppTemplateTutorial",target:"_blank",rel:"noopener noreferrer"},T=t(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>  <span class="token comment">//单个类型</span>
T <span class="token function">big</span><span class="token punctuation">(</span>T x<span class="token punctuation">,</span> T y<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> x <span class="token operator">&gt;</span> y <span class="token operator">?</span> x <span class="token operator">:</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T2</span><span class="token operator">&gt;</span>  <span class="token comment">//不同类型</span>
<span class="token keyword">inline</span> <span class="token keyword">const</span> T2 <span class="token function">Max</span><span class="token punctuation">(</span><span class="token keyword">const</span> T1 a<span class="token punctuation">,</span> <span class="token keyword">const</span> T2 b<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">&gt;</span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">out_type</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">in_value</span><span class="token operator">&gt;</span>
out_type <span class="token function">transf</span><span class="token punctuation">(</span><span class="token keyword">const</span> in_value <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span>
  stringstream stream<span class="token punctuation">;</span> out_type result<span class="token punctuation">;</span>
  stream <span class="token operator">&lt;&lt;</span> t<span class="token punctuation">,</span> stream <span class="token operator">&gt;&gt;</span> result<span class="token punctuation">,</span> stream<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  string s <span class="token operator">=</span> <span class="token string">&quot;532&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">double</span> t <span class="token operator">=</span> <span class="token generic-function"><span class="token function">transf</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;&gt;里的是要转换的类型名，()里的是被转换的变量名</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="class-类" tabindex="-1"><a class="header-anchor" href="#class-类" aria-hidden="true">#</a> Class 类</h3><h4 id="定义类" tabindex="-1"><a class="header-anchor" href="#定义类" aria-hidden="true">#</a> 定义类</h4><div class="h5">访问权限：</div><ul><li><code>public</code>：<strong>任何地方</strong> 都能访问</li><li><code>private</code>：只能被 <strong>类内访问</strong>，被继承的子孙类都没法访问</li><li><code>protected</code>：只能被 类内或被继承的子孙类 访问，构造的类不能访问 <blockquote><p>其实就是 不想放到 public 里但又想让子孙类访问，于是就有了 protected</p></blockquote></li><li><code>const</code> 限定：const 定义的类只能访问 类内的变量 <em>或</em> 父类的非 private 的变量 <em>和</em> 被 const 修饰的函数</li><li><code>static</code> 静态：只能在静态的函数、变量、类之间访问，非静态定义的不能访问。使用不了 <code>this</code> 指针 <ul><li>且在非对象中调用对象内成员的 <code>::</code> 修饰符只能访问 静态成员</li><li>而且使用前必须先初始化</li></ul></li></ul><p>与结构体类似，但是默认是以 <code>Private</code> 构造的。偏向 <strong>数据结构</strong> 的是结构体，偏向 <strong>对象</strong> 的是类</p><br><h4 id="构造类" tabindex="-1"><a class="header-anchor" href="#构造类" aria-hidden="true">#</a> 构造类</h4><p><strong>构造函数：</strong> 是指在定义类的时候就运行了。带参数时即给变量赋值。用法：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">mie</span> <span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span> aha<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">mie</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> aha <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">//或</span>
    <span class="token function">mie</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">aha</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>aha <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 用法：</span>
mie <span class="token function">m</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> m<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 12</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>析构函数：</strong> 是在删除对象时(或运行结束)时运行，有助于在跳出程序（比如关闭文件、释放内存等）前释放资源</p><p><strong>拷贝构造函数：</strong> 即为在初定义时赋值。与定义后再赋值不同，那时需要 <strong>重载</strong> 等于号才能赋值</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">mie</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> num<span class="token punctuation">;</span>
    <span class="token function">mie</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">num</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">mie</span><span class="token punctuation">(</span><span class="token keyword">const</span> mie <span class="token operator">&amp;</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>num <span class="token operator">=</span> m<span class="token punctuation">.</span>num<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 用：</span>
mie <span class="token function">m</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  mie mm <span class="token operator">=</span> m<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>友元：</strong> 需要事先在类内定义，然后 加上 <code>friend</code> 就可以有权访问 <strong>任何</strong> 成员。且能防止什么都放到 <code>public</code> 里，还能节省开支。<strong>但是：</strong></p><ol><li>友元关系 <strong>不能被继承</strong>；</li><li>友元关系是 <strong>单向的</strong>，不具有交换性。即类 B 是类 A 的友元，则类 A 不一定是类 B 的友元，需要看类中是否有相应的声明；</li><li>友元关系 <strong>不具有传递性</strong>。即类 B 是类 A 的友元，类 C 是类 B 的友元，但类 C 不一定是类 A 的友元，需要看类中是否有相应的声明</li><li>另外，使用一般不建议把整个类声明为友元类，而只将某些成员函数声明为友元函数，这样更安全些</li></ol><br><h4 id="explicit-构造函数" tabindex="-1"><a class="header-anchor" href="#explicit-构造函数" aria-hidden="true">#</a> explicit 构造函数</h4><p>用于避免<strong>不合预期</strong>的构造方法。如：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token keyword">int</span> len<span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token operator">:</span> len<span class="token punctuation">{</span>a<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> a<span class="token punctuation">)</span>
    <span class="token operator">:</span> len<span class="token punctuation">{</span><span class="token function">strlen</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> str<span class="token punctuation">{</span>a<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  String <span class="token function">a1</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 初始化长度</span>
  String a2 <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span> <span class="token comment">// ？？</span>
  String a3 <span class="token operator">=</span> <span class="token string">&quot;233s&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 初始化</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原本只想让等号用于 <em>构造字符串</em>，但在这却可以直接 <em>初始化长度</em>，而且编译通过。所以在这种情况下就应该：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">explicit</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token operator">:</span> len<span class="token punctuation">{</span>a<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样，当用等号赋值数字时编译便会报错</p><blockquote><p><strong>注：</strong> <code>explicit</code> 关键字只需用于类内的<strong>单参数构造函数</strong>前面。由于无参数的构造函数和多参数的构造函数总是显示调用，这种情况在构造函数前加 <code>explicit</code> 无意义 <br></p></blockquote><h4 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h4><p><strong>概念：</strong> 在定义一个新的类 B 时，如果该类与某个已有的类 A 相似（指的是 B 拥有 A 的全部特点），那么就可以把 A 作为一个基类，而把 B 作为基类的一个派生类（也称子类）</p><div class="h5">格式：</div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">son</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token operator">|</span> <span class="token keyword">private</span> <span class="token operator">|</span> <span class="token keyword">protected</span> <span class="token class-name">father</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>权限：</strong> 继承方式 是用来指明父类成员在子类中的 <strong>最高访问权限</strong> 的</p><p>一个派生类继承了所有的基类方法，但下列情况除外：</p><ul><li>基类的构造函数、析构函数和拷贝构造函数</li><li>基类的重载运算符</li><li>基类的友元函数</li></ul><br><h4 id="重载" tabindex="-1"><a class="header-anchor" href="#重载" aria-hidden="true">#</a> 重载</h4><div class="h5">重载运算符：</div><div align="center"><img width="90%" src="`+d+`"><p></p></div><p><strong>一元运算符：</strong> 如负号、自增自减</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Stu <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 前缀自增：++mie;</span>
    score<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
Stu <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 后缀自增：mie++: 带参数且与被加数类型相等</span>
    <span class="token operator">++</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>二元运算符：</strong> 加减乘除膜</p><ul><li>对象之间相加：<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Stu <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span>Stu <span class="token operator">&amp;</span>a<span class="token punctuation">)</span> <span class="token comment">// c = b+a; --&gt; c = this+a</span>
<span class="token punctuation">{</span>
    a<span class="token punctuation">.</span>score <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>score<span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>对象与变量相加 <ul><li>对象加变量<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Stu <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Stu a<span class="token punctuation">;</span>
    a<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>score <span class="token operator">+</span> x<span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>变量加对象，且要用 <code>friend</code><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">friend</span> Stu <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> Stu <span class="token operator">&amp;</span>a<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    a<span class="token punctuation">.</span>score <span class="token operator">+=</span> x<span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><strong>关系运算符重载：</strong> 诸如大于号等比较符。用 bool 定义：<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span>Stu <span class="token operator">&amp;</span>a<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>score <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>score<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>输入输出流重载：</strong> 当然也适用于文件流<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">friend</span> ostream <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream <span class="token operator">&amp;</span>out<span class="token punctuation">,</span> <span class="token keyword">const</span> Stu <span class="token operator">&amp;</span>a<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    out <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;score: &quot;</span> <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">score</span> <span class="token generic class-name"><span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> out<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">friend</span> istream <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span>istream <span class="token operator">&amp;</span>in<span class="token punctuation">,</span> Stu <span class="token operator">&amp;</span>a<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    in <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">.</span>score<span class="token punctuation">;</span>
    <span class="token keyword">return</span> in<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// to use:</span>
Stu mie<span class="token punctuation">;</span>
cin <span class="token operator">&gt;&gt;</span> mie<span class="token punctuation">;</span> cout <span class="token operator">&lt;&lt;</span> mie<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><br><h4 id="类的五大函数" tabindex="-1"><a class="header-anchor" href="#类的五大函数" aria-hidden="true">#</a> 类的五大函数</h4><p>在 C++ 11 中，类是和 5 个特殊的函数紧密相关的：<strong>析构函数</strong>、<strong>拷贝构造函数</strong>、<strong>移动构造函数</strong>、<strong>拷贝赋值(operator=)</strong>、<strong>移动赋值</strong></p><p><strong>两个构造函数：</strong> 有两个特殊的构造函数来创建一个新的对象，它被初始化为与另一个同样类型对象相同的状态。如果这个已经存在（被声明）的对象是一个左值，就使用 <strong>拷贝构造函数</strong>；如果是一个右值（临时量），则使用 <strong>移动构造函数</strong></p><p><strong>两个赋值函数：</strong> 当 = 号用于两个都被构造过的对象的时候，就调用赋值函数。也用左右值来分拷贝赋值和移动赋值</p><p>通常情况下，他们的默认行为都没什么问题，但当对象中的数据类型包含 <strong>指针</strong> 的时候，就不够用了。因为拷贝构造与拷贝赋值都是 <strong>复制了指针的值，而不是指针所指向的对象</strong>，也就是 <strong>浅拷贝</strong></p><p>例如，有这样的类：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">node</span> <span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token keyword">int</span><span class="token operator">*</span> data<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">explicit</span> <span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">{</span>a<span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">*</span>data <span class="token operator">=</span> x<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">*</span>data<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  node b<span class="token punctuation">{</span><span class="token number">233</span><span class="token punctuation">}</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span>
    c <span class="token operator">=</span> b<span class="token punctuation">;</span> <span class="token comment">// 拷贝构造</span>
  d <span class="token operator">=</span> b<span class="token punctuation">;</span>   <span class="token comment">// 拷贝赋值</span>
  c<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  cout <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> d<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 都是 123</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>浅拷贝</strong> 的后果就是，修改了 c 的值，但又同时把 b 的值改了。原本想要的结果是 c 仅是 b 的复制品，即为 <strong>深拷贝</strong>：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 拷贝构造和拷贝赋值用的是左值引用</span>
<span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">const</span> node<span class="token operator">&amp;</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>
  data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">{</span><span class="token operator">*</span>a<span class="token punctuation">.</span>data<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

node<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> node<span class="token operator">&amp;</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">!=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">*</span>data <span class="token operator">=</span> <span class="token operator">*</span>a<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而对于右值引用的 移动构造和移动赋值：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">node</span><span class="token punctuation">(</span>node<span class="token operator">&amp;&amp;</span> a<span class="token punctuation">)</span> <span class="token operator">:</span> data<span class="token punctuation">{</span>a<span class="token punctuation">.</span>data<span class="token punctuation">}</span> <span class="token punctuation">{</span>
  a<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
node<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>node<span class="token operator">&amp;&amp;</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">swap</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> a<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>`,53),D=n("strong",null,"Ref:",-1),z={href:"https://www.jianshu.com/p/1b661fbc8fb4",target:"_blank",rel:"noopener noreferrer"},L={href:"https://zhuanlan.zhihu.com/p/157833251",target:"_blank",rel:"noopener noreferrer"},F=t(`<br><h3 id="initializer-list-列表初始化" tabindex="-1"><a class="header-anchor" href="#initializer-list-列表初始化" aria-hidden="true">#</a> initializer_list 列表初始化</h3><p>列表初始化常见于，使用 <code>{}</code> 序列来初始化：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> arr1<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            arr2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="h5">使用：</div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>initializer_list<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> l<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token keyword">int</span> len <span class="token operator">=</span> l<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 列表的长度</span>
  <span class="token comment">// 头尾迭代器</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> l<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> l<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// to use:</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="lambda-匿名函数" tabindex="-1"><a class="header-anchor" href="#lambda-匿名函数" aria-hidden="true">#</a> Lambda 匿名函数</h3><div class="h5">定义：</div><div align="center"><img width="80%" src="`+k+`"><p></p></div><ul><li><strong>捕获列表</strong><ul><li>当为默认的 <code>[]</code> 时，lambda 内是不能访问当前作用域中的变量的（除了全局）</li><li>而 <code>[&amp;]</code> 表示按引用访问，<code>[=]</code> 表示按值访问，多变量见用逗号分隔</li></ul></li><li><strong>参数列表：</strong> 可省略，带则和普通函数差不多</li><li><strong>可变的 <code>mutable</code>：</strong> 默认下 lambda 是 const 的，加了这个就可以改变捕获到的值</li></ul><div class="h5">原理：</div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>string s <span class="token operator">=</span> <span class="token string">&quot;abandon&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
cout <span class="token operator">&lt;&lt;</span> <span class="token function">count_if</span><span class="token punctuation">(</span><span class="token function">all</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span>
              <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">==</span> c<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>↑ 就相当于定义了这么一个：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Lambda</span>
<span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">char</span> c<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Lambda</span><span class="token punctuation">(</span><span class="token keyword">char</span> cc<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">c</span><span class="token punctuation">(</span>cc<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">==</span> c<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//</span>
<span class="token function">count_if</span><span class="token punctuation">(</span><span class="token function">all</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Lambda</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),V={href:"https://blog.csdn.net/A1138474382/article/details/111149792",target:"_blank",rel:"noopener noreferrer"},N=t(`<br><h3 id="函数传参类型" tabindex="-1"><a class="header-anchor" href="#函数传参类型" aria-hidden="true">#</a> 函数传参类型</h3><p>在 C++11 中，函数的传参类型有 <em>传值调用</em>、<em>传常量引用调用</em>、<em>传引用调用</em> 和 <em>右值引用调用</em>。其实就是一下的种类：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 仅传值</span>
<span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 常量引用</span>
<span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 引用传值</span>
<span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;&amp;</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 右值引用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而使用的区别就在于：</p><ul><li>对于不被改变的 <em>基本数据类型</em> （如 <code>int add(int a, int b)</code>），就普通地传形参就行</li><li>对于不被改变的 <em>非基本数据类型</em> （如 <code>vector</code> 或 <code>string</code>），就传常量引用</li><li>对于会被改变的数据 （如 <code>void swap(int&amp; a, int&amp; b)</code>），就引用传值</li></ul><p><strong>其中</strong>，第二条的原因在于，如果仅是传形参，实际上调用的是参数的 <strong>拷贝构造函数</strong>，相较于传地址过去会带来极大的消耗</p><h4 id="左值引用与右值引用" tabindex="-1"><a class="header-anchor" href="#左值引用与右值引用" aria-hidden="true">#</a> 左值引用与右值引用</h4><p>在 C++ 11 中，引入了左值与右值。简单地来讲，赋值等号左边的是左值，指可取地址的具体变量；等号右边的是右值，通常为没有明确地址的临时值</p><p>引用的本质就是通过指针操作的别名，可以通过引用来修改该地址变量的值。函数传参时传引用可以避免耗时的拷贝</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">233</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token operator">&amp;</span> la <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token comment">// 正确的，左值引用指向了左值</span>
<span class="token keyword">int</span><span class="token operator">&amp;</span> La <span class="token operator">=</span> <span class="token number">233</span><span class="token punctuation">;</span>  <span class="token comment">// 错误的，左值引用不能对右值取地址</span>

<span class="token keyword">int</span><span class="token operator">&amp;&amp;</span> ra <span class="token operator">=</span> <span class="token number">233</span><span class="token punctuation">;</span> <span class="token comment">// 正确的，右值引用就是指向右值的</span>
<span class="token keyword">int</span><span class="token operator">&amp;&amp;</span> Ra <span class="token operator">=</span> a<span class="token punctuation">;</span>   <span class="token comment">// 错误的，右值引用不能指向左值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>非要给右值引用传左值的话，就得用到 <code>std::move()</code> 了，它唯一的作用只是 <strong>把左值强制转化为右值</strong></p><p>一些使用例：</p><ul><li><p>触发情况</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">{</span>
  string data<span class="token punctuation">;</span>
  <span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token operator">:</span> data<span class="token punctuation">{</span>s<span class="token punctuation">}</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;left!\\n&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">node</span><span class="token punctuation">(</span>string<span class="token operator">&amp;&amp;</span> s<span class="token punctuation">)</span> <span class="token operator">:</span> data<span class="token punctuation">{</span>s<span class="token punctuation">}</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;right!\\n&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  vector<span class="token operator">&lt;</span>node<span class="token operator">&gt;</span> arr<span class="token punctuation">;</span>
  string s <span class="token operator">=</span> <span class="token string">&quot;asd&quot;</span><span class="token punctuation">;</span>
  arr<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 左值引用</span>
  arr<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;213&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 右值引用</span>
  <span class="token comment">// 输出： &quot;left! \\n right!&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>非基本数据类型的 <code>swap()</code>，是通过 <code>move()</code> 来交换而不是复制（当然，在 <em>标准库</em> <code>std::swap()</code> 中，对右值引用的交换也是通过 <code>move</code>来实现的）</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">Swap</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> string<span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  string t <span class="token operator">=</span> <span class="token function">move</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  a <span class="token operator">=</span> <span class="token function">move</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token function">move</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><br><p>在标准库中，对于非基本数据类型都传了引用值，而且都分了左右引用的两个版本）对吧……</p><br><h2 id="c-語言中に" tabindex="-1"><a class="header-anchor" href="#c-語言中に" aria-hidden="true">#</a> C 語言中に</h2><div class="h5">数组长度：</div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong><code>memset</code></strong> 批量赋值只能是 <code>char</code> 用，<code>int</code> 只能给 -1 或 0， 而：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">//赋值无穷大</span>
<span class="token function">memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">//赋值无穷小</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="h5">\`ctime\`</div><ul><li>时间戳获取与转换<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>time_t t <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// cin &gt;&gt; t; //当然，也能输入时间戳（秒）</span>
<span class="token keyword">char</span> tmp<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> form<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;%Y-%m-%d %H:%M:%S&quot;</span><span class="token punctuation">;</span>
<span class="token function">strftime</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">,</span> form<span class="token punctuation">,</span> <span class="token function">localtime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cout <span class="token operator">&lt;&lt;</span> tmp <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>当前时间 <code>cpp {.line-numbers} time_t t = time(&amp;t); string s = ctime(&amp;t); cout &lt;&lt; s &lt;&lt; endl; </code><strong><code>cctype</code>：</strong></li></ul><p><strong><code>#include&lt;cctype&gt;</code></strong>：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//只能用在单个字符</span>
<span class="token function">isalnum</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">//--&gt;是否为字母或者数字</span>
<span class="token function">isalpha</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">//--&gt;是否为字母</span>
<span class="token function">isblank</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">//--&gt;是否为空格或者 tab</span>
<span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">//--&gt;是否为数字</span>
<span class="token function">ispunct</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">//--&gt;是否为符号</span>
<span class="token function">isupper</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">//--&gt;是否为大写字母</span>
<span class="token function">isspace</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">//--&gt;是否为空格</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="h5">\`sprintf\`：</div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">sprintf</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token string">&quot;%d+%d=%d&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// →同时还把 + = 也存进去了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="h5">符号优先级：</div><div align="center"><img width="90%" src="`+m+'"><p> 符号优先级 </p></div>',30);function R(M,W){const e=l("RouterLink"),p=l("ExternalLinkIcon");return u(),r("div",null,[b,n("ul",null,[n("li",null,[n("strong",null,[a(e,{to:"/Algorithm/"},{default:o(()=>[s("算法 (C++ 描述)")]),_:1})])])]),c(' @import "[TOC]" {cmd="toc" depthFrom=1 depthTo=6 orderedList=false} '),c(" code_chunk_output "),g,c(" /code_chunk_output "),h,n("blockquote",null,[n("p",null,[s("默认 C++标准：C++17，编译环境： "),w,s("，操作系统： "),y,s("，若无说明，默认都带了万能头与 std 的命名空间（见："),a(e,{to:"/Algorithm/#acm"},{default:o(()=>[s("ACM 的头模板")]),_:1}),s("）")])]),f,n("p",null,[n("strong",null,[n("a",_,[s("编程语言中常用的变量命名缩写"),a(p)])])]),x,n("p",null,[n("strong",null,[n("a",E,[s("C++ cin 详解及清空输入缓冲区"),a(p)])])]),B,n("p",null,[n("strong",null,[n("a",q,[s("C++ stringstream 介绍"),a(p)])])]),A,n("ul",null,[n("li",null,[n("a",C,[s("C++模板 template 用法总结"),a(p)])]),n("li",null,[n("a",S,[s("CppTemplateTutorial"),a(p)]),s("，或 "),a(e,{to:"/Language/wuye9036_CppTemplateTutorial.html"},{default:o(()=>[s("存档")]),_:1})])]),T,n("blockquote",null,[n("p",null,[D,s(),n("a",z,[s("简书_继承方式"),a(p)]),s(" 、 "),n("a",L,[s("拷贝构造函数_知乎"),a(p)])])]),F,n("blockquote",null,[n("p",null,[s("REF: "),n("a",V,[s("C ++ Lambda 表达式详解"),a(p)])])]),N])}const j=i(v,[["render",R],["__file","Cpp.html.vue"]]);export{j as default};
