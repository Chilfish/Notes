import{_ as p,V as i,W as d,Z as n,a0 as s,X as e,$ as o,Y as r,a1 as a,D as c}from"./framework-94985248.js";const u={},k=n("p",null,[n("br"),n("p",{style:{"font-size":"32px","font-weight":"bold"}},"目录")],-1),m=n("strong",null,"外链",-1),g={href:"https://blog.csdn.net/u010183728/article/details/81913729",target:"_blank",rel:"noopener noreferrer"},v={href:"https://blog.csdn.net/wzh1378008099/article/details/105687998",target:"_blank",rel:"noopener noreferrer"},h=a('<ul><li><a href="#stdstring-%E5%AD%97%E7%AC%A6%E4%B8%B2">std::string 字符串</a></li><li><a href="#%E5%BA%8F%E5%88%97%E5%BC%8F%E5%AE%B9%E5%99%A8%E5%8F%AF%E5%BA%8F">序列式容器（可序）</a><ul><li><a href="#vector">Vector</a></li><li><a href="#deque">deque</a></li><li><a href="#list">List</a></li></ul></li><li><a href="#%E5%85%B3%E8%81%94%E5%BC%8F%E5%AE%B9%E5%99%A8-%E5%B7%B2%E5%BA%8F">关联式容器 （已序）</a><ul><li><a href="#map-multimap">Map multimap</a></li><li><a href="#set-multiset">Set multiset</a></li></ul></li><li><a href="#%E5%AE%B9%E5%99%A8%E9%80%82%E9%85%8D%E5%99%A8">容器适配器</a><ul><li><a href="#stack">Stack</a></li><li><a href="#%E9%98%9F%E5%88%97">队列</a></li></ul></li><li><a href="#%E8%BF%AD%E4%BB%A3%E5%99%A8">迭代器</a></li><li><a href="#stl-%E5%87%BD%E6%95%B0">STL 函数</a><ul><li><a href="#%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95">查找算法</a></li><li><a href="#%E4%BF%AE%E6%94%B9%E5%BA%8F%E5%88%97%E7%9A%84%E6%93%8D%E4%BD%9C">修改序列的操作</a></li><li><a href="#%E5%88%A0%E9%99%A4%E5%92%8C%E6%9B%BF%E6%8D%A2%E7%AE%97%E6%B3%95">删除和替换算法</a></li><li><a href="#%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88%E7%AE%97%E6%B3%95">排列组合算法</a></li><li><a href="#%E7%AE%97%E6%9C%AF%E7%AE%97%E6%B3%95">算术算法</a></li><li><a href="#%E7%94%9F%E6%88%90%E5%92%8C%E5%BC%82%E5%8F%98%E7%AE%97%E6%B3%95">生成和异变算法</a></li><li><a href="#%E5%85%B3%E7%B3%BB%E7%AE%97%E6%B3%95">关系算法</a></li><li><a href="#%E9%9B%86%E5%90%88%E7%AE%97%E6%B3%95">集合算法</a></li><li><a href="#%E5%A0%86%E7%AE%97%E6%B3%95">堆算法</a></li></ul></li></ul>',1),b=a(`<br><h2 id="std-string-字符串" tabindex="-1"><a class="header-anchor" href="#std-string-字符串" aria-hidden="true">#</a> std::string 字符串</h2><br><div class="h5">互转：</div><ul><li><strong>数字转 string：</strong> <code>string s = to_string(整数 | 小数)</code>;</li><li><strong>string 转数字：</strong> <code>int a = stoi(s); double b = stod(s);</code></li></ul><div class="h5">大小写转换：</div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">transform</span><span class="token punctuation">(</span><span class="token function">all</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token double-colon punctuation">::</span>tolower<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不用带转译的<strong>纯文本格式</strong>，保持缩进：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>string str <span class="token operator">=</span> <span class="token raw-string string">R&quot;(233
    asd\\n
    asd
233)&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// cout:</span>
<span class="token number">233</span>
    asd\\n
    asd
  <span class="token number">233</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="h5">STL 函数：</div><ul><li><strong>替换：</strong> <code>c.replace(a, b, &quot;xxx&quot;)</code>，a：替换的初始位置，b：替换的长度</li><li><strong>查找：</strong><ul><li><code>b.find(c, a)</code> ：从位置 a 开始，在 b 中找 c</li><li><code>str.find_first_of(str1)</code> ：找第一次出现的位置，找不到就返回 -1</li><li><code>find</code> 需要子串和父串全部匹配，<code>find_first_of</code> 只需匹配一个字符就可以</li></ul></li><li><strong>删除：</strong> <code>c.erase(a, b)</code> a：删除的初始位置，b：删除的个数。仅有 a 的话，则删除位置 a 后面的字符</li><li><strong>截取：</strong> <code>string s = c.substr(a, b);</code>，a：截取的初始位置，b：截取的长度</li></ul><br><h2 id="序列式容器-可序" tabindex="-1"><a class="header-anchor" href="#序列式容器-可序" aria-hidden="true">#</a> 序列式容器（可序）</h2><h3 id="vector" tabindex="-1"><a class="header-anchor" href="#vector" aria-hidden="true">#</a> Vector</h3><div class="h5">构造函数：</div><ul><li><code>vector()</code>：创建一个空 <code>vector</code></li><li><code>vector(int len)</code>：创建一个 <code>vector</code>，元素个数为 <code>len</code>，值默认为 0</li><li><code>vector(int len, const T&amp; t)</code>：创建一个 <code>vector</code>，元素个数为 <code>len</code>，且值均为 <code>t</code></li><li><code>vector(const vector&amp;)</code>：复制构造函数</li><li><code>vector(begin, end)</code>：复制 <code>[begin, end)</code> 区间内另一个数组的元素到数组中</li></ul><div class="h5">属性：</div><ul><li><code>a.at(pos)</code>：返回编号位置的数据</li><li><code>a.begin()</code>：返回数组 <em>第一个元素</em> 的迭代器</li><li><code>a.end()</code>：返回数组的 <em>最后一个元素+1</em> 的迭代器</li><li><code>a.rbegin()</code>：将数组反转后的开始迭代器返回</li><li><code>a.rend()</code>：将数组反转构的结束迭代器返回</li><li><code>a.front()</code>：返回数组的第一个元素</li><li><code>a.back()</code>：返回数组的最后一个元素</li><li><code>a.max_size()</code>：返回数组最大可以是多大</li><li><code>a.capacity()</code>：返回当前数组分配的大小</li><li><code>a.size()</code>：返回数组的长度</li><li><code>a.empty()</code>：判断<code> vector</code> 是否为空</li></ul><div class="h5">方法：</div>`,19),_=n("li",null,[n("code",null,"a.insert(a.begin() + n, x)"),s("：在 下标 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"n"),n("mo",null,"−"),n("mn",null,"1")]),n("annotation",{encoding:"application/x-tex"},"n - 1")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"1")])])]),s(" 之前插入 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"x")]),n("annotation",{encoding:"application/x-tex"},"x")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"x")])])])],-1),f=a("<li><code>a.push_back(x)</code>：在数组的最后添加一个数据</li><li><code>a.pop_back()</code>：去掉数组的最后一个数据</li><li><code>a.resize(newSize, value = 0)</code>：改变数组的长度，如果大于当前长度，则填充默认值 0 或 <code>value</code>；否则将数组缩减至新长度</li><li><code>a.reserve(newCapacity)</code>：改变当前数组所分配容量的大小，如果小于等于当前容量，则将当前容量改为当前长度</li><li><code>a.erase(begin [, end])</code>：删除迭代器范围的元素</li><li><code>a.clear()</code>：清空当前的数组</li><li><code>a.swap(b)</code>：与另一个数组交换数据</li><li><code>a.assign(n, value)</code>：将 n 个 value 赋值给 a。若原先容量大于 n，则不变；否则变为 n</li>",8),y=n("code",null,"a.assign({list})",-1),q=n("li",null,[n("code",null,"a.assign(arr.from, arr.to)"),s("：将 arr 迭代器范围内的赋值给 a")],-1),E=a(`<div class="h5">二维数组：</div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>vector<span class="token operator">&lt;</span>vi<span class="token operator">&gt;</span> <span class="token function">aa</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token function">vi</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5行2列的5</span>
vector<span class="token operator">&lt;</span>vi<span class="token operator">&gt;</span> arr<span class="token punctuation">{</span>
  <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> row <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  cout <span class="token operator">&lt;&lt;</span> <span class="token function">toString</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
  <span class="token comment">// for (auto col : row) cout &lt;&lt; col &lt;&lt; &quot; &quot;;</span>
  <span class="token comment">// cout &lt;&lt; endl;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="deque" tabindex="-1"><a class="header-anchor" href="#deque" aria-hidden="true">#</a> deque</h3><div class="h5">属性方法：</div><ul><li><code>deq[pos]</code>：用来访问双向队列中单个的元素</li><li><code>deq.front()</code>：返回第一个元素的引用</li><li><code>deq.back()</code>：返回最后一个元素的引用</li><li><code>deq.push_front(x)</code>：把元素 x 插入到双向队列的头部</li><li><code>deq.pop_front()</code>：弹出双向队列的第一个元素</li><li><code>deq.push_back(x)</code>：把元素 x 插入到双向队列的尾部</li><li><code>deq.pop_back()</code>：弹出双向队列的最后一个元素</li></ul><div class="h5">双向队列的一些特点：</div><ul><li>支持随机访问，即支持 <code>[ ]</code> 以及 <code>at()</code>，但是性能没有<code>vector</code>好</li><li>与数组<code>比较，deque</code> 的优势是：头部插入和删除时，不需要搬移元素，效率特别高，而且在扩容时，也不需要搬移大量的元素，因此其效率是必数组高的</li><li>与 <code>list</code> 比较，其底层是连续空间，空间利用率比较高，不需要存储额外字段</li><li><code>deque</code>的元素存取和迭代器操作会稍微慢一些，因为<code>deque</code>的内部结构会多一个间接过程</li><li><code>deque</code>迭代器是特殊的智能指针，而不是一般指针，它需要在不同的区块之间跳转</li><li><code>deque</code>可以包含更多的元素，其<code>max_size</code>可能更大，因为不止使用一块内存</li><li><code>deque</code>的内存区块不再被使用时，会被释放，<code>deque</code>的内存大小是可缩减的。不过，是不是这么做以及怎么做由实际操作版本定义</li></ul><div class="h5">但是：</div><ul><li><code>deque</code> 有一个致命缺陷：不适合遍历。因为在遍历时，<code>deque</code> 的迭代器要频繁的去检测其是否移动到某段小空间的边界，导致效率低下</li><li>而序列式场景中，可能需要经常遍历，因此在实际中，需要线性结构时，大多数情况下优先考虑数组和 <code>list</code></li><li><code>deque</code> 的应用并不多，而目前能看到的一个应用就是，<code>STL</code> 用其作为 <code>stack</code> 和 <code>queue</code> 的底层数据结构</li></ul><br><h3 id="list" tabindex="-1"><a class="header-anchor" href="#list" aria-hidden="true">#</a> List</h3><p><code>List</code> 是 STL 实现的双向链表，与<code>vectors</code>相比，它允许快速的插入和删除，但是随机访问却比较慢</p><p>可以直接<code> s.sort();</code> 或 <code>s.sort(greater&lt;name&gt;());</code></p><br><h2 id="关联式容器-已序" tabindex="-1"><a class="header-anchor" href="#关联式容器-已序" aria-hidden="true">#</a> 关联式容器 （已序）</h2><h3 id="map-multimap" tabindex="-1"><a class="header-anchor" href="#map-multimap" aria-hidden="true">#</a> Map multimap</h3><p>对 <code>map</code> 的定义：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>map<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Value</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">=</span> less<span class="token operator">&lt;</span>Key<span class="token operator">&gt;&gt;</span> name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所以定义<code>map</code>的时候，默认是按<code>key</code>的值小到大排序的。要按大到小时， 就<code>map&lt;key, value, greater&lt;key&gt;&gt;name</code></p><div class="h5">属性方法：</div><ul><li>插入：<code>s.insert(make_pair(key, value));</code></li><li>指定位置插入：<code>s.insert(s.begin() + n, pair);</code></li></ul><p>当要按自定义 <code>key</code> 来排序时，要另外写 cmp 的<strong>仿函数</strong>：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">CmpByKeyLen</span> <span class="token punctuation">{</span>
    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> k1<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> k2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> k1 <span class="token operator">+</span> k2 <span class="token operator">&lt;</span> k2 <span class="token operator">+</span> k1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token comment">// 按 key 的字典序升序</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  vector<span class="token operator">&lt;</span>PSI<span class="token operator">&gt;</span> a<span class="token punctuation">{</span>
    <span class="token punctuation">{</span><span class="token string">&quot;fish&quot;</span><span class="token punctuation">,</span> <span class="token number">233</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;mie&quot;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;haha&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;ohh&quot;</span><span class="token punctuation">,</span> <span class="token number">233</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> CmpByKeyLen<span class="token operator">&gt;</span> m<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> ele <span class="token operator">:</span> a<span class="token punctuation">)</span> m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> ele <span class="token operator">:</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;name: &quot;</span> <span class="token operator">&lt;&lt;</span> ele<span class="token punctuation">.</span>first
      <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\tscore: &quot;</span> <span class="token operator">&lt;&lt;</span> ele<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按 <strong><code>Value</code></strong> 排序：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">Map_Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  vector<span class="token operator">&lt;</span>PSI<span class="token operator">&gt;</span> a<span class="token punctuation">{</span>
    <span class="token punctuation">{</span><span class="token string">&quot;fish&quot;</span><span class="token punctuation">,</span> <span class="token number">233</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;mie&quot;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;haha&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;ohh&quot;</span><span class="token punctuation">,</span> <span class="token number">233</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> m<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> ele <span class="token operator">:</span> a<span class="token punctuation">)</span> m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 构造数据</span>

  vector<span class="token operator">&lt;</span>PSI<span class="token operator">&gt;</span> <span class="token function">ans</span><span class="token punctuation">(</span><span class="token function">all</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 需要移植到vector才能排序</span>
  <span class="token keyword">auto</span> byValue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> PSI<span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> PSI<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> lhs<span class="token punctuation">.</span>second <span class="token operator">&lt;</span> rhs<span class="token punctuation">.</span>second<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">sort</span><span class="token punctuation">(</span><span class="token function">all</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">,</span> byValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> ele <span class="token operator">:</span> ans<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;name: &quot;</span> <span class="token operator">&lt;&lt;</span> ele<span class="token punctuation">.</span>first
      <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\tscore: &quot;</span> <span class="token operator">&lt;&lt;</span> ele<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><div class="h5">与 \`unordered_map\` 区别：</div><ul><li><strong>运行效率方面：</strong> <code>unordered_map</code> 最高，而 <code>map</code> 效率较低但提供了稳定效率和有序的序列</li><li><strong>占用内存方面：</strong> <code>map</code> 内存占用略低，<code>unordered_map</code> 内存占用略高，而且是线性成比例的</li></ul><div class="h5">内部实现机理：</div><ul><li><strong><code>map</code>：</strong> <code>map</code> 内部实现了一个<strong>红黑树</strong>，该结构具有自动排序的功能，因此 <code>map</code> 内部的所有元素都是有序的。红黑树的每一个节点都代表着 <code>map</code> 的一个元素，因此对于 <code>map</code> 进行的查找、删除、添加等一系列的操作都相当于是对红黑树进行这样的操作，故红黑树的效率决定了 <code>map</code> 的效率</li><li><strong><code>unordered_map</code>：</strong> <code>unordered_map</code> 内部实现了一个<strong>哈希表</strong>，因此其元素的排列顺序是杂乱的，无序的</li></ul><div class="h5">优点、缺点、使用场景：</div>`,32),w=n("ul",null,[n("li",null,[n("strong",null,[n("code",null,"map"),s("：")]),n("ul",null,[n("li",null,[n("strong",null,"优点："),s(" 有序性，这是 "),n("code",null,"map"),s(" 结构最大的优点，其元素的有序性在很多应用中都会简化很多的操作。内部实现一个红黑树使得 "),n("code",null,"map"),s(" 的很多操作在 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msub",null,[n("mrow",null,[n("mi",null,"log"),n("mo",null,"⁡")]),n("mn",null,"2")]),n("mi",null,"n")]),n("annotation",{encoding:"application/x-tex"},"\\log_2{n}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.9386em","vertical-align":"-0.2441em"}}),n("span",{class:"mop"},[n("span",{class:"mop"},[s("lo"),n("span",{style:{"margin-right":"0.01389em"}},"g")]),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.207em"}},[n("span",{style:{top:"-2.4559em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"2")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.2441em"}},[n("span")])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n")])])])]),s(" 的时间复杂度下就可以实现，因此效率非常的高")]),n("li",null,[n("strong",null,"缺点："),s(" 空间占用率高，因为 "),n("code",null,"map"),s(" 内部实现了红黑树，虽然提高了运行效率，但是因为每一个节点都需要额外保存父节点，孩子节点以及红/黑性质，使得每一个节点都占用大量的空间")]),n("li",null,[n("strong",null,"适用处："),s(" 对于那些有顺序要求的问题，用 "),n("code",null,"map"),s(" 会更高效一些")])])]),n("li",null,[n("strong",null,[n("code",null,"unordered_map"),s("：")]),n("ul",null,[n("li",null,[n("strong",null,"优点："),s(" 内部实现了哈希表，因此其查找速度是常量级别的 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mn",null,"1"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(1)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},"1"),n("span",{class:"mclose"},")")])])])]),n("li",null,[n("strong",null,"缺点："),s(" 哈希表的建立比较耗费时间")]),n("li",null,[n("strong",null,"适用处："),s(" 对于查找问题，"),n("code",null,"unordered_map"),s(" 会更加高效一些，因此遇到查找问题，常会考虑一下用 "),n("code",null,"unordered_map")])])])],-1),x=a(`<br><h3 id="set-multiset" tabindex="-1"><a class="header-anchor" href="#set-multiset" aria-hidden="true">#</a> Set multiset</h3><p><code>set</code> 是关联容器，含有 <code>Key</code> 类型对象的已排序集。用比较函数 <code>compare</code> 进行排序。搜索、移除和插入拥有对数复杂度。<code>set</code> 和 <code>multiset</code> 的底层实现是红黑树</p><p>与 <code>map</code> 不同，<code>set</code> 中的元素即是键值又是实值，<code>set</code> 不允许两个元素有相同的键值。不能通过 <code>set</code> 的迭代器去修改 <code>set</code> 元素，原因是修改元素会破坏 <code>set</code> 组织。当对容器中的元素进行插入或者删除时，操作之前的所有迭代器在操作之后依然有效</p><p>由于 <code>set</code> 元素是排好序的，且默认为升序，因此当 <code>set</code> 集合中的元素为结构体或自定义类时，该结构体或自定义类必须实现运算符 <code>&lt;</code> 的重载</p><p><code>multiset</code> 特性及用法和 <code>set</code> 完全相同，唯一的差别在于它允许键值重复</p><ul><li><code>set</code> 的定义<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>set<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">compare</span> <span class="token operator">=</span> less<span class="token operator">&lt;</span>key_name<span class="token operator">&gt;&gt;</span> name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>一些函数：<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>a<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token comment">//插入key</span>
a<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token comment">//删除key</span>
a<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token operator">*</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> n<span class="token punctuation">)</span>  <span class="token comment">//删除下标n</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>其实道理和 <code>map</code> 差不多 hh</li></ul><br><h2 id="容器适配器" tabindex="-1"><a class="header-anchor" href="#容器适配器" aria-hidden="true">#</a> 容器适配器</h2><p>本质上就是使用 STL 容器来封装成另外的 API，来满足对某种数据结构的需求</p><p>虽然 stack 和 queue 中也可以存放元素，但在 STL 中并没有将其划分在容器的行列，而是将其称为容器适配器。这是因为 stack 和 queue 只是对 deque 的接口进行了包装</p><br><h3 id="stack" tabindex="-1"><a class="header-anchor" href="#stack" aria-hidden="true">#</a> Stack</h3><div class="h5">属性方法：</div><ul><li><code>stack&lt;int&gt; s</code>：定义栈</li><li><code>s.empty()：bool</code>：判断栈是否为空</li><li><code>s.size()：int</code>：返回栈中的元素个数</li><li><code>s.pop()：void</code>：删除栈中的顶部元素</li><li><code>s.top()：type</code>：返回栈中的顶部元素</li><li><code>s.push(item)：void</code>：往栈顶压入元素</li></ul><br><h3 id="队列" tabindex="-1"><a class="header-anchor" href="#队列" aria-hidden="true">#</a> 队列</h3><div class="h5">\`queue\` 队列</div><ul><li><strong>属性方法：</strong><ul><li><code>queue&lt;int&gt; q</code>：定义队列</li><li><code>q.empty()：bool</code>：判断队列是否为空</li><li><code>q.size()：int</code>：返回队列中的元素个数</li><li><code>q.pop()：void</code>：删除队列中的顶部元素</li><li><code>q.push(item)：void</code>：往队列尾部压入元素</li><li><code>q.front()：type</code>：返回队首元素的值</li><li><code>q.back()：type</code>：返回队尾元素的值</li></ul></li></ul><div class="h5">\`priority_queue\` 优先队列</div><ul><li><p>和 <code>queue</code> 不同的就在于，可以自定义其中数据的优先级，让优先级高的排在队列前面，优先出队。 优先队列具有队列的所有特性，包括基本操作，只是在这基础上添加了内部的一个排序，它本质是一个 <strong>堆</strong> 实现的</p></li><li><p><strong>定义：</strong><code>priority_queue&lt;元素类型，基础序列的类型，比较的类型&gt; name;</code>。基础序列必须是由数组实现的容器，默认为 <code>vector</code>；比较类型默认为 <code>less&lt;value_type&gt;</code></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>priority_queue <span class="token operator">&lt;</span>PII<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span><span class="token punctuation">,</span> cmp<span class="token operator">&gt;</span> q<span class="token punctuation">;</span>
priority_queue <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&gt;</span> q<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>栗子：</strong> 当然，也可以用 <code>struct</code> 代替 <code>pair</code></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">Priority_Struct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    string name<span class="token punctuation">;</span>
    <span class="token keyword">int</span> score<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">cmp</span> <span class="token punctuation">{</span>
    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> Student<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> Student<span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> a<span class="token punctuation">.</span>score <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>score <span class="token operator">||</span> <span class="token punctuation">(</span>
        a<span class="token punctuation">.</span>score <span class="token operator">==</span> b<span class="token punctuation">.</span>score <span class="token operator">&amp;&amp;</span>
        a<span class="token punctuation">.</span>name <span class="token operator">+</span> b<span class="token punctuation">.</span>name <span class="token operator">&gt;</span> b<span class="token punctuation">.</span>name <span class="token operator">+</span> a<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token comment">// 先按 score 降序，再按 name 字典序升序</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  vector<span class="token operator">&lt;</span>Student<span class="token operator">&gt;</span> a<span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token string">&quot;fish&quot;</span><span class="token punctuation">,</span> <span class="token number">233</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;mie&quot;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;haha&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;ohh&quot;</span><span class="token punctuation">,</span> <span class="token number">233</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  priority_queue <span class="token operator">&lt;</span>Student<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>Student<span class="token operator">&gt;</span><span class="token punctuation">,</span> cmp<span class="token operator">&gt;</span> pq<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> ele ： a<span class="token punctuation">)</span> pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">auto</span> ele <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;name： &quot;</span> <span class="token operator">&lt;&lt;</span> ele<span class="token punctuation">.</span>name
      <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\tscore： &quot;</span> <span class="token operator">&lt;&lt;</span> ele<span class="token punctuation">.</span>score <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    pq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><br><h2 id="迭代器" tabindex="-1"><a class="header-anchor" href="#迭代器" aria-hidden="true">#</a> 迭代器</h2><p>在想要遍历或访问数据结构中的数据时，一方面希望只使用共有的方法就能遍历，另一方面又希望能够统一各个数据结构的遍历方式，于是就有了 <strong>迭代器</strong></p><p>就如，<code>std::vector</code> 是用数组实现的，<code>std::list</code>使用链表实现的，<code>std::map</code>则是红黑树实现，每个 <strong>容器</strong> 的遍历方式都不一样，遍历的边界也都不一样，这时候就需要迭代器去统一</p><p>而对表的一些操作，尤其是在表的中间进行插入和删除的操作，需要位置的概念。在 STL 中位置由内嵌的 <code>iterator</code> 表示。它定义了一对方法：</p><ul><li><code>iterator begin()</code>：表示容器|表的第一项</li><li><code>Iterator end()</code>：表示容器|表最后一项之后的位置</li></ul><p>使用迭代器对表的遍历，即为从表头一直到表尾。如：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="h5">一些对迭代器的操作：</div><ul><li><code>++it</code> 和 <code>++it</code>：将迭代器推到下一个位置</li><li><code>--it</code> 和 <code>it--</code>：将迭代器推到上一个位置</li><li><code>it1 == it2</code> 和 <code>it1 != it2</code>：比较是否指向同一个位置</li><li><code>*it</code>，返回迭代器指向数据的引用</li><li><code>It + n</code> 和 <code>it - n</code>：将迭代器向前或向后推 n 个位置</li></ul><p>其中，对于数据的访问有两种情况：只读或读写：<code>const_iterator</code> 表示只读迭代器，不允许改写指向元素的值， <code>iterator</code> 则是可读写迭代器</p><div class="h5">而在STL中：</div><ul><li>随机访问： <code>vector</code>、<code>deque</code></li><li>不支持：<code>stack</code>、<code>queue</code>、<code>priority_queue</code></li><li>双向：<code>list</code>、<code>set</code>、<code>multiset</code>、<code>map</code>、<code>multimap</code></li></ul>`,34),B=n("p",null,[s("范围总是 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",{stretchy:"false"},"["),n("mi",null,"b"),n("mi",null,"e"),n("mi",null,"g"),n("mi",null,"i"),n("mi",null,"n"),n("mo",{separator:"true"},","),n("mi",null,"e"),n("mi",null,"n"),n("mi",null,"d"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"[begin, end)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"["),n("span",{class:"mord mathnormal"},"b"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),n("span",{class:"mord mathnormal"},"in"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mord mathnormal"},"d"),n("span",{class:"mclose"},")")])])])],-1),A=a('<br><h2 id="stl-函数" tabindex="-1"><a class="header-anchor" href="#stl-函数" aria-hidden="true">#</a> STL 函数</h2><h3 id="查找算法" tabindex="-1"><a class="header-anchor" href="#查找算法" aria-hidden="true">#</a> 查找算法</h3><p>判断容器中是否包含某个值</p><ul><li><strong>基于已序序列的二分搜索法：</strong><ul><li><strong><code>binary_search(begin, end, value)： bool</code>：</strong> 查找 <code>value</code>，找到返回 <code>true</code>。重载的版本实用指定的比较函数对象或函数指针来判断相等</li><li><strong><code>lower_bound(begin, end, value)： iterator</code>：</strong> 返回 <strong>小于等于</strong> <code>value</code> 的迭代器，可自定义比较函数，或重载 <code>&lt;</code></li><li><strong><code>upper_bound(begin, end, value)： iterator</code>：</strong> 返回 <strong>大于</strong> <code>value</code> 的迭代器</li><li><strong><code>equal_range(begin, end, value)： pair&lt;iterator&gt;</code>：</strong> 返回一对迭代器，第一个表示 <code>lower_bound</code>，第二个表示 <code>upper_bound</code></li></ul></li><li><strong>数数：</strong><ul><li><strong><code>count(begin, end, value)： int</code>：</strong> 返回相等元素个数</li><li><strong><code>count_if(begin, end, fun)： int</code>：</strong> 返回满足 <code>fun 函数</code> 条件的个数</li></ul></li><li><strong>找数：</strong><ul><li><strong><code>find(begin, end, value)： iterator</code>：</strong> 返回找到的迭代器，找不到则返回 <code>arr.end()</code></li><li><strong><code>find_if(begin, end, fun)： iterator</code>：</strong> 使用输入的函数代替等于操作符执行 <code>find</code></li><li><strong><code>find_first_of(begin, end, b_begin, b_end)： iterator</code>：</strong> 两次循环地遍历 <code>b</code> 与 <code>arr</code>，返回 <code>b</code> 中元素第一次在 <code>arr</code> 中出现的迭代器，找到即终止，找不到则返回<code>arr.end()</code></li></ul></li><li><strong>找子序列：</strong><ul><li><strong><code>find_end(begin, end, b_begin, b_end)： iterator</code>：</strong> 返回 最后一次出现 <strong>连续子序列 b</strong> 的迭代器，找不到返回 <code>arr.end()</code></li><li><strong><code>search(begin, end, b_begin, b_end)： iterator</code>：</strong> 返回 第一次出现 <strong>连续子序列 b</strong> 的迭代器，找不到返回 <code>arr.end()</code></li><li><strong><code>search_n(begin, end, cnt, value)： iterator</code>：</strong> 返回连续出现 <code>cnt</code> 次的 <code>value</code> 的迭代器   </li></ul></li></ul><br><h3 id="修改序列的操作" tabindex="-1"><a class="header-anchor" href="#修改序列的操作" aria-hidden="true">#</a> 修改序列的操作</h3><ul><li><strong><code>inplace_merge</code>：</strong> 合并两个<strong>有序序列</strong></li><li><strong><code>merge(all(a), all(b), back_inserter(ans))： void</code>：</strong> 合并两个有序序列，存放到另一个序列。重载版本使用自定义的比较</li><li><strong><code>partition</code>：</strong> 对指定范围内元素重新排序，使用输入的函数，把结果为 <code>true</code> 的元素放在结果为 <code>false</code> 的元素之前</li><li><strong><code>random_shuffle</code>：</strong> 对指定范围内的元素随机调整次序。重载版本输入一个随机数产生操作</li><li><strong><code>reverse</code>：</strong> 将指定范围内元素重新反序排序</li><li><strong><code>reverse_copy</code>：</strong> 与 <code>reverse</code> 类似，不过将结果写入另一个容器</li><li><strong><code>rotate</code>：</strong> 将指定范围内元素移到容器末尾，由 <code>middle</code> 指向的元素成为容器第一个元素</li><li><strong><code>rotate_copy</code>：</strong> 与 <code>rotate</code> 类似，不过将结果写入另一个容器</li><li><strong>排序：</strong><ul><li><strong><code>is_sort(all(arr))： bool</code>：</strong> 判断是否升序</li><li><strong><code>sort(all(arr))： void</code>：</strong> 以升序重新排列指定范围内的元素</li><li><strong><code>stable_sort(all(arr))： void</code>：</strong> 与 <code>sort</code> 类似，不过保留相等元素之间的顺序关系</li><li><strong><code>partial_sort</code>：</strong> 对序列做部分排序，被排序元素个数正好可以被放到范围内。重载版本使用自定义的比较操作</li><li><strong><code>stable_partition</code>：</strong> 与 <code>partition</code> 类似，不过不保证保留容器中的相对顺序</li><li><strong><code>partial_sort_copy</code>：</strong> 与 <code>partial_sort</code> 类似，不过将经过排序的序列复制到另一个容器</li><li><strong><code>nth_element</code>：</strong> 将范围内的序列重新排序，使所有小于第 <code>n</code> 个元素的元素都出现在它前面，而大于它的都出现在后面。重 载版本使用自定义的比较操作</li></ul></li></ul><br><h3 id="删除和替换算法" tabindex="-1"><a class="header-anchor" href="#删除和替换算法" aria-hidden="true">#</a> 删除和替换算法</h3><ul><li><strong><code>copy</code>：</strong> 复制序列</li><li><strong><code>copy_backward</code>：</strong> 与 <code>copy</code> 相同，不过元素是以相反顺序被拷贝</li><li><strong><code>iter_swap</code>：</strong> 交换两个 <code>ForwardIterator</code> 的值</li><li><strong><code>remove</code>：</strong> 删除指定范围内所有等于指定元素的元素。注意，该函数不是真正删除函数。内置函数不适合使用 <code>remove</code> 和 <code>remove_if</code> 函数</li><li><strong><code>remove_copy</code>：</strong> 将所有不匹配元素复制到一个制定容器，返回 <code>OutputIterator</code> 指向被拷贝的末元素的下一个位置</li><li><strong><code>remove_if</code>：</strong> 删除指定范围内输入操作结果为 <code>true</code> 的所有元素</li><li><strong><code>remove_copy_if</code>：</strong> 将所有不匹配元素拷贝到一个指定容器</li><li><strong><code>replace</code>：</strong> 将指定范围内所有等于 <code>old</code> 的元素都用 <code>new</code> 代替</li><li><strong><code>replace_copy</code>：</strong> 与 <code>replace</code> 类似，不过将结果写入另一个容器</li><li><strong><code>replace_if</code>：</strong> 将指定范围内所有操作结果为 <code>true</code> 的元素用新值代替</li><li><strong><code>replace_copy_if</code>：</strong> 与 <code>replace_if</code>，不过将结果写入另一个容器</li><li><strong><code>swap</code>：</strong> 交换存储在两个对象中的值</li><li><strong><code>swap_range</code>：</strong> 将指定范围内的元素与另一个序列元素值进行交换</li><li><strong><code>unique</code>：</strong> 清除序列中重复元素，和 <code>remove</code> 类似，它也不能真正删除元素。重载版本使用自定义比较操作</li><li><strong><code>unique_copy</code>：</strong> 与 <code>unique</code> 类似，不过把结果输出到另一个容器</li></ul><br><h3 id="排列组合算法" tabindex="-1"><a class="header-anchor" href="#排列组合算法" aria-hidden="true">#</a> 排列组合算法</h3><p>提供计算给定集合按一定顺序的所有可能排列组合</p><ul><li><strong><code>next_permutation</code>：</strong> 取出当前范围内的排列，并重新排序为下一个排列。重载版本使用自定义的比较操作</li><li><strong><code>prev_permutation</code>：</strong> 取出指定范围内的序列并将它重新排序为上一个序列。如果不存在上一个序列则返回 <code>false</code>。重载版本使用 自定义的比较操作</li></ul><br><h3 id="算术算法" tabindex="-1"><a class="header-anchor" href="#算术算法" aria-hidden="true">#</a> 算术算法</h3><ul><li><strong><code>accumulate</code>：</strong> <code>iterator</code> 对标识的序列段元素之和，加到一个由 <code>val</code> 指定的初始值上。重载版本不再做加法，而是传进来的 二元操作符被应用到元素上</li><li><strong><code>partial_sum</code>：</strong> 创建一个新序列，其中每个元素值代表指定范围内该位置前所有元素之和。重载版本使用自定义操作代 替加法</li><li><strong><code>inner_product</code>：</strong> 对两个序列做内积(对应元素相乘，再求和)并将内积加到一个输入的初始值上。重载版本使用用户定义 的操作</li><li><strong><code>adjacent_difference</code>：</strong> 创建一个新序列，新序列中每个新值代表当前元素与上一个元素的差。重载版本用指定二元操作计算相 邻元素的差</li></ul><br><h3 id="生成和异变算法" tabindex="-1"><a class="header-anchor" href="#生成和异变算法" aria-hidden="true">#</a> 生成和异变算法</h3><ul><li><strong><code>fill</code>：</strong> 将输入值赋给标志范围内的所有元素</li><li><strong><code>fill_n</code>：</strong> 将输入值赋给 <code>first</code> 到 <code>first + n</code> 范围内的所有元素</li><li><strong><code>for_each</code>：</strong> 用指定函数依次对指定范围内所有元素进行迭代访问，返回所指定的函数类型。该函数不得修改序列中的元素</li><li><strong><code>generate</code>：</strong> 连续调用输入的函数来填充指定的范围</li><li><strong><code>generate_n</code>：</strong> 与 <code>generate</code> 函数类似，填充从指定 <code>iterator</code> 开始的 <code>n</code> 个元素</li><li><strong><code>transform</code>：</strong> 将输入的操作作用与指定范围内的每个元素，并产生一个新的序列。重载版本将操作作用在一对元素上，另外一 个元素来自输入的另外一个序列。结果输出到指定容器</li></ul><br><h3 id="关系算法" tabindex="-1"><a class="header-anchor" href="#关系算法" aria-hidden="true">#</a> 关系算法</h3><ul><li><strong><code>equal</code>：</strong> 如果两个序列在标志范围内元素都相等，返回 <code>true</code>。重载版本使用输入的操作符代替默认的等于操 作符</li><li><strong><code>includes</code>：</strong> 判断第一个指定范围内的所有元素是否都被第二个范围包含，使用底层元素的&lt;操作符，成功返回 <code>true</code>。重载版本使用用户输入的函数</li><li><strong><code>lexicographical_compare</code>：</strong> 比较两个序列。重载版本使用用户自定义比较操作</li><li><strong><code>max</code>：</strong> 返回两个元素中较大一个。重载版本使用自定义比较操作</li><li><strong><code>max_element</code>：</strong> 返回一个 <code>ForwardIterator</code>，指出序列中最大的元素。重载版本使用自定义比较操作</li><li><strong><code>min</code>：</strong> 返回两个元素中较小一个。重载版本使用自定义比较操作</li><li><strong><code>min_element</code>：</strong> 返回一个 <code>ForwardIterator</code>，指出序列中最小的元素。重载版本使用自定义比较操作</li><li><strong><code>mismatch</code>：</strong> 并行比较两个序列，指出第一个不匹配的位置，返回一对 <code>iterator</code>，标志第一个不匹配元素位置。 如果都匹配，返回每个容器的 <code>last</code>。重载版本使用自定义的比较操作</li></ul><br><h3 id="集合算法" tabindex="-1"><a class="header-anchor" href="#集合算法" aria-hidden="true">#</a> 集合算法</h3><ul><li><strong><code>set_union</code>：</strong> 构造一个有序序列，包含两个序列中所有的不重复元素。重载版本使用自定义的比较操作</li><li><strong><code>set_intersection</code>：</strong> 构造一个有序序列，其中元素在两个序列中都存在。重载版本使用自定义的比较操作</li><li><strong><code>set_difference</code>：</strong> 构造一个有序序列，该序列仅保留第一个序列中存在的而第二个中不存在的元素。重载版本使用 自定义的比较操作</li><li><strong><code>set_symmetric_difference</code>：</strong> 构造一个有序序列，该序列取两个序列的对称差集(并集-交集)</li></ul><br><h3 id="堆算法" tabindex="-1"><a class="header-anchor" href="#堆算法" aria-hidden="true">#</a> 堆算法</h3><ul><li><strong><code>make_heap</code>：</strong> 把指定范围内的元素生成一个堆。重载版本使用自定义比较操作</li><li><strong><code>pop_heap</code>：</strong> 并不真正把最大元素从堆中弹出，而是重新排序堆。它把 <code>first</code> 和 <code>last</code>-1 交换，然后重新生成一个堆。可使用容器的 <code>back</code> 来访问被&quot;弹出&quot;的元素或者使用 <code>pop_back</code> 进行真正的删除。重载版本使用自定义的比较操作</li><li><strong><code>push_heap</code>：</strong> 假设 <code>first</code> 到 <code>last</code>-1 是一个有效堆，要被加入到堆的元素存放在位置 <code>last</code>-1，重新生成堆。在指向该函数前，必须先把 元素插入容器后。重载版本使用指定的比较操作</li><li><strong><code>sort_heap</code>：</strong> 对指定范围内的序列重新排序，它假设该序列是个有序堆。重载版本使用自定义比较操作</li></ul>',30);function S(L,F){const t=c("ExternalLinkIcon"),l=c("RouterLink");return i(),d("div",null,[k,n("ul",null,[n("li",null,[m,n("ul",null,[n("li",null,[n("a",g,[s("STL 详解"),e(t)])]),n("li",null,[n("a",v,[s("string 容器详解"),e(t)])])])])]),o(' @import "[TOC]" {cmd="toc" depthFrom=2 depthTo=5 orderedList=false} '),o(" code_chunk_output "),h,o(" /code_chunk_output "),b,n("ul",null,[_,f,n("li",null,[y,s("：将 "),e(l,{to:"/Language/Cpp.html#initializer-list-%E5%88%97%E8%A1%A8%E5%88%9D%E5%A7%8B%E5%8C%96"},{default:r(()=>[s("初始化列表")]),_:1}),s(" 赋值给 a")]),q]),E,w,x,B,A])}const C=p(u,[["render",S],["__file","STL.html.vue"]]);export{C as default};
