import{_ as l,V as o,W as c,Z as t,$ as e,a1 as d}from"./framework-cf51392c.js";const a={},i=e("p",null,[e("br"),e("p",{style:{"font-size":"32px","font-weight":"bold"}},"目录")],-1),r=d('<ul><li><a href="#%E5%85%83%E5%AD%97%E7%AC%A6">元字符</a></li><li><a href="#%E5%8F%8D%E4%B9%89">反义</a></li><li><a href="#%E9%87%8D%E5%A4%8D">重复</a></li><li><a href="#%E5%AD%97%E7%AC%A6%E8%8C%83%E5%9B%B4">字符范围</a></li><li><a href="#%E5%88%86%E7%BB%84">分组</a></li><li><a href="#%E9%9B%B6%E5%AE%BD%E6%96%AD%E8%A8%80">零宽断言</a></li><li><a href="#%E8%B4%AA%E5%A9%AA%E4%B8%8E%E6%87%92%E6%83%B0">贪婪与懒惰</a></li><li><a href="#%E6%88%96">或</a></li></ul>',1),n=d('<br><h2 id="元字符" tabindex="-1"><a class="header-anchor" href="#元字符" aria-hidden="true">#</a> 元字符</h2><div class="tableBox"><p><span></span></p><table><thead><tr><th style="text-align:center;">代码</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>.</code></td><td style="text-align:left;">匹配除换行符以外的任意字符</td></tr><tr><td style="text-align:center;"><code>\\w</code></td><td style="text-align:left;">匹配字母或数字或下划线或汉字</td></tr><tr><td style="text-align:center;"><code>\\s</code></td><td style="text-align:left;">匹配任意的空白符</td></tr><tr><td style="text-align:center;"><code>\\d</code></td><td style="text-align:left;">匹配数字</td></tr><tr><td style="text-align:center;"><code>\\b</code></td><td style="text-align:left;">匹配单词的开始或结束</td></tr><tr><td style="text-align:center;"><code>^</code></td><td style="text-align:left;">匹配字符串的开始</td></tr><tr><td style="text-align:center;"><code>$</code></td><td style="text-align:left;">匹配字符串的结束</td></tr></tbody></table></div><h2 id="反义" tabindex="-1"><a class="header-anchor" href="#反义" aria-hidden="true">#</a> 反义</h2><div class="tableBox"><p><span></span></p><table><thead><tr><th style="text-align:center;">代码</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>\\W</code></td><td style="text-align:left;">匹配任意不是字母，数字，下划线，汉字的字符</td></tr><tr><td style="text-align:center;"><code>\\S</code></td><td style="text-align:left;">匹配任意不是空白符的字符</td></tr><tr><td style="text-align:center;"><code>\\D</code></td><td style="text-align:left;">匹配任意非数字的字符</td></tr><tr><td style="text-align:center;"><code>\\B</code></td><td style="text-align:left;">匹配不是单词开头或结束的位置</td></tr><tr><td style="text-align:center;"><code>[^x]</code></td><td style="text-align:left;">匹配除了 x 以外的任意字符</td></tr><tr><td style="text-align:center;"><code>[^aeiou]</code></td><td style="text-align:left;">匹配除了 aeiou 这几个字母以外的任意字符</td></tr></tbody></table></div><h2 id="重复" tabindex="-1"><a class="header-anchor" href="#重复" aria-hidden="true">#</a> 重复</h2><div class="tableBox"><p><span></span></p><table><thead><tr><th style="text-align:center;">代码</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>*</code></td><td style="text-align:left;">重复零次或更多次</td></tr><tr><td style="text-align:center;"><code>+</code></td><td style="text-align:left;">重复一次或更多次</td></tr><tr><td style="text-align:center;"><code>?</code></td><td style="text-align:left;">重复零次或一次</td></tr><tr><td style="text-align:center;"><code>{n}</code></td><td style="text-align:left;">重复 n 次</td></tr><tr><td style="text-align:center;"><code>{n,}</code></td><td style="text-align:left;">重复 n 次或更多次</td></tr><tr><td style="text-align:center;"><code>{n,m}</code></td><td style="text-align:left;">重复 n 到 m 次</td></tr></tbody></table></div><p>如：<code>\\w+</code> 表示匹配多个字母（即单词），空格或换行为止</p><blockquote><p>懒惰匹配：在重复后加 <code>?</code> 则表示尽可能少地匹配</p></blockquote><br><h2 id="字符范围" tabindex="-1"><a class="header-anchor" href="#字符范围" aria-hidden="true">#</a> 字符范围</h2><p>用 <code>[ ]</code> 表示匹配字符的范围</p><ul><li><code>[aeiou]</code> 表示匹配含有<code>aeiou</code>中的任何一个</li><li><code>[3-9]</code> 表示 在数字中匹配 3 ~ 9 范围内的任何一个</li></ul><br><h2 id="分组" tabindex="-1"><a class="header-anchor" href="#分组" aria-hidden="true">#</a> 分组</h2><p>用 <code>( )</code> 表示分组</p><ul><li><code>([1-3]){3}</code> 表示匹配字符 1 2 3 中的一个并重复 3 次 <ul><li>即：<code>23461322</code> 的结果是 <code>132</code></li></ul></li></ul><br><h2 id="零宽断言" tabindex="-1"><a class="header-anchor" href="#零宽断言" aria-hidden="true">#</a> 零宽断言</h2><ul><li><p><code>(?=exp)</code> 也叫零宽度正预测先行断言，它断言自身出现的位置的后面能匹配表达式 <code>exp</code></p><ul><li>比如 <code>\\b\\w+(?=ing\\b)</code>，匹配以 <code>ing</code> 结尾的单词的前面部分(除了 <code>ing</code> 以外的部分)，如查找 <code>I&#39;m singing while you&#39;re dancing.</code>时，它会匹配 <code>sing</code> 和 <code>danc</code></li></ul></li><li><p><code>(?&lt;=exp)</code> 也叫零宽度正回顾后发断言，它断言自身出现的位置的前面能匹配表达式 <code>exp</code></p><ul><li>比如 <code>(?&lt;=\\bre)\\w+\\b</code> 会匹配以 <code>re</code> 开头的单词的后半部分(除了 re 以外的部分)，例如在查找 <code>reading a book</code> 时，它匹配 <code>ading</code></li></ul></li><li><p>一个更复杂的例子：<code>(?&lt;=&lt;(\\w+)&gt;).*(?=&lt;\\/\\1&gt;)</code> ：匹配不包含属性的简单 HTML 标签内里的内容</p><ul><li><code>(?&lt;=&lt;(\\w+)&gt;)</code>指定了这样的前缀：被尖括号括起来的单词</li><li><code>.*</code> 表示任意的字符串</li><li>最后是一个后缀<code>(?=&lt;\\/\\1&gt;)</code>。<code>\\/</code> 是&quot;/&quot;的转译。<code>\\1</code> 则是一个反向引用，引用的正是捕获的第一组，前面的<code>(\\w+)</code>匹配的内容，这样如果前缀实际上是<code>&lt;b&gt;</code>的话，后缀就是<code>&lt;/b&gt;</code>了</li><li>整个表达式匹配的像是是<code>&lt;b&gt;</code>和<code>&lt;/b&gt;</code>之间的内容(<strong>不包括前缀和后缀本身</strong>)</li></ul></li></ul><br><h2 id="贪婪与懒惰" tabindex="-1"><a class="header-anchor" href="#贪婪与懒惰" aria-hidden="true">#</a> 贪婪与懒惰</h2><ul><li><p>贪婪匹配：如 <code>a.*b</code>，它将会匹配最长的以 a 开始，以 b 结束的字符串。如果用它来搜索 <code>aabab</code> 的话，它会匹配整个字符串 <code>aabab</code></p></li><li><p>懒惰匹配：在表达式后加 <code>?</code> 表示尽可能少地匹配。如 <code>a.*?b</code>，则只会匹配 <code>aab</code></p></li></ul><br><h2 id="或" tabindex="-1"><a class="header-anchor" href="#或" aria-hidden="true">#</a> 或</h2><p><code>|</code> 表示或</p><ul><li><code>th(e|in|at)</code> 匹配 <code>this is the day</code> 中的 this 和 the</li><li>&quot;三目运算符&quot;：<code>(exp?yes|no)</code><ul><li><code>((A)?A\\d{2}\\b|\\b\\d{3}\\b)</code> 匹配 &quot;A10 C103 910&quot; 中的 &quot;A10&quot; 和 &quot;910&quot;</li></ul></li></ul>',27);function s(h,x){return o(),c("div",null,[i,t(' @import "[TOC]" {cmd="toc" depthFrom=1 depthTo=6 orderedList=false} '),t(" code_chunk_output "),r,t(" /code_chunk_output "),n])}const u=l(a,[["render",s],["__file","Regex.html.vue"]]);export{u as default};
