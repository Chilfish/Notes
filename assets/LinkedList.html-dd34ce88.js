import{_ as l,V as i,W as u,Z as n,a0 as s,X as a,$ as e,Y as r,a1 as t,D as o}from"./framework-94985248.js";const d="/assets/list_0-89b7feea.png",k="/assets/list_1-01916918.svg",v="/assets/list_2-97f9568b.png",m={},b=n("p",null,[n("br"),n("p",{style:{"font-size":"32px","font-weight":"bold"}},"目录")],-1),g=n("strong",null,"参考：",-1),h={href:"https://blog.csdn.net/weixin_44652781/article/details/101860069",target:"_blank",rel:"noopener noreferrer"},w=n("ul",null,[n("li",null,[n("a",{href:"#%E5%8D%95%E9%93%BE%E8%A1%A8"},"单链表")]),n("li",null,[n("a",{href:"#%E5%BE%AA%E7%8E%AF%E5%8D%95%E9%93%BE%E8%A1%A8"},"循环单链表")]),n("li",null,[n("a",{href:"#%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8"},"双向链表")]),n("li",null,[n("a",{href:"#%E5%BE%AA%E7%8E%AF%E5%8F%8C%E9%93%BE%E8%A1%A8"},"循环双链表")])],-1),x=t('<br><h2 id="单链表" tabindex="-1"><a class="header-anchor" href="#单链表" aria-hidden="true">#</a> 单链表</h2><p>由一系列结点（链表中每一个元素称为结点）组成，每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域</p><p>用数组存数据的特点就是数据的内存地址是连续的，就像是有序地排队；而链表的特点就在于数据的地址不一定是连续的，就好像是在医院等候一样，每个人只要记住自己下一个人是谁就好，只要那个人被叫到了那下一个就到自己了，而至于位置坐在哪里就不作要求了</p><p>这样的话，在数组的中间插入元素就得让后面的挪出位置给它，而链表只需要让后一个人重新记一下下个人的位置就好</p><div class="h5">结构：</div><div class="img" align="center"><img src="'+d+'"><p></p><br></div><ul><li><strong>头指针：</strong> 一个指向第一个节点地址的指针变量，而不存数据。头指针具有标识单链表的作用，所以经常用头指针代表单链表的名字</li><li><strong>头结点：</strong> 在单链表的第一个结点之前附设一个结点，它没有直接前驱，称之为头结点。可不存信息，也可以作为监视哨，或用于存放线性表的长度等附加信息指针域中存放首元结点的地址</li><li><strong>首元结点：</strong> 存储第一个元素的节点</li><li>其中，<strong>头结点的作用：</strong><ul><li>链表如果为空的情况下，如果单链表没有头结点，那么头指针就会指向 <code>null</code></li><li>如果加上头结点，无论单链表是否为空，头指针都会指向头结点，这样使得空链表与非空链表处理一致，使首元结点前插入或删除元素的时候，与后面操作相同，不需要额外的判断分支</li></ul></li></ul><div class="h5">主要属性方法：</div>',9),f={href:"https://github.com/Organic-Fish/FishCode/blob/master/CPP/DataStruct/List/List.hpp",target:"_blank",rel:"noopener noreferrer"},y=t('<div class="img" align="center"><img src="'+k+`"><p> 现假设单链表 s 中的数据为 {1, 2, 3, 4, 5}; </p></div><div class="h5">链表中的数据表示</div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">List</span> <span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
    T data<span class="token punctuation">;</span>
    Node <span class="token operator">*</span>next<span class="token punctuation">;</span>

    <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>value<span class="token punctuation">,</span> Node <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token operator">:</span>
      data<span class="token punctuation">{</span>value<span class="token punctuation">}</span><span class="token punctuation">,</span> next<span class="token punctuation">{</span>p<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">Node</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> p <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token operator">:</span>
      data<span class="token punctuation">{</span><span class="token function">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> next<span class="token punctuation">{</span>p<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  Node <span class="token operator">*</span>head<span class="token punctuation">;</span> <span class="token comment">// 头节点，链式地在 next 中存剩余的节点</span>
  Node <span class="token operator">*</span>tail<span class="token punctuation">;</span> <span class="token comment">// 尾节点</span>
  <span class="token keyword">int</span> curLength<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>单链表的构造与析构</strong>。创建一个带头结点的空链表，析构时还要逐层释放空间</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    head <span class="token operator">=</span> tail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    curLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token operator">~</span><span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">delete</span> head<span class="token punctuation">,</span> tail<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>清空单链表</strong>。就是要从头结点开始逐层将后面的节点释放掉，但对于头结点 <code>next</code> 的指向又不想改变，那就得引入一个临时指针来释放</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Node <span class="token operator">*</span>p <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">,</span>
    <span class="token operator">*</span>temp<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    temp <span class="token operator">=</span> p<span class="token punctuation">;</span>
    p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token keyword">delete</span> temp<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
  tail <span class="token operator">=</span> head<span class="token punctuation">;</span>
  curLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>尾插元素：</strong> 尾节点的下一个节点指向 <em>新元素节点</em>，再把尾节点指向新元素节点</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">push_back</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Node <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  tail<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>
  tail <span class="token operator">=</span> p<span class="token punctuation">;</span>
  <span class="token operator">++</span>curLength<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="h5">头插法：</div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">push_front</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 新节点的下一个节点就一直指向首元节点</span>
  Node <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 当链表为空的时候，尾指针就指向这个元素的节点</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> tail <span class="token operator">=</span> p<span class="token punctuation">;</span>
  <span class="token comment">// 再让数据节点当做首元结点</span>
  head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>
  <span class="token operator">++</span>curLength<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在增删节点之前，需要先找到 <strong>指定下标的节点</strong>：返回的是该节点的 <strong>前一个节点</strong> 到之后的所有节点</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Node<span class="token operator">*</span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">or</span> index <span class="token operator">&gt;</span> curLength<span class="token punctuation">)</span>
    <span class="token keyword">throw</span> outOfRange<span class="token punctuation">;</span>
  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> Node<span class="token operator">*</span> p <span class="token operator">=</span> head<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">and</span> i<span class="token operator">++</span> <span class="token operator">&lt;</span> index<span class="token punctuation">)</span>
    p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span> <span class="token comment">// 遍历寻找</span>
  <span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>s.getNode(3) 返回的是 data 为 3，next 指向 {4, 5} 的指针</p></blockquote><div class="h5">在指定下标前插入：</div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">const</span> T <span class="token operator">&amp;</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 先找到节点</span>
  Node <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">getNode</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// newNode 的首节点的 data 即 value，next 为 nullptr</span>
  Node <span class="token operator">*</span>newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
  newNode<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span> <span class="token comment">// 将新节点</span>
  <span class="token comment">// 其实这里影响到了 head，等价于是 head 在节点 p 的 next 都指向了新节点</span>
  p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
  <span class="token operator">++</span>curLength<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="img" align="center"><img src="`+v+'"><p> 在 <code>getNode</code> 中，返回的p节点的 <b>首指针</b> 的地址与 head节点的第三个节点的地址相同，所以才做到了只是修改 p 但也影响到了 head </p></div>',17),_=n("p",null,"噢所谓的 “链表能快速地增删元素，但在指定位置时却要遍历” 的矛盾，是在于",-1),N=n("li",null,[s("因为 "),n("strong",null,"查找链表只需要读，数组移动元素除了读还需要写"),s("。而对于很多介质来说，读比写快。甚至可能相差一个数量级。只是在远古时期的时候，写数据是一个开销很大的操作")],-1),L=n("li",null,[s("以及在实际的应用中，更多的需求是 "),n("strong",null,"删除|增加 某个节点 p"),s("，而不是 "),n("em",null,"在指定下标删除增加"),s("，而链表是记录了节点的数据了，只要删除增加那个 "),n("strong",null,"数据"),s(" 所在的节点就行")],-1),E={href:"https://www.zhihu.com/question/51545092",target:"_blank",rel:"noopener noreferrer"},T=n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(n)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])],-1),q=t(`<br><div class="h5">删除指定下标节点：</div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Node<span class="token operator">*</span> prev <span class="token operator">=</span> <span class="token function">getNode</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
  Node<span class="token operator">*</span> p <span class="token operator">=</span> prev<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
  <span class="token comment">// 目的是将目标节点的前一个节点的 next 指向下一个节点即可</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    tail <span class="token operator">=</span> prev<span class="token punctuation">;</span>
    prev<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token keyword">delete</span> p<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    prev<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token keyword">delete</span> p<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token operator">--</span>curLength<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>反转链表：</strong> 有点类似于先建一个链表的副本，再用头插法插到头结点中</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">inverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// p 作为是头结点的副本</span>
  Node <span class="token operator">*</span>p <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">,</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span>
  <span class="token comment">// 先清空链表的数据</span>
  head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> tail <span class="token operator">=</span> p<span class="token punctuation">;</span>

  <span class="token comment">// 模拟头插法了</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    tmp <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>
    p <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="h5">遍历输出：</div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
  cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Length: &quot;</span> <span class="token operator">&lt;&lt;</span> curLength <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\ndata: &quot;</span><span class="token punctuation">;</span>
  <span class="token comment">// 从头遍历到尾</span>
  Node <span class="token operator">*</span>p <span class="token operator">=</span> head<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> p<span class="token operator">-&gt;</span>data <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="循环单链表" tabindex="-1"><a class="header-anchor" href="#循环单链表" aria-hidden="true">#</a> 循环单链表</h2>`,9),A={href:"https://github.com/Organic-Fish/FishCode/blob/master/CPP/DataStruct/List/LoopList.hpp",target:"_blank",rel:"noopener noreferrer"},C=t(`<div class="h5">私有成员：</div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">LoopList</span> <span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
    T data<span class="token punctuation">;</span>
    Node <span class="token operator">*</span>next<span class="token punctuation">;</span>

    <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>value<span class="token punctuation">,</span> Node <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token operator">:</span>
      data<span class="token punctuation">{</span>value<span class="token punctuation">}</span><span class="token punctuation">,</span> next<span class="token punctuation">{</span>p<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">Node</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token operator">:</span>
      data<span class="token punctuation">{</span><span class="token function">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> next<span class="token punctuation">{</span>p<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  Node <span class="token operator">*</span>head<span class="token punctuation">;</span> <span class="token comment">// 头节点</span>
  Node <span class="token operator">*</span>tail<span class="token punctuation">;</span> <span class="token comment">// 尾节点</span>
  <span class="token keyword">int</span> curLength<span class="token punctuation">;</span>

  <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    head <span class="token operator">=</span> tail <span class="token operator">=</span> <span class="token keyword">new</span> Node<span class="token punctuation">;</span>
    head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> tail<span class="token punctuation">;</span>
    tail<span class="token operator">-&gt;</span>next <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    curLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="h5">头插元素：</div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">push_front</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// p 是首元结点的前一个节点，来头插</span>
  Node <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 空链表时得先初始化尾节点</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token operator">-&gt;</span>next <span class="token operator">==</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    tail <span class="token operator">=</span> p<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 将尾节点的下一个指向首元结点，来实现循环</span>
  tail<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>
  <span class="token comment">// 头插地拼回来</span>
  head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>
  <span class="token operator">++</span>curLength<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="h5">尾插元素：</div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">push_back</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 与单链表 尾节点-&gt;next为空指针 不同的是，</span>
  <span class="token comment">// 循环链表的 尾节点-&gt;next指向了首元结点，来实现循环</span>
  Node <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 尾插地拼在一起</span>
  tail<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span> tail <span class="token operator">=</span> p<span class="token punctuation">;</span>
  <span class="token operator">++</span>curLength<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>删除首元结点：</strong> ）尾节点的话还得遍历到最后……</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Node <span class="token operator">*</span>p <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
  <span class="token comment">// 让首元结点指向它的下一个节点</span>
  <span class="token comment">// 同时也要让尾节点指向新的首元结点</span>
  tail<span class="token operator">-&gt;</span>next <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
  <span class="token comment">// 最后要释放掉原先的首元结点的内存</span>
  <span class="token keyword">delete</span> p<span class="token punctuation">;</span> p <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
  <span class="token operator">--</span>curLength<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="双向链表" tabindex="-1"><a class="header-anchor" href="#双向链表" aria-hidden="true">#</a> 双向链表</h2>`,10),B=n("strong",null,"前驱节点",-1),F={href:"https://github.com/Organic-Fish/FishCode/blob/master/CPP/DataStruct/List/DoubleList.hpp",target:"_blank",rel:"noopener noreferrer"},D=t(`<div class="h5">所以就得要有前驱指针：</div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">DoubleList</span> <span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
    T data<span class="token punctuation">;</span>
    Node <span class="token operator">*</span>next<span class="token punctuation">;</span>
    Node <span class="token operator">*</span>prev<span class="token punctuation">;</span>

    <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>value <span class="token operator">=</span> T<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Node <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> Node <span class="token operator">*</span>n <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token operator">:</span>
      data<span class="token punctuation">{</span>value<span class="token punctuation">}</span><span class="token punctuation">,</span> prev<span class="token punctuation">{</span>p<span class="token punctuation">}</span><span class="token punctuation">,</span> next<span class="token punctuation">{</span>n<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  Node <span class="token operator">*</span>head<span class="token punctuation">;</span> <span class="token comment">// 头节点</span>
  Node <span class="token operator">*</span>tail<span class="token punctuation">;</span> <span class="token comment">// 尾节点</span>
  <span class="token keyword">int</span> curLength<span class="token punctuation">;</span>

  <span class="token comment">// 构造函数的初始化</span>
  <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    tail <span class="token operator">=</span> <span class="token keyword">new</span> Node<span class="token punctuation">;</span>
    head <span class="token operator">=</span> <span class="token keyword">new</span> Node<span class="token punctuation">;</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">assert</span><span class="token punctuation">(</span>tail<span class="token punctuation">)</span><span class="token punctuation">;</span>

    tail<span class="token operator">-&gt;</span>prev <span class="token operator">=</span> head<span class="token punctuation">;</span>
    head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> tail<span class="token punctuation">;</span>
    curLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="h5">插入节点</div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">/**
* @brief 在指定迭代器前插入元素
* @param position 链表的迭代器
* @param x 要插入的元素
* @returns 指向被插入元素的迭代器
*/</span>
iterator <span class="token function">insert</span><span class="token punctuation">(</span>const_iterator position<span class="token punctuation">,</span> <span class="token keyword">const</span> T <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  position<span class="token punctuation">.</span><span class="token function">assertValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>position<span class="token punctuation">.</span>thisList <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token function">IteratorError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  Node <span class="token operator">*</span>p <span class="token operator">=</span> position<span class="token punctuation">.</span>cur<span class="token punctuation">,</span>
    <span class="token operator">*</span>newNode <span class="token operator">=</span> <span class="token keyword">new</span> Node<span class="token punctuation">{</span>x<span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>prev<span class="token punctuation">,</span> p<span class="token punctuation">}</span><span class="token punctuation">;</span>

  p<span class="token operator">-&gt;</span>prev <span class="token operator">=</span> p<span class="token operator">-&gt;</span>prev<span class="token operator">-&gt;</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
  <span class="token operator">++</span>curLength<span class="token punctuation">;</span>
  <span class="token keyword">return</span> iterator<span class="token punctuation">{</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> newNode<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
* @brief 在指定位置前插入元素
* @param index 要插入的位置
* @param x 要插入的元素
* @returns 指向被插入元素的迭代器
*/</span>
iterator <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">const</span> T <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">&gt;=</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">throw</span> <span class="token function">outOfRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 折半遍历</span>
  const_iterator it <span class="token operator">=</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;=</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token operator">?</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> index
    <span class="token operator">:</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">insert</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 尾插法</span>
<span class="token keyword">void</span> <span class="token function">push_back</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token comment">// 头插法</span>
<span class="token keyword">void</span> <span class="token function">push_front</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="h5">删除节点：</div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">/**
* @brief 删除指定位置迭代器的元素
* @param position 指向被删元素的迭代器
* @returns 指向被删元素的下一个节点的迭代器
*/</span>
iterator <span class="token function">erase</span><span class="token punctuation">(</span>const_iterator position<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  position<span class="token punctuation">.</span><span class="token function">assertValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>position<span class="token punctuation">.</span>thisList <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token function">IteratorError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  Node <span class="token operator">*</span>p <span class="token operator">=</span> position<span class="token punctuation">.</span>cur<span class="token punctuation">;</span>
  iterator nextE<span class="token punctuation">{</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">}</span><span class="token punctuation">;</span>

  p<span class="token operator">-&gt;</span>prev<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
  p<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>prev <span class="token operator">=</span> p<span class="token operator">-&gt;</span>prev<span class="token punctuation">;</span>
  <span class="token keyword">delete</span> p<span class="token punctuation">;</span> p <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
  <span class="token operator">--</span>curLength<span class="token punctuation">;</span>
  <span class="token keyword">return</span> nextE<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
* @brief 删除范围内的元素，左闭右开
* @param front 开始的迭代器
* @param to 结束的迭代器
* @returns 指向 to 的迭代器
*/</span>
iterator <span class="token function">erase</span><span class="token punctuation">(</span>const_iterator from<span class="token punctuation">,</span> const_iterator to<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>from <span class="token operator">!=</span> to<span class="token punctuation">)</span> <span class="token function">erase</span><span class="token punctuation">(</span>from<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> iterator<span class="token punctuation">{</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> to<span class="token punctuation">.</span>cur<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 尾删除</span>
<span class="token keyword">void</span> <span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">erase</span><span class="token punctuation">(</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token comment">// 首删除</span>
<span class="token keyword">void</span> <span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">erase</span><span class="token punctuation">(</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>清空链表：</strong> 其实就是从头开始删除</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 清空链表</span>
<span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="h5">遍历输出：</div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 正序输出链表</span>
<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
  cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;length: &quot;</span> <span class="token operator">&lt;&lt;</span> curLength <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\ndata: &quot;</span><span class="token punctuation">;</span>
  Node <span class="token operator">*</span>p <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> p<span class="token operator">-&gt;</span>data <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
    p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 逆序输出</span>
<span class="token keyword">void</span> <span class="token function">reprint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
  cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;length: &quot;</span> <span class="token operator">&lt;&lt;</span> curLength <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\ndata: &quot;</span><span class="token punctuation">;</span>
  Node <span class="token operator">*</span>p <span class="token operator">=</span> tail<span class="token operator">-&gt;</span>prev<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> p<span class="token operator">-&gt;</span>data <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
    p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>prev<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="循环双链表" tabindex="-1"><a class="header-anchor" href="#循环双链表" aria-hidden="true">#</a> 循环双链表</h2>`,12);function O(V,P){const p=o("ExternalLinkIcon"),c=o("RouterLink");return i(),u("div",null,[b,n("ul",null,[n("li",null,[g,n("ul",null,[n("li",null,[n("a",h,[s("二境志：C++ 单链表"),a(p)])])])])]),e(' @import "[TOC]" {cmd="toc" depthFrom=2 depthTo=5 orderedList=false} '),e(" code_chunk_output "),w,e(" /code_chunk_output "),x,n("blockquote",null,[n("p",null,[s("详见： "),n("a",f,[s("List.hpp"),a(p)])])]),y,n("blockquote",null,[_,n("ul",null,[N,L,n("li",null,[s("Ref: "),n("a",E,[s("知乎：链表和数组的插入删除时间复杂度都是 "),T,s("，为什么教材网络上说链表效率高？"),a(p)])])])]),q,n("p",null,[s("循环单链表的特点就是尾指针指向了首元结点而形成一个环。详见： "),n("a",A,[s("LoopList.hpp"),a(p)])]),C,n("p",null,[s("双向链表就多了一个 "),B,s(" 的指针。详见： "),n("a",F,[s("DoubleList.hpp"),a(p)]),s("。这次就用了 "),a(c,{to:"/Algorithm/DS/#%E8%BF%AD%E4%BB%A3%E5%99%A8"},{default:r(()=>[s("迭代器")]),_:1}),s(" 来写了")]),D])}const S=l(m,[["render",O],["__file","LinkedList.html.vue"]]);export{S as default};
