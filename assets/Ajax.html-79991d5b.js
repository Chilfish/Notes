import{_ as c,V as p,W as l,Z as n,a0 as s,X as e,$ as t,a1 as o,D as i}from"./framework-94985248.js";const d="/assets/Ajax_onreadystate-316dc59a.png",r="/assets/Ajax_onxxx-f60d1116.png",u={},k=n("p",null,[n("br"),n("p",{style:{"font-size":"32px","font-weight":"bold"}},"目录")],-1),h=n("strong",null,"参考：",-1),v={href:"https://juejin.cn/post/6844903469896171533",target:"_blank",rel:"noopener noreferrer"},m={href:"https://segmentfault.com/a/1190000004322487",target:"_blank",rel:"noopener noreferrer"},b={href:"https://segmentfault.com/a/1190000013286987",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.axios-http.cn/docs/intro",target:"_blank",rel:"noopener noreferrer"},x={href:"https://www.ruanyifeng.com/blog/2020/12/fetch-tutorial.html",target:"_blank",rel:"noopener noreferrer"},f=o('<ul><li><a href="#%E5%8E%9F%E7%90%86">原理</a></li><li><a href="#%E5%9F%BA%E7%A1%80-xmlhttprequest">基础 XMLHttpRequest</a><ul><li><a href="#%E5%88%9B%E5%BB%BA">创建</a></li><li><a href="#%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82">发送请求</a></li><li><a href="#%E8%8E%B7%E5%8F%96-response-%E6%95%B0%E6%8D%AE">获取 response 数据</a></li><li><a href="#%E5%8F%91%E9%80%81%E8%BF%87%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81">发送过程的状态</a></li><li><a href="#%E8%AE%BE%E7%BD%AE%E8%AF%B7%E6%B1%82%E7%9A%84%E8%B6%85%E6%97%B6%E6%97%B6%E9%97%B4">设置请求的超时时间</a></li><li><a href="#%E4%BA%8B%E4%BB%B6">事件</a><ul><li><a href="#%E4%BA%8B%E4%BB%B6%E8%A7%A6%E5%8F%91%E6%9D%A1%E4%BB%B6">事件触发条件</a></li><li><a href="#%E4%BA%8B%E4%BB%B6%E8%A7%A6%E5%8F%91%E9%A1%BA%E5%BA%8F">事件触发顺序</a></li><li><a href="#%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86">异常处理</a></li><li><a href="#%E5%9C%A8%E5%93%AA%E4%B8%AA-xhr-%E4%BA%8B%E4%BB%B6%E4%B8%AD%E6%B3%A8%E5%86%8C%E6%88%90%E5%8A%9F%E5%9B%9E%E8%B0%83">在哪个 xhr 事件中注册成功回调？</a></li></ul></li></ul></li><li><a href="#axios-%E6%A8%A1%E5%9D%97">Axios 模块</a><ul><li><a href="#%E8%AF%B7%E6%B1%82">请求</a></li><li><a href="#%E5%93%8D%E5%BA%94">响应</a></li><li><a href="#%E6%8B%A6%E6%88%AA%E5%99%A8">拦截器</a></li></ul></li><li><a href="#fetch-%E8%AF%B7%E6%B1%82">fetch 请求</a><ul><li><a href="#%E8%AF%B7%E6%B1%82%E9%85%8D%E7%BD%AE">请求配置</a></li><li><a href="#response-%E5%93%8D%E5%BA%94">Response 响应</a><ul><li><a href="#%E5%B1%9E%E6%80%A7">属性</a></li><li><a href="#%E6%96%B9%E6%B3%95">方法</a></li></ul></li></ul></li></ul>',1),y=o(`<h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h2><p>客户端与服务器可以在「不必刷新整个浏览器」的情况下，与服务器进行异步通讯。而传统的 web 前端与后端的交互中，浏览器直接访问 <code>Tomcat</code> 的 <code>Servlet</code> 来获取数据。<code>Servlet</code> 通过转发把数据发送给浏览器</p><p>当使用 <code>AJAX</code> 之后，浏览器是先把请求发送到 <code>XMLHttpRequest</code> 异步对象之中，异步对象对请求进行封装，然后再与发送给服务器。服务器并不是以转发的方式响应，而是以<strong>流</strong>的方式把数据返回给浏览器</p><p><code>XMLHttpRequest</code> 异步对象会不停监听服务器状态的变化，得到服务器返回的数据，就写到浏览器上。【因为不是转发的方式，所以是无刷新就能够获取服务器端的数据】</p><h2 id="基础-xmlhttprequest" tabindex="-1"><a class="header-anchor" href="#基础-xmlhttprequest" aria-hidden="true">#</a> 基础 XMLHttpRequest</h2><p>Ajax 可以实现网页局部地更新数据. 而起步是 JavaScript 的 <code>XMLHttpRequest</code></p><h3 id="创建" tabindex="-1"><a class="header-anchor" href="#创建" aria-hidden="true">#</a> 创建</h3><ul><li>现代浏览器可直接 new 出来，要兼容则：<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getXHR</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>ActiveXObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">&#39;Msxml2.XMLHTTP&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">&#39;Microsoft.XMLHTTP&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;您的浏览器暂不支持Ajax!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> xhr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="发送请求" tabindex="-1"><a class="header-anchor" href="#发送请求" aria-hidden="true">#</a> 发送请求</h3><ul><li><strong><code>xmlhttp.open(method, url, async)</code> ：</strong> 规定请求的类型、URL 以及是否异步处理请求 <ul><li><code>method</code>：请求的类型；GET 或 POST</li><li><code>url</code>：文件在服务器上的位置</li><li><code>async</code>：默认 true（异步）或 false（同步）</li></ul></li><li><strong><code>xmlhttp.send(string)</code>：</strong> 将请求发送到服务器 <ul><li><code>string</code>：仅用于 POST 请求</li></ul></li></ul><h3 id="获取-response-数据" tabindex="-1"><a class="header-anchor" href="#获取-response-数据" aria-hidden="true">#</a> 获取 response 数据</h3><p>xhr 提供了 3 个属性来获取请求返回的数据，分别是：<code>xhr.response</code>、<code>xhr.responseText</code>、<code>xhr.responseXML</code></p><ul><li><strong><code>xhr.response</code>：</strong><ul><li><strong>默认值</strong>：空字符串 <code>&quot;&quot;</code></li><li>当请求<strong>完成</strong>时，此属性才有正确的值</li><li>请求<strong>未完成</strong>时，此属性的值可能是 <code>&quot;&quot;</code> 或者 null，具体与 <code>xhr.responseType</code>有关：当 responseType 为 <code>&quot;&quot;</code> 或&quot;text&quot;时，值为 <code>&quot;&quot;</code> ；responseType 为其他值时，值为 null</li></ul></li><li><strong><code>xhr.responseText</code>：</strong><ul><li><strong>默认值</strong>：空字符串 <code>&quot;&quot;</code></li><li>只有当 <code>responseType</code> 为&quot;text&quot;、 <code>&quot;&quot;</code> 时，xhr 对象上才有此属性，此时才能调用<code>xhr.responseText</code>，否则抛错</li><li>只有当请求成功时，才能拿到正确值。以下 2 种情况下值都为空字符串 <code>&quot;&quot;</code> ：请求未完成、请求失败</li></ul></li><li><strong><code>xhr.responseXML</code>：</strong><ul><li><strong>默认值</strong>： null</li><li>只有当 <code>responseType</code> 为&quot;text&quot;、&quot;&quot;、&quot;document&quot;时，xhr 对象上才有此属性，此时才能调用<code>xhr.responseXML</code>，否则抛错</li><li>只有当请求成功且返回数据被正确解析时，才能拿到正确值。以下 3 种情况下值都为 null：请求未完成、请求失败、请求成功但返回数据无法被正确解析时</li></ul></li></ul><h3 id="发送过程的状态" tabindex="-1"><a class="header-anchor" href="#发送过程的状态" aria-hidden="true">#</a> 发送过程的状态</h3><div class="img" align="center"><img src="`+d+'"><p> 发送过程的状态 </p></div><h3 id="设置请求的超时时间" tabindex="-1"><a class="header-anchor" href="#设置请求的超时时间" aria-hidden="true">#</a> 设置请求的超时时间</h3><p>如果请求过了很久还没有成功，为了不会白白占用的网络资源，我们一般会主动终止请求。XMLHttpRequest 提供了 timeout 属性来允许设置请求的超时时间</p><ul><li><code>xhr.timeout</code><ul><li>单位： <code>milliseconds</code> 毫秒</li><li>默认值： <code>0</code>，即不设置超时</li></ul></li></ul><p>从 <strong>请求开始</strong> 算起，若超过 <code>timeout</code> 时间请求还没有结束（包括成功/失败），则会触发<code>ontimeout</code>事件，主动结束该请求</p><ul><li><strong>请求开始:</strong><ul><li>xhr.onloadstart 事件触发的时候，也就是调用 xhr.send()方法的时候 <blockquote><p>因为 xhr.open()只是创建了一个连接，但并没有真正开始数据的传输，而 xhr.send()才是真正开始了数据的传输过程。只有调用了 xhr.send()，才会触发 xhr.onloadstart</p></blockquote></li></ul></li><li><strong>请求结束：</strong><ul><li>xhr.loadend 事件触发的时候</li></ul></li></ul><blockquote><p><strong>另外：</strong> 可以在 send()之后再设置此 xhr.timeout，但计时起始点仍为调用 xhr.send()方法的时刻</p></blockquote><h3 id="事件" tabindex="-1"><a class="header-anchor" href="#事件" aria-hidden="true">#</a> 事件</h3><h4 id="事件触发条件" tabindex="-1"><a class="header-anchor" href="#事件触发条件" aria-hidden="true">#</a> 事件触发条件</h4><div class="img" align="center"><img src="'+r+`"><p> 事件触发条件 </p></div><h4 id="事件触发顺序" tabindex="-1"><a class="header-anchor" href="#事件触发顺序" aria-hidden="true">#</a> 事件触发顺序</h4><ul><li>当请求一切正常时，相关的事件触发顺序如下： <ol><li>触发 <code>xhr.onreadystatechange</code>(之后每次 readyState 变化时，都会触发一次)</li><li>触发 <code>xhr.onloadstart</code> //上传阶段开始：</li><li>触发 <code>xhr.upload.onloadstart</code></li><li>触发<code> xhr.upload.onprogress</code></li><li>触发 <code>xhr.upload.onload</code></li><li>触发 <code>xhr.upload.onloadend</code> //上传结束，下载阶段开始：</li><li>触发 <code>xhr.onprogress</code></li><li>触发 <code>xhr.onload</code></li><li>触发 <code>xhr.onloadend</code></li></ol></li></ul><h4 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理" aria-hidden="true">#</a> 异常处理</h4><p>在请求的过程中，有可能发生 abort | timeout | error 这 3 种异常。那么一旦发生这些异常，xhr 后续会进行哪些处理呢？后续处理如下：</p><ol><li>一旦发生 <code>abort</code> 或 <code>timeout</code> 或 <code>error</code> 异常，先立即中止当前请求</li><li>将 <code>readystate</code> 置为 4，并触发 <code>xhr.onreadystatechange</code> 事件</li><li>如果上传阶段还没有结束，则依次触发以下事件： <ol><li><code>xhr.upload.onprogress</code></li><li><code> xhr.upload.[onabort 或 ontimeout 或 onerror]</code></li><li><code>xhr.upload.onloadend</code></li></ol></li><li>触发<code> xhr.onprogress</code> 事件</li><li>触发 <code>xhr.[onabort 或 ontimeout 或 onerror]</code> 事件</li><li>触发 <code>xhr.onloadend</code> 事件</li></ol><h4 id="在哪个-xhr-事件中注册成功回调" tabindex="-1"><a class="header-anchor" href="#在哪个-xhr-事件中注册成功回调" aria-hidden="true">#</a> 在哪个 xhr 事件中注册成功回调？</h4><ul><li>从上面介绍的事件中，可以知道若 xhr 请求成功，就会触发 <code>xhr.onreadystatechange</code> 和<code> xhr.onload</code> 两个事件。且 <code>xhr.onreadystatechange</code> 是每次 <code>xhr.readyState</code> 变化时都会触发，而不是<code> xhr.readyState = 4</code> 时才触发<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//如果请求成功</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//do successCallback</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>上面的示例代码是很常见的写法：先判断 http 状态码是否是 200，如果是，则认为请求是成功的，接着执行成功回调</li><li>这样的判断是有坑儿的，比如当返回的 http 状态码不是 200，而是 201 时，请求虽然也是成功的，但并没有执行成功回调逻辑。所以更靠谱的判断方法应该是：当 http 状态码为 <strong>2xx</strong> 或 <strong>304</strong> 时才认为成功<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//如果请求成功</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//do successCallback</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="axios-模块" tabindex="-1"><a class="header-anchor" href="#axios-模块" aria-hidden="true">#</a> Axios 模块</h2><div class="h5">栗子：</div><ul><li><strong>创建：</strong><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> ajax <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">baseURL</span><span class="token operator">:</span> <span class="token string">&#39;xx/api&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">2333</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ajax
  <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;user/&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> config <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//xxx</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>微博热搜：</strong><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">&#39;https://weibo.com/ajax/side/hotSearch&#39;</span><span class="token punctuation">;</span>
axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>realtime<span class="token punctuation">,</span>
    ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    ans<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="请求" tabindex="-1"><a class="header-anchor" href="#请求" aria-hidden="true">#</a> 请求</h3><ul><li><code>baseURL: &quot;https://domain.com/api/&quot;</code>： <code>baseURL</code> 将自动加在 <code>url</code> 前面，表示请求的主 URL</li><li><code>url: &quot;/user&quot;</code>： <code>url</code> 是用于请求的服务器 URL | 相对 URL</li><li><code>method: &quot;get&quot;</code>： 默认为 get</li><li><code>transformRequest</code> 允许在向服务器发送前，修改请求数据 它只能用于 <code>PUT</code>, <code>POST</code> 和 <code>PATCH</code> 这几个请求方法 数组中最后一个函数必须返回一个字符串， 一个 <code>Buffer</code> 实例，<code>ArrayBuffer</code>，<code>FormData</code>，或 <code>Stream</code><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">transformRequest</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 对发送的 data 进行任意转换处理</span>
  <span class="token keyword">return</span> data<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><code>transformResponse</code>： 在传递给 then/catch 前，允许修改响应数据<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">transformResponse</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 对接收的 data 进行任意转换处理</span>
  <span class="token keyword">return</span> data<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><code>headers: { &quot;X-Requested-With&quot;: &quot;XMLHttpRequest&quot; }</code>： 自定义请求头</li><li><code>params</code> 是与请求一起发送的 <code>URL</code> 参数，必须是一个简单对象或 <code>URLSearchParams</code> 对象<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token constant">ID</span><span class="token operator">:</span> <span class="token number">12345</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;fish&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><code>data</code>：作为请求体被发送的数据。仅适用 &#39;PUT&#39;， &#39;POST&#39;， &#39;DELETE 和 &#39;PATCH&#39; 请求方法，在没有设置 <code>transformRequest</code> 时，则必须是以下类型之一: <ul><li><code>string</code>， <code>plain object</code>， <code>ArrayBuffer</code>， <code>ArrayBufferView</code>， <code>URLSearchParams</code></li><li>浏览器专属: <code>FormData</code>， <code>File</code>， <code>Blob</code></li><li><code>Node</code> 专属: <code>Stream</code>， <code>Buffer</code></li></ul></li><li><code>timeout</code>： 指定请求超时的毫秒数。如果请求时间超过 <code>timeout</code> 的值，则请求会被中断。默认值是 <code>0</code> (永不超时)</li><li><code>withCredentials</code>：表示跨域请求时是否需要使用凭证，默认为 <code>false</code></li><li><code>responseType</code>：表示浏览器将要响应的数据类型。选项包括： <code>arraybuffer</code>， <code>document</code>， <code>json</code>， <code>text</code>， <code>stream</code> | 浏览器专属：<code>blob</code></li><li><code>responseEncoding</code> 表示用于解码响应的编码 (Node.js 专属) 注意：忽略 <code>responseType</code> 的值为 <code>stream</code>，或者是客户端请求。默认为 <code>utf-8</code></li><li><code>onUploadProgress(progress)</code> 允许为上传处理进度事件</li><li><code>onDownloadProgress(progress)</code> 允许为下载处理进度事件</li><li><code>proxy</code> 定义了代理服务器的主机名，端口和协议 您可以使用常规的<code>http_proxy</code> 和 <code>https_proxy</code> 环境变量 <ul><li>使用 <code>false</code> 可以禁用代理功能，同时环境变量也会被忽略 <code>auth</code>表示应使用 HTTP Basic auth 连接到代理，并且提供凭据</li><li>这将设置一个 <code>Proxy-Authorization</code> 请求头，它会覆盖 <code>headers</code> 中已存在的自定义 <code>Proxy-Authorization</code> 请求头 如果代理服务器使用 HTTPS，则必须设置 protocol 为<code>https</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">protocol</span><span class="token operator">:</span> <span class="token string">&quot;https&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">9000</span><span class="token punctuation">,</span>
  <span class="token literal-property property">auth</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&quot;fish&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&quot;mie&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="响应" tabindex="-1"><a class="header-anchor" href="#响应" aria-hidden="true">#</a> 响应</h3><p>请求成功后使用 <code>.then(res =&gt; {})</code> 得到的响应体如下</p><ul><li><code>data</code> ：由服务器提供的响应</li><li><code>status</code> ：来自服务器响应的 <code>HTTP</code> 状态码</li><li><code>statusText</code> ：来自服务器响应的 <code>HTTP</code> 状态信息</li><li><code>headers</code> ：服务器响应头。所有的 <code>header</code> 名称都是小写，而且可以使用方括号语法访问。例如: <code>response.headers[&#39;content-type&#39;]</code></li><li><code>config</code> ： <code>axios</code> 请求的配置信息</li><li><code>request</code> ：生成此响应的请求 <ul><li>在 <code>node.js</code> 中它是最后一个 <code>ClientRequest</code> 实例 <code>(in redirects)</code>，</li><li>在浏览器中则是 <code>XMLHttpRequest</code> 实例 <code>request: {}</code></li></ul></li></ul><h3 id="拦截器" tabindex="-1"><a class="header-anchor" href="#拦截器" aria-hidden="true">#</a> 拦截器</h3><ul><li>拦截器分两种：请求拦截器、响应拦截器 <ul><li>请求拦截器：在请求发送前进行必要操作处理，例如添加统一 cookie、请求体加验证、设置请求头等，相当于是对每个接口里相同操作的一个封装；</li><li>响应拦截器：同理，响应拦截器也是如此功能，只是在请求得到响应之后，对响应体的一些处理，通常是数据统一处理等，也常来判断登录失效等</li></ul></li><li>应用场景： <ul><li>每个请求都带上的参数，比如 token，时间戳等</li><li>对返回的状态进行判断，比如 token 是否过期</li></ul></li><li><strong>请求拦截：</strong><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> ajax <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> xxx <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ajax<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token parameter">req</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在发送请求前要做的事儿</span>
    <span class="token keyword">return</span> req<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在请求错误时要做的事儿</span>
    <span class="token comment">// 该返回的数据则是axios.catch(err)中接收的数据</span>
    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="fetch-请求" tabindex="-1"><a class="header-anchor" href="#fetch-请求" aria-hidden="true">#</a> fetch 请求</h2><p><code>fetch()</code> 的功能与 <code>XMLHttpRequest</code> 基本相同，但有三个主要的差异：</p><ul><li><code>fetch()</code> 使用 <code>Promise</code>，不使用回调函数，因此大大简化了写法，写起来更简洁</li><li><code>fetch()</code> 采用模块化设计，<code>API</code> 分散在多个对象上（<code>Response</code> 对象、<code>Request</code> 对象、<code>Headers</code> 对象），更合理一些</li><li><code>fetch()</code> 通过数据流（<code>Stream</code> 对象）处理数据，可以分块读取，有利于提高网站性能表现，减少内存占用，对于请求大文件或者网速慢的场景相当有用。<code>XMLHttpRequest</code> 对象不支持数据流，所有的数据必须放在缓存里，不支持分块读取，必须等待全部拿到后，再一次性吐出来</li></ul><p>在用法上，<code>fetch()</code> 接受一个 <code>URL</code> 字符串作为参数，默认向该网址发出 <code>GET</code> 请求，返回一个 <code>Promise</code> 对象：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 也可以是用 async 的写法</span>
<span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> ans <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="请求配置" tabindex="-1"><a class="header-anchor" href="#请求配置" aria-hidden="true">#</a> 请求配置</h3><p><code>fetch</code> 方法可以接收两个参数 <code>input</code> 和 <code>options</code>：</p><ul><li><code>input</code> 参数可以是字符串，包含要获取资源的 URL。也可以是一个 <code>Request</code> 对象</li><li><code>options</code> 是一个可选参数。一个配置项对象，包括所有对请求的设置。可选的参数有： <ul><li><code>method</code>： 请求使用的方法，如 <code>GET</code>、<code>POST</code></li><li><code>headers</code>： 请求的头信息，包含与请求关联的 <code>Headers</code> 对象</li><li><code>body</code>： 请求的 <code>body</code> 信息。注意 <code>GET</code> 或 <code>HEAD</code> 方法的请求不能包含 <code>body</code> 信息</li><li><code>mode</code>： 属性指定请求的模式。可能的取值如下： <ul><li><code>cors</code>：默认值，允许跨域请求</li><li><code>same-origin</code>：只允许同源请求</li><li><code>no-cors</code>：请求方法只限于 <code>GET</code>、<code>POST</code> 和 <code>HEAD</code>，并且只能使用有限的几个<strong>简单标头</strong>，不能添加跨域的复杂标头，相当于提交表单所能发出的请求</li></ul></li><li><code>cache</code>：属性指定如何处理缓存。可能的取值如下： <ul><li><code>default</code>：默认值，先在缓存里面寻找匹配的请求</li><li><code>no-store</code>：直接请求远程服务器，并且不更新缓存</li><li><code>reload</code>：直接请求远程服务器，并且更新缓存</li><li><code>no-cache</code>：将服务器资源跟本地缓存进行比较，有新的版本才使用服务器资源，否则使用缓存</li><li><code>force-cache</code>：缓存优先，只有不存在缓存的情况下，才请求远程服务器</li><li><code>only-if-cached</code>：只检查缓存，如果缓存里面不存在，将返回 504 错误</li></ul></li><li><code>credentials</code>： 属性指定是否发送 <code>Cookie</code>。可能的取值如下： <ul><li><code>same-origin</code>：默认值，同源请求时发送 <code>Cookie</code>，跨域请求时不发送</li><li><code>include</code>：不管同源请求，还是跨域请求，一律发送 <code>Cookie</code></li><li><code>omit</code>：一律不发送</li></ul></li></ul></li></ul><h3 id="response-响应" tabindex="-1"><a class="header-anchor" href="#response-响应" aria-hidden="true">#</a> Response 响应</h3>`,50),E=n("code",null,"fetch()",-1),q={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Response",target:"_blank",rel:"noopener noreferrer"},B=n("h4",{id:"属性",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#属性","aria-hidden":"true"},"#"),s(" 属性")],-1),A=o("<li><code>Response.ok</code>：属性返回一个布尔值，表示请求是否成功。<code>true</code> 对应 <code>HTTP</code> 请求的状态码 200 到 299，<code>false</code> 对应其他的状态码</li><li><code>Response.status</code>：属性返回一个数字，表示 <code>HTTP</code> 回应的状态码（例如 200，表示成功请求）。只能通过 <strong>状态码 或是 <code>res.ok</code> 来判断请求是否成功</strong>，因为只有网络问题 <code>fetch</code> 才会报错</li><li><code>Response.statusText</code>： 属性返回一个字符串，表示 <code>HTTP</code> 回应的状态信息（例如请求成功以后，服务器返回&quot;OK&quot;）</li><li><code>Response.url</code>： 属性返回请求的 URL。如果 URL 存在跳转，该属性返回的是最终 URL</li><li><code>Response.type</code>： 属性返回请求的类型。可能的值如下： <ul><li><code>basic</code>：普通请求，即同源请求</li><li><code>cors</code>：跨域请求</li><li><code>error</code>：网络错误，主要用于 <code>Service Worker</code></li><li><code>opaque</code>：如果 <code>fetch()</code> 请求的 <code>type</code> 属性设为 <code>no-cors</code>，就会返回这个值，详见请求部分。表示发出的是简单的跨域请求，类似<code>&lt;form&gt;</code>表单的那种跨域请求</li><li><code>opaqueredirect</code>：如果 <code>fetch()</code> 请求的 <code>redirect</code> 属性设为 <code>manual</code>，就会返回这个值，详见请求部分</li></ul></li><li><code>Response.redirected</code>： 属性返回一个布尔值，表示请求是否发生过跳转</li>",6),_=n("code",null,"Response.headers",-1),j={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Headers",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"HTTP回应",-1),T=o("<ul><li><code>Headers.get()</code>：根据指定的键名，返回键值</li><li><code>Headers.has()</code>： 返回一个布尔值，表示是否包含某个标头</li><li><code>Headers.set()</code>：将指定的键名设置为新的键值，如果该键名不存在则会添加</li><li><code>Headers.append()</code>：添加标头</li><li><code>Headers.delete()</code>：删除标头</li><li><code>Headers.keys()</code>：返回一个遍历器，可以依次遍历所有键名</li><li><code>Headers.values()</code>：返回一个遍历器，可以依次遍历所有键值</li><li><code>Headers.entries()</code>：返回一个遍历器，可以依次遍历所有键值对（<code>[key, value]</code>）</li><li><code>Headers.forEach()</code>：依次遍历标头，每个标头都会执行一次参数函数</li></ul>",1),R=o('<h4 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h4><p><code>Response</code> 对象根据服务器返回的不同类型的数据，提供了不同的读取方法。且这些读取方法都是 <strong>异步</strong> 的，返回的都是 <code>Promise</code> 对象。必须等到异步操作结束，才能得到服务器返回的完整数据：</p><ul><li><code>response.text()</code>：得到文本字符串，如 <code>html</code> 文档字符串</li><li><code>response.json()</code>：得到 <code>JSON</code> 对象</li><li><code>response.blob()</code>：得到二进制 <code>Blob</code> 对象</li><li><code>response.formData()</code>：得到 <code>FormData</code> 表单对象，主要用在 <code>Service Worker</code> 里面，拦截用户提交的表单，修改某些数据以后，再提交给服务器</li><li><code>response.arrayBuffer()</code>：得到二进制 <code>ArrayBuffer</code> 的流媒体对象</li></ul><br>',4);function H(L,P){const a=i("ExternalLinkIcon");return p(),l("div",null,[k,n("ul",null,[n("li",null,[h,n("ul",null,[n("li",null,[n("a",v,[s("万字 Ajax_掘金"),e(a)])]),n("li",null,[n("a",m,[s("你真的会 Ajax 吗？"),e(a)])]),n("li",null,[n("a",b,[s("入门 Ajax"),e(a)])]),n("li",null,[n("a",g,[s("Axios 文档"),e(a)])]),n("li",null,[n("a",x,[s("阮一峰 Fetch"),e(a)])])])])]),t(' @import "[TOC]" {cmd="toc" depthFrom=2 depthTo=5 orderedList=false} '),t(" code_chunk_output "),f,t(" /code_chunk_output "),y,n("p",null,[E,s(" 请求成功以后，得到的是一个 "),n("a",q,[s("Response 对象"),e(a)]),s("。它对应服务器的 HTTP 回应")]),B,n("ul",null,[A,n("li",null,[_,s("： 指向一个 "),n("a",j,[s("Headers 对象"),e(a)]),s("，对应 "),w,s(" 的所有标头。 Headers 对象提供了以下方法，用来操作标头 "),T])]),R])}const S=c(u,[["render",H],["__file","Ajax.html.vue"]]);export{S as default};
