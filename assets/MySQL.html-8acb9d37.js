import{_ as t,V as o,W as i,Z as e,a0 as a,$ as n,X as c,a1 as s,F as p}from"./framework-cf51392c.js";const d={},r=n("p",null,[n("br"),n("p",{style:{"font-size":"32px","font-weight":"bold"}},"目录")],-1),u=s('<ul><li><a href="#%E5%9F%BA%E7%A1%80%E8%AF%AD%E5%8F%A5">基础语句</a><ul><li><a href="#create">Create</a></li><li><a href="#drop">Drop</a></li><li><a href="#insert-into">Insert into</a></li><li><a href="#select">Select</a></li><li><a href="#where">Where</a></li><li><a href="#order-by">Order by</a></li><li><a href="#update">update</a></li><li><a href="#delete">Delete</a></li></ul></li><li><a href="#%E9%AB%98%E7%BA%A7%E8%AF%AD%E5%8F%A5">高级语句</a><ul><li><a href="#%E5%8C%B9%E9%85%8D">匹配</a></li><li><a href="#%E5%AD%90%E6%9F%A5%E8%AF%A2">子查询</a></li><li><a href="#join">Join</a></li><li><a href="#as-%E5%88%AB%E5%90%8D">As 别名</a></li><li><a href="#limit-%E4%B8%8E-offset">Limit 与 Offset</a></li><li><a href="#group-by">Group by</a></li><li><a href="#delimiter">Delimiter</a></li></ul></li><li><a href="#sql-%E5%87%BD%E6%95%B0">SQL 函数</a><ul><li><a href="#%E6%95%B0%E5%AD%97%E5%87%BD%E6%95%B0">数字函数</a></li><li><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0">字符串函数</a></li><li><a href="#%E6%97%A5%E6%9C%9F%E5%87%BD%E6%95%B0">日期函数</a></li><li><a href="#%E9%AB%98%E7%BA%A7%E5%87%BD%E6%95%B0">高级函数</a></li></ul></li><li><a href="#%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B">存储过程</a><ul><li><a href="#%E4%B8%80%E4%BA%9B">一些......</a></li><li><a href="#%E8%AF%AD%E5%8F%A5">语句</a></li></ul></li><li><a href="#%E4%BA%8B%E5%8A%A1">事务</a></li><li><a href="#%E8%87%AA%E6%95%91%E6%95%91">自救救</a><ul><li><a href="#%E5%AF%86%E7%A0%81%E5%A4%B1%E8%B4%A5">密码失败</a></li><li><a href="#%E6%97%A0%E6%B3%95-%E5%90%AF%E5%8A%A8%E4%B8%8E%E5%85%B3%E9%97%AD-mysql-%E6%9C%8D%E5%8A%A1">无法 启动与关闭 MySQL 服务</a></li></ul></li></ul>',1),k=n("br",null,null,-1),v=s(`<h2 id="基础语句" tabindex="-1"><a class="header-anchor" href="#基础语句" aria-hidden="true">#</a> 基础语句</h2><h3 id="create" tabindex="-1"><a class="header-anchor" href="#create" aria-hidden="true">#</a> Create</h3><ul><li><strong>语法：</strong><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">Create</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> table1
<span class="token punctuation">(</span>
  column1 <span class="token keyword">type</span>
<span class="token punctuation">)</span><span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDb</span>
<span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>结果：</strong> 创建表</li><li><strong>表属性</strong><ol><li>选项 <ol><li>指定列选项：<code>default</code>，<code>comment</code></li><li>指定列选项：<code>engine</code>，<code>auto_increment</code>，<code>comment</code></li></ol></li><li>约束 <ol><li><code>not null</code>：非空约束</li><li><code>unique</code>：唯一性约束</li><li><code>primary key</code>：住建约束</li><li><code>foreign key</code>：外键</li><li><code>check</code>：检查 —— <code>enum</code>，<code>set</code> <sup><b>*</b></sup></li></ol></li></ol></li><li><sup><b>*</b></sup> 约束中的 <code>enum</code>，<code>set</code>： <ul><li><code>enum</code>：单选字符串数据类型，适合存储表单界面中的 “单选值”。设定 enum 的时候，需要给定“固定的几个选项”；存储的时候就只存储其中的一个值 <ul><li>设定 enum 的格式：<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">enum</span><span class="token punctuation">(</span><span class="token string">&quot;value1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value3&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>   实际上，enum 的选项都会对应一个数字，依次是 1，2，3，4，5...，最多有 65535 个选项。使用的时候，可以使用选项的字符串格式，也可以使用对应的数字</li></ul></li><li><code>set</code>：其实就是可多选的 enum。可插入多值，Select 出来的也是多值</li></ul></li></ul><h3 id="drop" tabindex="-1"><a class="header-anchor" href="#drop" aria-hidden="true">#</a> Drop</h3><ul><li><strong>语法：</strong><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">Drop</span> <span class="token keyword">table</span> table1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><strong>结果：</strong> 删除表</li></ul><h3 id="insert-into" tabindex="-1"><a class="header-anchor" href="#insert-into" aria-hidden="true">#</a> Insert into</h3><ul><li><strong>语法：</strong><ul><li>第一种形式无需指定要插入数据的列名，只需提供被插入的值即可：<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">Insert</span> <span class="token keyword">into</span> table1
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span> value3<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li>第二种形式需要指定列名及被插入的值：<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">Insert</span> <span class="token keyword">into</span> table1 <span class="token punctuation">(</span>column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> column3<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span> value3<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><strong>结果：</strong> 向表中插入新纪录</li></ul><h3 id="select" tabindex="-1"><a class="header-anchor" href="#select" aria-hidden="true">#</a> Select</h3><ul><li><strong>语法：</strong><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">Select</span> column1
<span class="token keyword">From</span> table1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>结果：</strong> 列出 <code>table</code> 中列名为 <code>column1</code>的数据，<code>*</code> 则为表中所有数据</li><li>加上 <code>DISTINCT</code> 则列出 去重 后的数据</li></ul><h3 id="where" tabindex="-1"><a class="header-anchor" href="#where" aria-hidden="true">#</a> Where</h3><ul><li><p><strong>语法：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">Select</span> column1 <span class="token keyword">From</span> table1
<span class="token keyword">Where</span> column1 operator <span class="token keyword">value</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>结果：</strong> 用于 <strong>过滤</strong> 列数据</p></li><li><p><strong><code>operator</code> 运算符：</strong></p></li></ul><div class="tableBox"><table class="reference"><tbody><tr><th width="20%">运算符</th><th width="80%">描述</th></tr><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt;</td><td>不等于</td></tr><tr><td> &gt; </td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>BETWEEN</td><td>在某个范围内</td></tr><tr><td>Like</td><td>搜索某种模式 | 模糊判断</td></tr><tr><td>in</td><td>指定针对某个列的多个可能值</td></tr></tbody></table><br></div><ul><li><p><strong>逻辑运算符：</strong> <code>()</code> 、<code>and</code> 、<code>not</code> 、<code>or</code></p></li><li><p><strong>特殊：</strong></p><ul><li>空值判断： <code>is null</code></li><li>范围判断（闭区间）：<code>between a and b</code>，可以是数值、文本或日期</li><li><code>in</code>：用于匹配多组数据，类似于 <code>OR</code>。如：<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">Select</span> stu1 <span class="token keyword">From</span> stuinfo
<span class="token keyword">Where</span> stu1 <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">&#39;有机鱼&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="order-by" tabindex="-1"><a class="header-anchor" href="#order-by" aria-hidden="true">#</a> Order by</h3><ul><li><strong>语法：</strong><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">Select</span> column1 <span class="token keyword">From</span> table1
<span class="token keyword">Order</span> <span class="token keyword">by</span> column1 <span class="token keyword">ASC</span> <span class="token operator">|</span> <span class="token keyword">DESC</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>结果：</strong> 用于排序，默认 <code>ASC</code> 升序</li><li>多列排序：先按第一个 <code>column1</code> 来排，然后类推</li><li>顺序：<code>desc</code> 或者 <code>asc</code> 只对它紧跟着的第一个列名有效，其他不受影响，仍然是默认的升序</li><li><strong>自定义排序：</strong><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">Select</span> column1 <span class="token keyword">From</span> table1
<span class="token keyword">Order</span> <span class="token keyword">by</span> FIELD<span class="token punctuation">(</span>sorted_column<span class="token punctuation">,</span> <span class="token string">&#39;value1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li>随机选择 n 行：<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">Select</span> table1 <span class="token keyword">From</span> column1
<span class="token keyword">Order</span> <span class="token keyword">by</span> rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">Limit</span> n<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="update" tabindex="-1"><a class="header-anchor" href="#update" aria-hidden="true">#</a> update</h3><ul><li><strong>语法：</strong><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">update</span> table1
<span class="token keyword">SET</span> column1 <span class="token operator">=</span> value1
<span class="token keyword">Where</span> column1 <span class="token operator">=</span> value1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>结果：</strong> 更新(修改)表中已有的数据，且一定要指定 <code>Where</code></li></ul><h3 id="delete" tabindex="-1"><a class="header-anchor" href="#delete" aria-hidden="true">#</a> Delete</h3><ul><li><strong>语法：</strong><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">Delete</span> <span class="token keyword">From</span> table1
<span class="token keyword">Where</span> column1 <span class="token operator">=</span> value1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>结果：</strong> 删除行。不带 <code>Where</code> 时则将整个表删除，但表的结构还在</li><li>令：别的删除 <ul><li><code>Drop table1</code>：将表完全删除</li><li><code>TRUNCATE table1</code>：仅删除内容并释放空间，表的结构还在</li></ul></li></ul><h2 id="高级语句" tabindex="-1"><a class="header-anchor" href="#高级语句" aria-hidden="true">#</a> 高级语句</h2><h3 id="匹配" tabindex="-1"><a class="header-anchor" href="#匹配" aria-hidden="true">#</a> 匹配</h3><ul><li><p><strong>区别：</strong></p><ul><li><code>like</code> 整个字段匹配表达式成功才返回， 即: <code>re.match</code></li><li><code>regexp</code> 部分字符匹配表达式成功即可返回, 即：<code>re.search</code><br></li></ul></li><li><p><strong><code>Like</code> 通配符</strong></p><ul><li><strong>语法：</strong><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">Select</span> column1 <span class="token keyword">From</span> table1
<span class="token keyword">Where</span> column1 <span class="token operator">Like</span> xx<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>通配符</strong><ul><li><code>%</code> ： 代替零个或多个字符</li><li><code>_</code> ： 仅代替一个字符</li><li><code>[charlist]</code> ： 字符列中的任意一个字符（^ 表示取反）</li></ul></li><li><strong>如：</strong><ul><li><code>%a</code> ：以 a 结尾的数据</li><li><code>a%</code> ：以 a 开头的数据</li><li><code>%a%</code> ：含有 a 的数据</li><li><code>_a_</code> ：三位且中间字母是 a 的</li><li><code>_a</code> ：两位且结尾字母是 a 的</li><li><code>a_</code> ：两位且开头字母是 a 的</li><li><code>[ABC]%</code>：以 A 或 B 或 C 开头的单词</li></ul></li></ul></li><li><p><strong><code>REGEXP</code> 正则表达式</strong></p><ul><li><strong>语法：</strong><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">Select</span> column1 <span class="token keyword">From</span> table1
<span class="token keyword">Where</span> column1 <span class="token operator">REGEXP</span> <span class="token string">&#39;xx&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="子查询" tabindex="-1"><a class="header-anchor" href="#子查询" aria-hidden="true">#</a> 子查询</h3><ul><li>如求某列最值的其他信息时，不能单用函数，只能是再套一层：<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">Select</span> column1 <span class="token keyword">From</span> table1
<span class="token keyword">Where</span> column1 <span class="token operator">=</span> <span class="token punctuation">(</span>
  <span class="token keyword">Select</span> <span class="token function">MAX</span><span class="token punctuation">(</span>column1<span class="token punctuation">)</span> <span class="token keyword">From</span> table1
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="join" tabindex="-1"><a class="header-anchor" href="#join" aria-hidden="true">#</a> Join</h3><ul><li><p><strong>结果：</strong> 基于多个表之间 <strong>相同的内容</strong> 相联动</p></li><li><p><strong>inner join</strong></p><ul><li><strong>语法：</strong><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">Select</span> column1 <span class="token keyword">From</span> table1
<span class="token keyword">Join</span> table2
<span class="token keyword">ON</span> table1<span class="token punctuation">.</span>column1 <span class="token operator">=</span> table2<span class="token punctuation">.</span>column2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>结果：</strong> 内连接，只连接匹配的行</li><li>当两个表之间有相同的列名时，可用：<code>USING</code><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">Join</span> stuscore <span class="token keyword">USING</span> <span class="token punctuation">(</span>stu_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 相当于</span>
<span class="token keyword">Join</span> stuscore <span class="token keyword">ON</span> stuinfo<span class="token punctuation">.</span>stu_id <span class="token operator">=</span> stuscore<span class="token punctuation">.</span>stu_id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>LEFT | RIGHT Join</strong></p><ul><li><strong>结果：</strong> 当左（右）值没有时，显示 <code>NULL</code></li></ul></li></ul><h3 id="as-别名" tabindex="-1"><a class="header-anchor" href="#as-别名" aria-hidden="true">#</a> As 别名</h3><ul><li><strong>语法：</strong><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">Select</span> column1  other_name
<span class="token keyword">From</span> table1 <span class="token keyword">As</span> <span class="token string">&#39;表别名&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>结果：</strong> 列别名则为展示表格时的表头名。别名主要是为了方便</li><li>如果别名中有空格，则用 <code>&#39; &#39;</code> 括起来</li><li><code>As</code> 是可选的</li><li>表别名就可当做是 一个临时表：<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 查询 income 相同的员工</span>
<span class="token keyword">select</span> salary<span class="token punctuation">.</span>id<span class="token punctuation">,</span> salary<span class="token punctuation">.</span>income
<span class="token keyword">from</span> salary
    <span class="token keyword">join</span> salary sa <span class="token keyword">using</span> <span class="token punctuation">(</span>income<span class="token punctuation">)</span>
<span class="token keyword">where</span> salary<span class="token punctuation">.</span>id <span class="token operator">!=</span> sa<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="limit-与-offset" tabindex="-1"><a class="header-anchor" href="#limit-与-offset" aria-hidden="true">#</a> Limit 与 Offset</h3><ul><li><strong>语法：</strong><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">Select</span> column1 <span class="token keyword">From</span> table1
<span class="token keyword">Limit</span> <span class="token punctuation">(</span>pos<span class="token punctuation">,</span> <span class="token punctuation">)</span> count <span class="token keyword">Offset</span> count<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>结果：</strong><ul><li><code>Limit</code>： 仅列出从 <code>pos</code> 开始的 <code>count</code> 个数据</li><li><code>Offset</code>：从 0 开始不取 <code>count</code> 个数据</li></ul></li><li>常结合用于分页数据</li></ul><h3 id="group-by" tabindex="-1"><a class="header-anchor" href="#group-by" aria-hidden="true">#</a> Group by</h3><ul><li><strong>语法：</strong><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">Select</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">From</span> table1
<span class="token keyword">Group</span> <span class="token keyword">by</span> column1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>结果：</strong> 将相同的值分组，常与 <code>COUNT</code> 一起</li><li>且：可以通过 <strong>HAVING</strong> 进行分组的筛选（像<code>Where</code>）</li></ul><h3 id="delimiter" tabindex="-1"><a class="header-anchor" href="#delimiter" aria-hidden="true">#</a> Delimiter</h3><ul><li><strong>语法：</strong><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">Delimiter</span><span class="token comment">//</span>
<span class="token comment">-- 语句;</span>
<span class="token comment">-- 语句;</span>
<span class="token keyword">Delimiter</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>结果：</strong> 分隔符，表示在这之间的分号不再当做程序的结束符，而只是语句之间的分隔符</li></ul><h2 id="sql-函数" tabindex="-1"><a class="header-anchor" href="#sql-函数" aria-hidden="true">#</a> SQL 函数</h2><h3 id="数字函数" tabindex="-1"><a class="header-anchor" href="#数字函数" aria-hidden="true">#</a> 数字函数</h3><ul><li><code>Avg()</code>：求得平均数，<code>Sum()</code>：求和</li><li><code>Ceil()</code>：向大取整； <code>floor</code>：向小取整</li><li><code>Greatest()</code>：列表中的最大值； <code>Least</code>：最小值</li><li><code>Floor(Rand() * @x)</code>：0 到 @x 之间的随机数</li><li><code>Round(@x)</code>：将 @x 四舍五入至整数</li><li><code>Format(x, n)</code>：将数字 x 四舍五入地保留 n 位小数</li></ul><h3 id="字符串函数" tabindex="-1"><a class="header-anchor" href="#字符串函数" aria-hidden="true">#</a> 字符串函数</h3><ul><li>MySQL 的字符串下标是以 1 开始的</li><li><code>Insert(s1, x, len, s2)</code>：将 s1 中下标为 x，长度为 len 的替换为 s2<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">Select</span> <span class="token keyword">Insert</span><span class="token punctuation">(</span><span class="token string">&#39;mie.com&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;fish&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- fish.com</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><code>Length(s)</code>：s 的长度</li><li><code>Concat(s1, s2, s3, ...)</code>：将这些字符串拼接起来</li><li><code>Upper(s)</code>、<code>Lower(s)</code>：全部转为大写 | 小写</li><li><code>Trim(s)</code>：去掉 s 所有的空格（也有 LTrim 和 RTrim）</li><li><code>Substr(s, pos, len)</code>：返回从 pos 开始截取 s 长度为 len 的字符串</li><li><code>left(s, len)</code>：截取 s 左边 len 的字符串</li><li><code>Locate(s1, s2)</code>：返回 s1 在 s2 的位置</li><li><code>Repeat(s, n)</code>：返回将 s 重复 n 次</li><li><code>Reverse(s)</code>：返回将 s 翻转</li><li><code>Strcmp(s1, s2)</code>：s1 == s2 返回 0， s1 &lt; s2 返回-1， s1 &gt; s2 返回 1</li></ul><h3 id="日期函数" tabindex="-1"><a class="header-anchor" href="#日期函数" aria-hidden="true">#</a> 日期函数</h3><ul><li>获取时间：<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">Select</span> Curdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">-- 年-月-日</span>
       Curtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">-- 时-分-秒</span>
       <span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">-- 静态的时间</span>
       sysdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">-- 动态获取的时间</span>
       localtime<span class="token punctuation">,</span>
       <span class="token keyword">Current_timestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- 年月日时分秒</span>
<span class="token comment">-- 时间戳：</span>
<span class="token keyword">Select</span> Unix_timestamp<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>加减时间：<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">Select</span>  date_sub<span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token keyword">interval</span> x <span class="token keyword">day</span> <span class="token operator">|</span> <span class="token keyword">hour</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        date_add<span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token keyword">interval</span> x <span class="token keyword">day</span> <span class="token operator">|</span> <span class="token keyword">hour</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li>提取时间：<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">Select</span> <span class="token keyword">Time</span><span class="token punctuation">(</span><span class="token variable">@t</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">Day</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">Hour</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment">-- or：</span>
<span class="token keyword">Select</span> Extract<span class="token punctuation">(</span><span class="token keyword">Type</span> <span class="token keyword">From</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>时间差：<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">Select</span> Datediff<span class="token punctuation">(</span>t1<span class="token punctuation">,</span> t2<span class="token punctuation">)</span><span class="token punctuation">,</span>
       Timediff<span class="token punctuation">(</span>t1<span class="token punctuation">,</span> t2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- 返回 t1 - t2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li>今天是第几？<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">Select</span> DayofMonth<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">-- 本月第几天</span>
      DayofWeek<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">-- 本周第几天</span>
      DayofYear<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">-- 今年第几天</span>
      Dayname<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">-- 今天星期几</span>
      Monthname<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- 今天几月</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>格式化输出时间<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">Select</span> Date_format<span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token string">&#39;%Y年%m月%d日 %h时%m分%s秒&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 格式化时间戳：</span>
<span class="token keyword">Select</span> From_unixtime<span class="token punctuation">(</span>stamp<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 字符串到时间</span>
<span class="token keyword">Select</span> str_to_date<span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">&#39;format&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="高级函数" tabindex="-1"><a class="header-anchor" href="#高级函数" aria-hidden="true">#</a> 高级函数</h3><ul><li><strong>if 函数</strong><ul><li><strong>语法：</strong><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>exp1<span class="token punctuation">,</span> ret1<span class="token punctuation">,</span> ret2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><strong>结果：</strong> 如果 exp1 为 true 则返回 ret1，否则返回 ret2</li></ul></li><li><strong>Cast</strong>：类型转换<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>Cast<span class="token punctuation">(</span><span class="token string">&#39;mie&#39;</span> <span class="token keyword">as</span> <span class="token keyword">Binary</span> <span class="token operator">|</span> <span class="token keyword">Decimal</span> <span class="token operator">|</span> <span class="token keyword">Char</span> <span class="token operator">|</span>
              Signed <span class="token operator">|</span> <span class="token keyword">Unsigned</span> <span class="token operator">|</span> <span class="token keyword">Date</span> <span class="token operator">|</span>
              <span class="token keyword">Datetime</span> <span class="token keyword">Time</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>Conv(x, a, b)：</strong> 将 a 进制的 x 转为 b 进制</li></ul><h2 id="存储过程" tabindex="-1"><a class="header-anchor" href="#存储过程" aria-hidden="true">#</a> 存储过程</h2><p>主要是用于封装数据库，且便于查询。相当于是函数</p><h3 id="一些" tabindex="-1"><a class="header-anchor" href="#一些" aria-hidden="true">#</a> 一些......</h3><ul><li><p><strong>创建：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">Create</span> <span class="token keyword">procedure</span> name_<span class="token punctuation">(</span>parameters para_name para_type<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>参数：</strong></p><ul><li><p><code>in</code>：仅传形参，不可变，没返回。如：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">delimiter</span> <span class="token comment">//</span>
<span class="token keyword">Create</span> <span class="token keyword">procedure</span> fishstu<span class="token punctuation">(</span><span class="token operator">in</span> in_sex <span class="token keyword">int</span><span class="token punctuation">)</span>
<span class="token keyword">begin</span>
    <span class="token keyword">Select</span> stu_id<span class="token punctuation">,</span> stu_name<span class="token punctuation">,</span> sex
    <span class="token keyword">from</span> stuinfo
    <span class="token keyword">where</span> sex <span class="token operator">=</span> in_sex<span class="token punctuation">;</span>
<span class="token keyword">end</span> <span class="token comment">//</span>

<span class="token keyword">call</span> fishstu<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--sex=1 的数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>out</code>：不传参，可改变存储值，并可返回。如：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">delimiter</span> <span class="token comment">//</span>
<span class="token keyword">Create</span> <span class="token keyword">procedure</span> fishsex<span class="token punctuation">(</span><span class="token operator">in</span> in_sex <span class="token keyword">int</span><span class="token punctuation">,</span>
                        <span class="token keyword">out</span> sex_total <span class="token keyword">int</span><span class="token punctuation">)</span>
<span class="token keyword">begin</span>
    <span class="token keyword">Select</span> <span class="token function">count</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span> <span class="token keyword">into</span> sex_total
    <span class="token keyword">from</span> stuinfo
    <span class="token keyword">where</span> sex <span class="token operator">=</span> in_sex<span class="token punctuation">;</span>
<span class="token keyword">end</span> <span class="token comment">//</span>

<span class="token keyword">call</span> fishsex<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">@sex1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">Select</span> <span class="token variable">@sex1</span><span class="token punctuation">;</span> <span class="token comment">--sex=1 的数量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>inout</code>：传参可变，可返回。如：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">delimiter</span> <span class="token comment">//</span>
<span class="token keyword">Create</span> <span class="token keyword">procedure</span> counts<span class="token punctuation">(</span><span class="token keyword">inout</span> cnt <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token operator">in</span> x <span class="token keyword">int</span><span class="token punctuation">)</span>
<span class="token keyword">begin</span>
    <span class="token keyword">set</span> cnt <span class="token operator">=</span> cnt <span class="token operator">+</span> x<span class="token punctuation">;</span>
<span class="token keyword">end</span> <span class="token comment">//</span>

<span class="token keyword">set</span> <span class="token variable">@a</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">call</span> counts<span class="token punctuation">(</span><span class="token variable">@a</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">Select</span> <span class="token variable">@a</span> <span class="token comment">--12</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="语句" tabindex="-1"><a class="header-anchor" href="#语句" aria-hidden="true">#</a> 语句</h3><ul><li><p><strong>判断</strong></p><ul><li><strong>if</strong><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">if</span> exp1 <span class="token keyword">then</span>
   xx<span class="token punctuation">;</span>
<span class="token keyword">elseif</span> exp2 <span class="token keyword">then</span>
   xx<span class="token punctuation">;</span>
<span class="token keyword">else</span>
   xx<span class="token punctuation">;</span>
<span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>case</strong><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">case</span>
  <span class="token keyword">when</span> exp1 <span class="token keyword">then</span>
     xx<span class="token punctuation">;</span>
  <span class="token keyword">when</span> exp2 <span class="token keyword">then</span>
     xx<span class="token punctuation">;</span>
  <span class="token keyword">else</span>
     xx<span class="token punctuation">;</span>
<span class="token keyword">end</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>循环：</strong></p><ul><li><strong>while</strong><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">while</span> exp <span class="token keyword">do</span>
  xx<span class="token punctuation">;</span>
<span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>repeat</strong><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">repeat</span>
  xx<span class="token punctuation">;</span>
until exp
<span class="token keyword">end</span> <span class="token keyword">repeat</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>loop</strong><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>loop_name:
<span class="token keyword">loop</span>
  <span class="token keyword">if</span> exp1 <span class="token keyword">then</span>
    xx<span class="token punctuation">;</span>
  <span class="token keyword">elseif</span> exp2 <span class="token keyword">then</span>
    <span class="token keyword">leave</span> loop_name<span class="token punctuation">;</span> <span class="token comment">-- break</span>
  <span class="token keyword">elseif</span> exp3 <span class="token keyword">then</span>
    <span class="token keyword">iterate</span> loop_name<span class="token punctuation">;</span> <span class="token comment">-- continue</span>
  <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>
  xx<span class="token punctuation">;</span>
<span class="token keyword">end</span> <span class="token keyword">loop</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="事务" tabindex="-1"><a class="header-anchor" href="#事务" aria-hidden="true">#</a> 事务</h2><p>事务有一个最显著的特征，就是它包含的所有 SQL 语句作为一个整体向数据库提交，只有所有的 SQL 语句都执行完成，整个事务才算成功，一旦某个 SQL 语句执行失败，整个事务就失败了。事务失败后需要回滚所有的 SQL 语句 事务中的所有 SQL 语句是一个整体，要么全部执行成功，要么全部执行失败</p><ul><li>与事务控制有关的 SQL 命令包括： <ul><li>BEGIN 或者 START TRANSACTION：开始事务</li><li>COMMIT：提交事务</li><li>ROLLBACK：回滚事务</li><li>SAVEPOINT：在事务内部设置回滚标记点</li><li>RELEASE SAVEPOINT：删除回滚标记点</li><li>ROLLBACK TO：将事务回滚到标记点（ROLLBACK 命令的一种变形写法） 一个事务要么提交，要么回滚，提交意味着成功，回滚意味着失败。编写事务代码时，以 <strong>BEGIN</strong> 命令开头，后跟一条或者多条 SQL 语句，最后书写 <strong>COMMIT</strong> 或者 <strong>ROLLBACK</strong> 命令 事务控制命令仅能与 DML 类别的 SQL 命令一起使用，包括 INSERT、UPDATE、DELETE 和 SELECT，在创建或者删除表时不能使用事务，因为这些操作在数据库中是自动提交的</li></ul></li></ul><h2 id="自救救" tabindex="-1"><a class="header-anchor" href="#自救救" aria-hidden="true">#</a> 自救救</h2><h3 id="密码失败" tabindex="-1"><a class="header-anchor" href="#密码失败" aria-hidden="true">#</a> 密码失败</h3>`,54),m=s(`<li>管理员 cmd <code>cd</code> 到 <code>bin</code>：<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> C:<span class="token punctuation">\\</span>Program Files<span class="token punctuation">\\</span>MySQL<span class="token punctuation">\\</span>MySQL Server <span class="token number">8.0</span><span class="token punctuation">\\</span>bin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>关闭 MySQL 服务<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>net stop mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>跳过密码登录<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysqld <span class="token parameter variable">--console</span> --skip-grant-tables --shared-memory
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>新建 cmd 窗口，输入 <code>mysql</code> 即可进入</li>`,4),b=s(`<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">use</span> mysql<span class="token punctuation">;</span> <span class="token comment">-- 用 MySQL 数据库</span>
flush <span class="token keyword">privileges</span><span class="token punctuation">;</span> <span class="token comment">--一定要先更新权限</span>
<span class="token keyword">alter</span> <span class="token keyword">user</span> <span class="token string">&#39;root&#39;</span> <span class="token variable">@&#39;localhost&#39;</span> IDENTifIED <span class="token keyword">BY</span> <span class="token string">&#39;新密码&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),g={href:"https://blog.csdn.net/weixin_42359480/article/details/89931700",target:"_blank",rel:"noopener noreferrer"},h=s(`<h3 id="无法-启动与关闭-mysql-服务" tabindex="-1"><a class="header-anchor" href="#无法-启动与关闭-mysql-服务" aria-hidden="true">#</a> 无法 启动与关闭 MySQL 服务</h3><ul><li><p>查找端口占用</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">netstat</span> <span class="token parameter variable">-ano</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>找到 (<code>Ctrl + F</code>) 3306 端口的 PID (行尾数字)</p></li><li><p>可以去 <strong>任务管理器</strong>$\\to $ 详细信息 $ \\to $ 按 <code>PID</code> 排序 $ \\to$找到并结束该端口的进程</p></li><li><p>就可以用管理员 cmd 启动 MySQL 服务了</p></li><li><p><strong>或者：</strong></p><ul><li>去 <strong>任务管理器</strong> 的 <strong>详细信息</strong> 双击 名称为 <strong>mysqld.exe</strong> 的进程并结束它，就可以启动 MySQL 了</li></ul></li></ul>`,2);function y(w,x){const l=p("ExternalLinkIcon");return o(),i("div",null,[r,e(' @import "[TOC]" {cmd="toc" depthFrom=1 depthTo=6 orderedList=false} '),e(" code_chunk_output "),u,e(" /code_chunk_output "),k,a("   "),v,n("ul",null,[m,n("li",null,[a("更改密码"),b,n("blockquote",null,[n("p",null,[a("REF: "),n("a",g,[a("MySQL8 root 密码"),c(l)])])])])]),h])}const f=t(d,[["render",y],["__file","MySQL.html.vue"]]);export{f as default};
