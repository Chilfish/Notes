import{_ as c,V as i,W as r,Z as e,$ as a,a1 as s,X as t,Y as u,a0 as n,F as p}from"./framework-dc28d300.js";const m={},d=a("p",null,[a("br"),a("p",{style:{"font-size":"32px","font-weight":"bold"}},"目录")],-1),k=n('<ul><li><a href="#%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84array">动态数组（Array）</a><ul><li><a href="#%E5%AE%9A%E4%B9%89">定义</a></li><li><a href="#%E4%B8%BB%E8%A6%81%E5%AE%9E%E7%8E%B0">主要实现</a></li></ul></li><li><a href="#%E6%A0%88stack">栈（Stack）</a><ul><li><a href="#%E5%AE%9A%E4%B9%89-1">定义</a></li><li><a href="#%E4%B8%BB%E8%A6%81%E5%AE%9E%E7%8E%B0-1">主要实现</a></li><li><a href="#%E5%BA%94%E7%94%A8">应用</a></li></ul></li><li><a href="#%E9%98%9F%E5%88%97queue">队列（Queue）</a><ul><li><a href="#%E5%AE%9A%E4%B9%89-2">定义</a></li><li><a href="#%E4%B8%BB%E8%A6%81%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84">主要实现（数组）</a></li></ul></li></ul>',1),h=a("br",null,null,-1),v=a("h2",{id:"动态数组-array",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#动态数组-array","aria-hidden":"true"},"#"),s(" 动态数组（Array）")],-1),g=a("h3",{id:"定义",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#定义","aria-hidden":"true"},"#"),s(" 定义")],-1),y=a("p",null,[a("strong",null,"复杂度："),s(" 支持随机访问，为 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"O"),a("mo",{stretchy:"false"},"("),a("mn",null,"1"),a("mo",{stretchy:"false"},")")]),a("annotation",{encoding:"application/x-tex"},"O(1)")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),a("span",{class:"mopen"},"("),a("span",{class:"mord"},"1"),a("span",{class:"mclose"},")")])])]),s("。但在插入和删除时，要整体移动部分数组，最坏的情况为 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"O"),a("mo",{stretchy:"false"},"("),a("mi",null,"n"),a("mo",{stretchy:"false"},")")]),a("annotation",{encoding:"application/x-tex"},"O(n)")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),a("span",{class:"mopen"},"("),a("span",{class:"mord mathnormal"},"n"),a("span",{class:"mclose"},")")])])])],-1),b=n('<p><strong>优点：</strong> 无须为表中元素之间的逻辑关系而增加额外的存储空间；可以快速的存取表中任一位置的元素</p><p><strong>缺点：</strong> 插入和删除操作需要移动大量元素；当线性表长度较大时，难以确定存储空间的容量；造成存储空间的“碎片”</p><div class="h5">构造函数：</div><ul><li><code>Vector()</code>：创建一个空 <code>Vector</code></li><li><code>Vector(int len)</code>：创建一个 <code>Vector</code>，元素个数为 <code>len</code>，值默认为 0</li><li><code>Vector(int len, const T&amp; data)</code>：创建一个 <code>Vector</code>，元素个数为 <code>len</code>，且值均为 <code>data</code></li><li><code>Vector(const Vector&amp; a)</code>：左值引用的拷贝构造函数</li><li><code>Vector(Vector&amp;&amp; a)</code>：右值引用的移动构造函数</li></ul><div class="h5">属性：</div><ul><li><code>a.at(pos)</code>：返回下标位置的元素，并检查下标的合法性</li><li><code>a.begin()</code>：返回数组 <em>第一个元素</em> 的迭代器</li><li><code>a.end()</code>：返回数组的 <em>最后一个元素 + 1</em> 的迭代器</li><li><code>a.front()</code>：返回数组的第一个元素</li><li><code>a.back()</code>：返回数组的最后一个元素</li><li><code>a.capacity()</code>：返回当前数组分配的大小</li><li><code>a.size()</code>：返回数组的长度</li><li><code>a.empty()</code>：判断数组是否为空</li></ul><div class="h5">方法：</div>',7),w=a("li",null,[a("code",null,"a.insert(index, x)"),s("：在 下标 "),a("code",null,"index"),s(" 之前插入 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"x")]),a("annotation",{encoding:"application/x-tex"},"x")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.4306em"}}),a("span",{class:"mord mathnormal"},"x")])])])],-1),x=n("<li><code>a.push_back(x)</code>：在数组的最后添加一个数据</li><li><code>a.pop_back()</code>：去掉数组的最后一个数据</li><li><code>a.resize(newSize, value = 0)</code>：改变数组的长度，如果大于当前长度，则填充默认值 0 或 <code>value</code>；否则将数组缩减至新长度</li><li><code>a.reserve(newCapacity)</code>：改变当前数组所分配容量的大小，如果小于等于当前容量，则将当前容量改为当前长度</li><li><code>a.remove(index)</code>：删除下标的元素</li><li><code>a.erase(begin [, end])</code>：删除下标范围的元素</li><li><code>a.clear()</code>：清空当前的数组，但仅是将长度置零</li><li><code>a.assign(n, value)</code>：将 n 个 value 赋值给 a。若原先容量大于 n，则不变；否则变为 n</li>",8),f=a("code",null,"a.assign({list})",-1),_=a("br",null,null,-1),E=a("h3",{id:"主要实现",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#主要实现","aria-hidden":"true"},"#"),s(" 主要实现")],-1),C={href:"https://github.com/Organic-Fish/FishCode/blob/master/CPP/DataStruct/Vector/Vector.hpp",target:"_blank",rel:"noopener noreferrer"},B=a("p",null,[s("主要是借助 "),a("code",null,"new T[]"),s(" 的动态数组，及 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("msup",null,[a("mn",null,"2"),a("mi",null,"n")])]),a("annotation",{encoding:"application/x-tex"},"2^n")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6644em"}}),a("span",{class:"mord"},[a("span",{class:"mord"},"2"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.6644em"}},[a("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mathnormal mtight"},"n")])])])])])])])])])]),s(" 大小的容量来存取数据。如果不使用容量的话，每次增删数据都要进行重新"),a("strong",null,"分配内存"),s("(容量)这样耗时的操作。因此：")],-1),M=n(`<ul><li><p>当目前数组的长度未达到数组容量时，增加数据只要 <code>arr[len++] = value</code>、当目前的数组长度达到数组容量时，将重新分配容量，再增加数据</p></li><li><p>重新分配容量要创建临时数组来存放当前的数据，再转移过去：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">reserve</span><span class="token punctuation">(</span><span class="token keyword">int</span> newCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">&lt;</span> curLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    curCapacity <span class="token operator">=</span> curLength<span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  T<span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> T<span class="token punctuation">[</span>newCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> curLength<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  curCapacity <span class="token operator">=</span> newCapacity<span class="token punctuation">;</span>
  <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><br><h2 id="栈-stack" tabindex="-1"><a class="header-anchor" href="#栈-stack" aria-hidden="true">#</a> 栈（Stack）</h2><h3 id="定义-1" tabindex="-1"><a class="header-anchor" href="#定义-1" aria-hidden="true">#</a> 定义</h3><div class="h5">概念：</div><p>栈是一种运算受限的线性表。限定仅在表尾进行插入和删除操作的线性表。这一端被称为栈顶，相对地，把另一端称为栈底</p><p>向一个栈插入新元素又称作进栈、入栈或压栈，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素；从一个栈删除元素又称作出栈或退栈，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素</p><div class="h5">属性方法：</div><ul><li><code>s.top()</code>：返回栈顶元素</li><li><code>s.pop()</code>：删除栈顶元素</li><li><code>s.push(data)</code>：往栈顶压入元素</li><li><code>s.size()</code>：返回栈中的元素个数</li><li><code>s.empty()</code>：判断栈是否为空</li></ul><h3 id="主要实现-1" tabindex="-1"><a class="header-anchor" href="#主要实现-1" aria-hidden="true">#</a> 主要实现</h3>`,10),F=a("code",null,"std::stack",-1),A={href:"https://github.com/Organic-Fish/FishCode/blob/master/CPP/DataStruct/Stack/Stack.hpp",target:"_blank",rel:"noopener noreferrer"},L=n(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">Stack</span> <span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
  Vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> s<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">explicit</span> <span class="token function">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">explicit</span> <span class="token function">Stack</span><span class="token punctuation">(</span><span class="token keyword">const</span> Vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">&amp;</span> a<span class="token punctuation">)</span><span class="token operator">:</span> s<span class="token punctuation">{</span>a<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  T <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> s<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span> s<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>当然也能重写，也还有用单链表实现的</p></blockquote><h3 id="应用" tabindex="-1"><a class="header-anchor" href="#应用" aria-hidden="true">#</a> 应用</h3><br><h2 id="队列-queue" tabindex="-1"><a class="header-anchor" href="#队列-queue" aria-hidden="true">#</a> 队列（Queue）</h2><h3 id="定义-2" tabindex="-1"><a class="header-anchor" href="#定义-2" aria-hidden="true">#</a> 定义</h3><div class="h5">概念</div><ul><li>队列是一种只允许在一段进行删除操作，在另一端进行插入操作的线性表</li><li>队列的数据元素又叫做队列元素，在队列中插入一个队列元素称为 <strong>入队</strong>，从队列中删除一个队列元素称为 <strong>出队</strong> ，也正是因为队列只允许在一段插入，另一端删除，也就是： <strong>先进先出</strong> (<code>FIFO - first in first out</code>) 的概念</li><li>队列可以用动态数组或者单链表来实现，其实限制下单链表的操作就是个队列了，比较好写）</li></ul><div class="h5">属性方法：</div><ul><li><code>q.empty()</code>：判断队列是否为空</li><li><code>q.size()</code>：返回队列中的元素个数</li><li><code>q.pop()</code>：删除队列中的顶部元素</li><li><code>q.push(data)</code>：往队列尾部压入元素</li><li><code>q.front()</code>：返回队首元素的值</li><li><code>q.back()</code>：返回队尾元素的值</li></ul><h3 id="主要实现-数组" tabindex="-1"><a class="header-anchor" href="#主要实现-数组" aria-hidden="true">#</a> 主要实现（数组）</h3>`,11),V={href:"https://github.com/Organic-Fish/FishCode/blob/master/CPP/DataStruct/Queue/Queue.hpp",target:"_blank",rel:"noopener noreferrer"},T=a("p",null,"用数组时，要用到表示队首队尾的位置指针，以及像动态数组的到点扩容。于是乎，为了减少扩容的次数、高效地利用已有的空间，其内部是一个循环数组。其中：",-1),z=a("ul",null,[a("li",null,[a("code",null,"Front"),s(" 队首指针表示的是 队首元素"),a("em",null,"下标的前一位"),s("，于是初始化为 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mo",null,"−"),a("mn",null,"1")]),a("annotation",{encoding:"application/x-tex"},"-1")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),a("span",{class:"mord"},"−"),a("span",{class:"mord"},"1")])])])]),a("li",null,[a("code",null,"Back"),s("：队尾指针表示的是 队尾元素的下标，初始化也为 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mo",null,"−"),a("mn",null,"1")]),a("annotation",{encoding:"application/x-tex"},"-1")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),a("span",{class:"mord"},"−"),a("span",{class:"mord"},"1")])])])])],-1),S=a("p",null,"于是由以上的特点可以得出以下的性质：",-1),q=a("ul",null,[a("li",null,[s("队列的大小为 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mo",{stretchy:"false"},"("),a("mi",null,"B"),a("mi",null,"a"),a("mi",null,"c"),a("mi",null,"k"),a("mo",null,"−"),a("mi",null,"F"),a("mi",null,"r"),a("mi",null,"o"),a("mi",null,"n"),a("mi",null,"t"),a("mo",null,"+"),a("mi",null,"C"),a("mi",null,"a"),a("mi",null,"p"),a("mi",null,"a"),a("mi",null,"c"),a("mi",null,"i"),a("mi",null,"t"),a("mi",null,"y"),a("mo",{stretchy:"false"},")"),a("mi",{mathvariant:"normal"},"%"),a("mi",null,"C"),a("mi",null,"a"),a("mi",null,"p"),a("mi",null,"a"),a("mi",null,"c"),a("mi",null,"i"),a("mi",null,"t"),a("mi",null,"y")]),a("annotation",{encoding:"application/x-tex"},"(Back - Front + Capacity) \\% Capacity")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),a("span",{class:"mopen"},"("),a("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),a("span",{class:"mord mathnormal"},"a"),a("span",{class:"mord mathnormal"},"c"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"−"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"F"),a("span",{class:"mord mathnormal"},"ro"),a("span",{class:"mord mathnormal"},"n"),a("span",{class:"mord mathnormal"},"t"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"+"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),a("span",{class:"mord mathnormal"},"a"),a("span",{class:"mord mathnormal"},"p"),a("span",{class:"mord mathnormal"},"a"),a("span",{class:"mord mathnormal"},"c"),a("span",{class:"mord mathnormal"},"i"),a("span",{class:"mord mathnormal"},"t"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),a("span",{class:"mclose"},")"),a("span",{class:"mord"},"%"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),a("span",{class:"mord mathnormal"},"a"),a("span",{class:"mord mathnormal"},"p"),a("span",{class:"mord mathnormal"},"a"),a("span",{class:"mord mathnormal"},"c"),a("span",{class:"mord mathnormal"},"i"),a("span",{class:"mord mathnormal"},"t"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y")])])])]),a("li",null,[s("队列为空时 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"B"),a("mi",null,"a"),a("mi",null,"c"),a("mi",null,"k"),a("mo",null,"="),a("mo",null,"="),a("mi",null,"F"),a("mi",null,"r"),a("mi",null,"o"),a("mi",null,"n"),a("mi",null,"t")]),a("annotation",{encoding:"application/x-tex"},"Back == Front")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6944em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),a("span",{class:"mord mathnormal"},"a"),a("span",{class:"mord mathnormal"},"c"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"=="),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"F"),a("span",{class:"mord mathnormal"},"ro"),a("span",{class:"mord mathnormal"},"n"),a("span",{class:"mord mathnormal"},"t")])])])]),a("li",null,[s("入队的位置为 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mo",{stretchy:"false"},"("),a("mi",null,"B"),a("mi",null,"a"),a("mi",null,"c"),a("mi",null,"k"),a("mo",null,"+"),a("mn",null,"1"),a("mo",{stretchy:"false"},")"),a("mi",{mathvariant:"normal"},"%"),a("mi",null,"C"),a("mi",null,"a"),a("mi",null,"p"),a("mi",null,"a"),a("mi",null,"c"),a("mi",null,"i"),a("mi",null,"t"),a("mi",null,"y")]),a("annotation",{encoding:"application/x-tex"},"(Back + 1) \\% Capacity")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),a("span",{class:"mopen"},"("),a("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),a("span",{class:"mord mathnormal"},"a"),a("span",{class:"mord mathnormal"},"c"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"+"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),a("span",{class:"mord"},"1"),a("span",{class:"mclose"},")"),a("span",{class:"mord"},"%"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),a("span",{class:"mord mathnormal"},"a"),a("span",{class:"mord mathnormal"},"p"),a("span",{class:"mord mathnormal"},"a"),a("span",{class:"mord mathnormal"},"c"),a("span",{class:"mord mathnormal"},"i"),a("span",{class:"mord mathnormal"},"t"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y")])])])]),a("li",null,[s("出队的位置为 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mo",{stretchy:"false"},"("),a("mi",null,"F"),a("mi",null,"r"),a("mi",null,"o"),a("mi",null,"n"),a("mi",null,"t"),a("mo",null,"+"),a("mn",null,"1"),a("mo",{stretchy:"false"},")"),a("mi",{mathvariant:"normal"},"%"),a("mi",null,"C"),a("mi",null,"a"),a("mi",null,"p"),a("mi",null,"a"),a("mi",null,"c"),a("mi",null,"i"),a("mi",null,"t"),a("mi",null,"y")]),a("annotation",{encoding:"application/x-tex"},"(Front + 1) \\% Capacity")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),a("span",{class:"mopen"},"("),a("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"F"),a("span",{class:"mord mathnormal"},"ro"),a("span",{class:"mord mathnormal"},"n"),a("span",{class:"mord mathnormal"},"t"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"+"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),a("span",{class:"mord"},"1"),a("span",{class:"mclose"},")"),a("span",{class:"mord"},"%"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),a("span",{class:"mord mathnormal"},"a"),a("span",{class:"mord mathnormal"},"p"),a("span",{class:"mord mathnormal"},"a"),a("span",{class:"mord mathnormal"},"c"),a("span",{class:"mord mathnormal"},"i"),a("span",{class:"mord mathnormal"},"t"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y")])])])]),a("li",null,[s("为了两指针不冲突，当队列大小达到容量 -1 的时候就要扩容，即队满的情况为 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"s"),a("mi",null,"i"),a("mi",null,"z"),a("mi",null,"e"),a("mo",{stretchy:"false"},"("),a("mo",{stretchy:"false"},")"),a("mo",null,"="),a("mo",null,"="),a("mi",null,"C"),a("mi",null,"a"),a("mi",null,"p"),a("mi",null,"a"),a("mi",null,"c"),a("mi",null,"i"),a("mi",null,"t"),a("mi",null,"y"),a("mo",null,"−"),a("mn",null,"1")]),a("annotation",{encoding:"application/x-tex"},"size() == Capacity -1")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),a("span",{class:"mord mathnormal"},"s"),a("span",{class:"mord mathnormal"},"i"),a("span",{class:"mord mathnormal"},"ze"),a("span",{class:"mopen"},"("),a("span",{class:"mclose"},")"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"=="),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8778em","vertical-align":"-0.1944em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),a("span",{class:"mord mathnormal"},"a"),a("span",{class:"mord mathnormal"},"p"),a("span",{class:"mord mathnormal"},"a"),a("span",{class:"mord mathnormal"},"c"),a("span",{class:"mord mathnormal"},"i"),a("span",{class:"mord mathnormal"},"t"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"−"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"1")])])])]),a("li",null,"而扩容就和动态数组差不多了，定义一个长度为两倍容量的临时数组，再把队列原先的数据搬过去）如下：")],-1),O=n(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">Queue</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">private</span> <span class="token class-name">QueueBase</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
  T<span class="token operator">*</span> arr<span class="token punctuation">;</span>
  <span class="token keyword">int</span> Front<span class="token punctuation">;</span> <span class="token comment">// 记录队首的下标</span>
  <span class="token keyword">int</span> Back<span class="token punctuation">;</span> <span class="token comment">// 记录队尾的下标</span>
  <span class="token keyword">int</span> Capacity<span class="token punctuation">;</span> <span class="token comment">// 队列的当前容量</span>

  <span class="token comment">// 初始的默认容量</span>
  <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> INIT_CAPACITY <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

  <span class="token comment">// 扩容</span>
  <span class="token keyword">void</span> <span class="token function">reserve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    T<span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> T<span class="token punctuation">[</span>Capacity <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span>Front <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> Capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">swap</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp<span class="token punctuation">;</span>

    Back <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> Front <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    Capacity <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="h5">入队：</div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">full</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">reserve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  Back <span class="token operator">=</span> <span class="token punctuation">(</span>Back <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> Capacity<span class="token punctuation">;</span>
  arr<span class="token punctuation">[</span>Back<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="h5">出队：</div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Front <span class="token operator">=</span> <span class="token punctuation">(</span>Front <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> Capacity<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="h5">队首元素：</div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>T <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">[</span><span class="token punctuation">(</span>Front <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> Capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function P(Q,I){const o=p("RouterLink"),l=p("ExternalLinkIcon");return i(),r("div",null,[d,e(' @import "[TOC]" {cmd="toc" depthFrom=2 depthTo=5 orderedList=false} '),e(" code_chunk_output "),k,e(" /code_chunk_output "),h,v,g,y,b,a("ul",null,[w,x,a("li",null,[f,s("：将 "),t(o,{to:"/Language/Cpp.html#initializer-list-%E5%88%97%E8%A1%A8%E5%88%9D%E5%A7%8B%E5%8C%96"},{default:u(()=>[s("初始化列表")]),_:1}),s(" 赋值给 a")])]),_,E,a("p",null,[s("详见："),a("a",C,[s("Vecotr.hpp"),t(l)])]),B,M,a("p",null,[s("借助 Vector 或 Deque 什么的就好，就连标准库的 "),F,s(" 主要实现才不到两百行…… 详见： "),a("a",A,[s("Stack.hpp"),t(l)])]),L,a("p",null,[s("详见： "),a("a",V,[s("Queue.hpp"),t(l)])]),T,z,S,q,O])}const D=c(m,[["render",P],["__file","LinearList.html.vue"]]);export{D as default};
