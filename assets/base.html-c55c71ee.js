import{_ as o,V as c,W as l,$ as t,Z as n,a0 as s,X as p,a1 as a,D as i}from"./framework-94985248.js";const u={},r=n("p",{style:{"font-size":"32px","font-weight":"bold"}},"目录",-1),d=a('<ul><li><a href="#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">基本数据类型</a></li><li><a href="#%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5%E4%B8%8E%E5%BE%AA%E7%8E%AF">控制语句与循环</a></li><li><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2">字符串</a></li><li><a href="#%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6">表达式与运算符</a></li><li><a href="#%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2">类型转换</a></li><li><a href="#%E9%94%99%E8%AF%AF%E6%8A%9B%E5%87%BA">错误抛出</a></li><li><a href="#%E5%87%BD%E6%95%B0">函数</a><ul><li><a href="#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0">箭头函数</a></li><li><a href="#%E8%87%AA%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0">自执行函数</a></li><li><a href="#%E5%87%BD%E6%95%B0%E4%BD%9C%E7%94%A8%E5%9F%9F">函数作用域</a></li><li><a href="#call-apply-bind">call, apply, bind</a></li></ul></li></ul>',1),k=a(`<br><h2 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型" aria-hidden="true">#</a> 基本数据类型</h2><br><h2 id="控制语句与循环" tabindex="-1"><a class="header-anchor" href="#控制语句与循环" aria-hidden="true">#</a> 控制语句与循环</h2><ul><li><strong>for (.. in ..)</strong> 用下标遍历对象<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;12&#39;</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token string">&#39;avb&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> a<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>for (.. of ..)</strong> 直接遍历对象, 甚至生成器函数<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;12&#39;</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token string">&#39;avb&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> a<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h2><div class="h5">方法</div><div class="tableBox"><p><span></span></p><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;"><code>charAt()</code></td><td style="text-align:left;">返回指定位置的字符</td></tr><tr><td style="text-align:center;"><code>charCodeAt()</code></td><td style="text-align:left;">返回指定位置的字符的 Unicode 编码</td></tr><tr><td style="text-align:center;"><code>concat()</code></td><td style="text-align:left;">字符串拼接, 返回拼接得到的新字符串</td></tr><tr><td style="text-align:center;"><code>slice()</code></td><td style="text-align:left;">提取字符串的片断，并在新的字符串中返回被提取的部分</td></tr><tr><td style="text-align:center;"><code>substr()</code></td><td style="text-align:left;">从起始索引号提取字符串中指定数目的字符 (包前不包后)</td></tr><tr><td style="text-align:center;"><code>substring()</code></td><td style="text-align:left;">提取字符串中两个指定的索引号之间的字符 (包前不包后)</td></tr><tr><td style="text-align:center;"><code>indexOf()</code></td><td style="text-align:left;">返回某个指定的字符串值在字符串中首次出现的位置</td></tr><tr><td style="text-align:center;"><code>lastIndexOf()</code></td><td style="text-align:left;">从后向前搜索字符串，并从起始位置（0）开始计算返回字符串最后出现的位置</td></tr><tr><td style="text-align:center;"><code>toLowerCase()</code></td><td style="text-align:left;">把字符串转换为小写</td></tr><tr><td style="text-align:center;"><code>toUpperCase()</code></td><td style="text-align:left;">把字符串转换为大写</td></tr><tr><td style="text-align:center;"><code>match()</code></td><td style="text-align:left;">查找找到一个或多个正则表达式的匹配</td></tr><tr><td style="text-align:center;"><code>search()</code></td><td style="text-align:left;">返回字符串中第一个匹配项的索引,如果没有找到匹配项, 则返回 -1</td></tr><tr><td style="text-align:center;"><code>replace()</code></td><td style="text-align:left;">在字符串中查找匹配的子串，并替换与正则表达式匹配的子串</td></tr><tr><td style="text-align:center;"><code>split()</code></td><td style="text-align:left;">把字符串分割为字符串数组 字符串转数组</td></tr><tr><td style="text-align:center;"><code>trim()</code></td><td style="text-align:left;">去除字符串两边的空白</td></tr><tr><td style="text-align:center;"><code>localeCompare()</code></td><td style="text-align:left;">比较两个字符串的字符顺序</td></tr><tr><td style="text-align:center;"><code>formCharCode()</code></td><td style="text-align:left;">接受一个指定的 Unicode 值，然后返回一个字符串 静态方法</td></tr><tr><td style="text-align:center;"><code>valueOf()</code></td><td style="text-align:left;">返回某个字符串对象的原始值</td></tr></tbody></table></div>`,8),v={href:"https://www.jianshu.com/p/1bc145627572",target:"_blank",rel:"noopener noreferrer"},m=a(`<br><h2 id="表达式与运算符" tabindex="-1"><a class="header-anchor" href="#表达式与运算符" aria-hidden="true">#</a> 表达式与运算符</h2><h2 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h2><ul><li>转为数字：<code>Number(xx)</code>, <code>parseInt(xx, 进制)</code>, <code>parseFloat(xx)</code></li><li>转为字符串：<code>xx.toString()</code>, <code>String(xx)</code>, <code>xx + &#39;&#39;</code></li><li>转为布尔：<code>Boolean(xx)</code></li><li>转为对象：<code>new Number()</code>...</li></ul><h2 id="错误抛出" tabindex="-1"><a class="header-anchor" href="#错误抛出" aria-hidden="true">#</a> 错误抛出</h2><ul><li><p>主要还是为了即使出错了也能保证程序的运行</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>    <span class="token comment">//异常的抛出</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>    <span class="token comment">//异常的捕获与处理</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>    <span class="token comment">//结束处理</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><h3 id="箭头函数" tabindex="-1"><a class="header-anchor" href="#箭头函数" aria-hidden="true">#</a> 箭头函数</h3><p>箭头函数表达式的语法比函数表达式<strong>更简洁</strong>，并且没有自己的 <code>this</code>，<code>arguments</code>，<code>super</code> 或 <code>new.target</code>，而是指向了 <strong>父作用域</strong>。箭头函数表达式更适用于那些本来需要匿名函数的地方，并且它不能用作构造函数(new)</p><div class="h5">构造：</div><ul><li><p><strong>如</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;233&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;54f&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;23&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 一般写法：</span>
<span class="token keyword">let</span> l <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> element<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 箭头函数：</span>
<span class="token keyword">let</span> l <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">len</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> len<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出 [3, 3, 2]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>也能用上<strong>三目运算符</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">max</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//调用：</span>
<span class="token keyword">let</span> maxx <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//当然也有 Math.max();</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>递归：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">fact</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>x <span class="token operator">?</span> x <span class="token operator">*</span> <span class="token function">fact</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><blockquote><p>! 箭头函数只适合干简单事啦，尽量不用来定义函数</p></blockquote><h3 id="自执行函数" tabindex="-1"><a class="header-anchor" href="#自执行函数" aria-hidden="true">#</a> 自执行函数</h3><ul><li><p>即不用调用就能执行的函数，多为<strong>匿名函数</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 或：</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>结构</strong>   先用<code>( )</code>将函数主体括起来，末尾再加一个括号表示<strong>给函数的参数传的值</strong></p></li><li><p><strong>for 循环中的事件</strong>    JavaScript 在执行 for 循环语句时，负责给元素安装点击事件，但当用户点击元素触发事件时，for 循环语句早就执行完毕了。所以一般在事件函数中用<strong>自执行函数</strong></p></li><li><p><strong>如：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> ele<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ele<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;index is: &#39;</span> <span class="token operator">+</span> k <span class="token operator">+</span> <span class="token string">&#39;, and this ele is: &#39;</span> <span class="token operator">+</span> ele<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,14),g={href:"https://www.jianshu.com/p/c64bfbcd34c3",target:"_blank",rel:"noopener noreferrer"},b=a(`<h3 id="函数作用域" tabindex="-1"><a class="header-anchor" href="#函数作用域" aria-hidden="true">#</a> 函数作用域</h3><p>所谓作用域就是：变量在声明它们的函数体以及这个函数体嵌套的任意函数体内都是有定义的。父对象的所有变量，对子对象都是可见的，反之则不成立</p><ul><li>在 javascript 中，<code>if</code>、<code>while</code>、<code>for</code> 等代码块不能形成独立的作用域。因此，javascript 中没有块级作用域，<strong>只有函数作用域</strong></li></ul><p>但是，在 JS 中有一种特殊情况：</p><ul><li><p>如果一个变量没有使用 <strong><code>var</code></strong> 声明，window 便拥有了该属性，因此这个变量的作用域不属于某一个函数体,而是 window 对象(全局)</p><blockquote><p>即：没有 var 的变量可在函数外调用</p></blockquote></li></ul><h3 id="call-apply-bind" tabindex="-1"><a class="header-anchor" href="#call-apply-bind" aria-hidden="true">#</a> call, apply, bind</h3><p>本质上是 <strong>借用函数</strong>。例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mie <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;mie&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">money</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
    <span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>money <span class="token operator">+=</span> num<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  fish <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;fish&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">money</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fish<span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>
mie<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>fish<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fish<span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>即：</strong> <code>fun.[call | bind | apply](obj, [args])</code>。区别在于， bind 的参数必须是数组类型，bind 是返回函数但不立即执行</p>`,9);function h(f,x){const e=i("ExternalLinkIcon");return c(),l("div",null,[r,t(' @import "[TOC]" {cmd="toc" depthFrom=2 depthTo=5 orderedList=false} '),t(" code_chunk_output "),d,t(" /code_chunk_output "),k,n("blockquote",null,[n("p",null,[s("参考："),n("a",v,[s("String 对象方法总结"),p(e)])])]),m,n("blockquote",null,[n("p",null,[s("参考："),n("a",g,[s("浅谈自执行函数（立即调用的函数表达式）"),p(e)])])]),b])}const E=o(u,[["render",h],["__file","base.html.vue"]]);export{E as default};
