import{_ as o,V as c,W as l,$ as e,a0 as n,Z as t,X as d,a1 as a,D as i}from"./framework-94985248.js";const p={},r=t("p",null,[t("br"),t("p",{style:{"font-size":"32px","font-weight":"bold"}},"目录")],-1),u=a('<ul><li><a href="#%E5%88%86%E9%85%8D%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%96%B9%E5%BC%8F">分配事件处理程序的方式</a><ul><li><a href="#event">Event</a></li><li><a href="#eventtarget">EventTarget</a></li><li><a href="#%E5%B0%81%E8%A3%85%E5%90%8E%E7%9A%84-addeventlistener">封装后的 addEventListener</a></li></ul></li><li><a href="#%E9%BB%98%E8%AE%A4%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A1%8C%E4%B8%BA">默认的浏览器行为</a></li><li><a href="#ui-%E4%BA%8B%E4%BB%B6">UI 事件</a><ul><li><a href="#%E9%BC%A0%E6%A0%87%E4%BA%8B%E4%BB%B6">鼠标事件</a></li><li><a href="#%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6">键盘事件</a></li></ul></li><li><a href="#%E8%A1%A8%E5%8D%95%E4%BA%8B%E4%BB%B6">表单事件</a></li><li><a href="#%E6%A1%86%E6%9E%B6%E5%AF%B9%E8%B1%A1frameobject%E4%BA%8B%E4%BB%B6">框架/对象（Frame/Object）事件</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%94%B9%E4%BA%8B%E4%BB%B6">数据更改事件</a></li><li><a href="#%E5%8F%82%E8%80%83">参考</a></li></ul>',1),g=t("br",null,null,-1),k=a(`<p>事件 是某事发生的信号。所有的 DOM 节点都生成这样的信号（但事件不仅限于 DOM）</p><h2 id="分配事件处理程序的方式" tabindex="-1"><a class="header-anchor" href="#分配事件处理程序的方式" aria-hidden="true">#</a> 分配事件处理程序的方式</h2><ul><li><strong>而：</strong> 使用 <code>on&lt;even&gt;=function1</code> 就相当于是<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">even</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">function1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>对于文档级的处理程序 —— <strong>始终使用</strong>的是 <code>addEventListener</code><ul><li>当我们将事件处理程序分配给 <code>document</code> 对象时，我们应该始终使用 <code>addEventListener</code>，而不是 <code>document.on&lt;event&gt;</code>，因为后者会引起冲突：新的处理程序会覆盖旧的处理程序</li><li>对于实际项目来说。在 document 上有许多由代码的不同部分设置的处理程序，这是很正常的</li></ul></li></ul><h3 id="event" tabindex="-1"><a class="header-anchor" href="#event" aria-hidden="true">#</a> Event</h3><p><strong>构造函数：</strong> <code>Event(typeArg[, eventInit])</code></p><div class="h5">参数说明：</div><ul><li><code>typeArg</code> ：代表事件类型字符串，例如 keypress，click</li><li><code>eventInit</code><ul><li><code>bubbles</code> ：定义事件是否冒泡，默认为 <code>false</code></li><li><code>cancelable</code> ：定义事件是否可取消，默认为 <code>false</code></li><li><code>composed</code> ：指示事件是否会在影子 DOM 根节点之外触发侦听器。默认为 <code>false</code></li></ul></li></ul><div class="h5">方法：</div><ul><li><code>Event.preventDefault()</code> ：取消事件（如果可以取消）</li><li><code>Event.stopImmediatePropagation()</code> ：对于此特定事件，阻止所有其他侦听器被调用。这包括附加到相同元素的侦听器以及附加到稍后将遍历的元素的侦听器（例如，在捕获阶段）</li><li><code>Event.stopPropagation()</code> ：阻止事件在 DOM 中进一步传播</li></ul><h3 id="eventtarget" tabindex="-1"><a class="header-anchor" href="#eventtarget" aria-hidden="true">#</a> EventTarget</h3><p>EventTarget 是一个 DOM 接口，由可以接收事件、并且可以创建侦听器的对象实现</p><div class="h5">方法：</div><ul><li><p><code> EventTarget.removeEventListener()</code> ：EventTarget 中删除事件侦听器</p></li><li><p><code>EventTarget.dispatchEvent()</code> ：将事件分派到此 EventTarget</p></li><li><p><code>addEventListener()</code> 方法将指定的监听器注册到 <code>EventTarget</code> 上，当该对象<strong>触发指定的事件</strong>时，指定的回调<strong>函数就会被执行</strong></p><ul><li><p><strong>定义：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> listener<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>type</code>：DOM 事件 (没有 on)</li><li><code>listener</code> 函数或对象</li><li><code>capture </code> 选项有两个可能的值： <ul><li>如果为 <code>false</code>（默认值），则在<strong>冒泡阶段</strong>设置处理程序</li><li>如果为 <code>true</code>，则在<strong>捕获阶段</strong>设置处理程序</li></ul></li></ul></li><li><p>当 <code>listener</code> 为对象时：会调用对象中的 <code>handleEvent</code>函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;fish&#39;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">handleEvent</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//不能是箭头函数诶，会读取不到this</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
elem<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;even&#39;</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而且可以不用再 remove 掉 listener，还能通过<strong>赋值</strong>改变调用的函数</p></li></ul></li></ul><blockquote></blockquote><ul><li><strong>但是：</strong> 在 <code>elem.addxx(&quot;xx&quot;, (event)=&gt;{code;});</code> 中，如果 elem 的结构存在着嵌套：<code>&lt;span&gt;&lt;b&gt;mie&lt;/b&gt;&lt;/span&gt;</code>，那么，<code>even</code> 将指向的是<strong>最深</strong>一层的那个。要如期，则应该加上：<code>event.target.closest(&quot;elem&quot;)</code>，才匹配最近的祖先 <code>&lt;span&gt;</code></li></ul><blockquote></blockquote><ul><li><strong>事件阻止：</strong><ul><li><code>event.preventDefault()</code></li></ul></li></ul><h3 id="封装后的-addeventlistener" tabindex="-1"><a class="header-anchor" href="#封装后的-addeventlistener" aria-hidden="true">#</a> 封装后的 addEventListener</h3><ul><li><p><strong>码：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">on</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> evt<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> opts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token function-variable function">delegatorFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    e<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>opts<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
  el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
    evt<span class="token punctuation">,</span>
    opts<span class="token punctuation">.</span>target <span class="token operator">?</span> delegatorFn <span class="token operator">:</span> fn<span class="token punctuation">,</span>
    opts<span class="token punctuation">.</span>option <span class="token operator">||</span> <span class="token boolean">false</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token keyword">return</span> delegatorFn<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Examples：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;mie!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  user <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">on</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//默认行为：点击 user 框后输出 mie，默认 冒泡</span>
<span class="token function">on</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> fn<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;img&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//点击 user 下的 img 标签，输出 mie</span>
<span class="token function">on</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> fn<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">option</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 同默认，但是 捕获</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="默认的浏览器行为" tabindex="-1"><a class="header-anchor" href="#默认的浏览器行为" aria-hidden="true">#</a> 默认的浏览器行为</h2><p>一些常见的：</p><ul><li><code>mousedown</code> —— 开始选择（移动鼠标进行选择） 在 <code>&lt;input type=&quot;checkbox&quot;&gt;</code> 上的 <code>click</code> —— 选中 | 取消选中 的 input</li><li><code>submit</code> —— 点击 <code>&lt;input type=&quot;submit&quot;&gt;</code> 或者在表单字段中按下 Enter 键会触发该事件，之后浏览器将提交表单</li><li><code>keydown</code> —— 按下一个按键会导致将字符添加到字段，或者触发其他行为</li><li><code>contextmenu</code> —— 事件发生在鼠标右键单击时，触发的行为是显示浏览器上下文菜单 如果我们只想通过 JavaScript 来处理事件，那么所有默认行为都是可以被阻止的。 想要阻止默认行为 —— 可以使用<code> event.preventDefault()</code> 或<code> return false</code>。第二个方法只适用于通过 <code>on&lt;event&gt;</code> 分配的处理程序。 <code>addEventListener</code> 的 <code>passive: true</code> 选项告诉浏览器该行为不会被阻止。这对于某些移动端的事件（像 <code>touchstart</code> 和 <code>touchmove</code>）很有用，用以告诉浏览器在滚动之前不应等待所有处理程序完成。 如果默认行为被阻止，<code>event.defaultPrevented</code> 的值会变成 <code>true</code>，否则为 false</li></ul><h2 id="ui-事件" tabindex="-1"><a class="header-anchor" href="#ui-事件" aria-hidden="true">#</a> UI 事件</h2><h3 id="鼠标事件" tabindex="-1"><a class="header-anchor" href="#鼠标事件" aria-hidden="true">#</a> 鼠标事件</h3><div class="tableBox"><p><span></span></p><table><thead><tr><th style="text-align:center;">属性</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;"><code>click</code></td><td style="text-align:left;">当点击某个对象时调用的事件句柄。</td></tr><tr><td style="text-align:center;"><code>contextmenu</code></td><td style="text-align:left;">在点击鼠标右键打开上下文菜单时触发</td></tr><tr><td style="text-align:center;"><code>dblclick</code></td><td style="text-align:left;">当双击某个对象时调用的事件句柄。</td></tr><tr><td style="text-align:center;"><code>mousedown</code></td><td style="text-align:left;">鼠标按钮被按下。</td></tr><tr><td style="text-align:center;"><code>mouseenter</code></td><td style="text-align:left;">当鼠标指针移动到元素上时触发。</td></tr><tr><td style="text-align:center;"><code>mouseleave</code></td><td style="text-align:left;">当鼠标指针移出元素时触发</td></tr><tr><td style="text-align:center;"><code>mousemove</code></td><td style="text-align:left;">鼠标被移动。</td></tr><tr><td style="text-align:center;"><code>mouseover</code></td><td style="text-align:left;">鼠标移到某元素之上。</td></tr><tr><td style="text-align:center;"><code>mouseout</code></td><td style="text-align:left;">鼠标从某元素移开。</td></tr><tr><td style="text-align:center;"><code>mouseup</code></td><td style="text-align:left;">鼠标按键被松开。</td></tr></tbody></table></div><ul><li><p><strong>顺序：</strong> 当点击左键时，遵循 mousedown → mouseup → click 的顺序调用处理程序</p></li><li><p><strong>按键状态：</strong><code>event.button</code> 的值为 0 =&gt; 左键， 1 =&gt; 中键， 2 =&gt; 右键</p></li><li><p><strong>组合键：</strong></p><ul><li><code>shiftKey</code>：Shift</li><li><code>altKey</code>：Alt（或对于 Mac 是 Opt）</li><li><code>ctrlKey</code>：Ctrl</li><li><code>metaKey</code>：对于 Mac 是 Cmd</li></ul><p>如果在事件期间按下了相应的键，则它们为 <code>true</code></p></li><li><p><strong>坐标：</strong></p><ul><li>相对于窗口的坐标：<code>clientX</code> 和 <code>clientY</code></li><li>相对于文档的坐标：<code>pageX</code> 和 <code>pageY</code> （随滚动而变</li><li>相对于元素的坐标：<code>offsetX</code> 和 <code>offsetY</code></li></ul></li></ul><blockquote></blockquote><ul><li><strong>元素拖拽：</strong></li></ul><h3 id="键盘事件" tabindex="-1"><a class="header-anchor" href="#键盘事件" aria-hidden="true">#</a> 键盘事件</h3><p>按一个按键总是会产生一个键盘事件，无论是符号键，还是例如 Shift 或 Ctrl 等特殊按键</p><div class="h5">键盘事件：</div><ul><li><code>keydown</code> —— 在按下键时（如果长按按键，则将自动重复），</li><li><code>keyup</code> —— 释放按键时</li></ul><div class="h5">键盘事件的主要属性：</div><ul><li><code>code</code> —— “按键代码”（&quot;KeyA&quot;，&quot;ArrowLeft&quot; 等），特定于键盘上按键的物理位置</li><li>k\`ey —— 字符（&quot;A&quot;，&quot;a&quot; 等），对于非字符（non-character）的按键，通常具有与 code 相同的值</li></ul><h2 id="表单事件" tabindex="-1"><a class="header-anchor" href="#表单事件" aria-hidden="true">#</a> 表单事件</h2><div class="tableBox"><p><span></span></p><table><thead><tr><th style="text-align:center;">属性</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;"><code>blur</code></td><td style="text-align:left;">元素失去焦点时触发</td></tr><tr><td style="text-align:center;"><code>change</code></td><td style="text-align:left;">在表单元素的内容改变时触发( <code>&lt;input&gt;</code>, <code>&lt;keygen&gt;</code>, <code>&lt;select&gt;</code>, 和 <code>&lt;textarea&gt;</code>)</td></tr><tr><td style="text-align:center;"><code>focus</code></td><td style="text-align:left;">元素获取焦点时触发</td></tr><tr><td style="text-align:center;"><code>focusin</code></td><td style="text-align:left;">元素即将获取焦点时触发</td></tr><tr><td style="text-align:center;"><code>focusout</code></td><td style="text-align:left;">元素即将失去焦点时触发</td></tr><tr><td style="text-align:center;"><code>input</code></td><td style="text-align:left;">元素获取输入时触发</td></tr><tr><td style="text-align:center;"><code>reset</code></td><td style="text-align:left;">表单重置时触发</td></tr><tr><td style="text-align:center;"><code>search</code></td><td style="text-align:left;">向搜索域输入文本时触发 ( <code>&lt;input=&quot;search&quot;&gt;</code>)</td></tr><tr><td style="text-align:center;"><code>select</code></td><td style="text-align:left;">选取文本时触发 ( <code>&lt;input&gt;</code> 和<code>textarea&gt;</code>)</td></tr><tr><td style="text-align:center;"><code>submit</code></td><td style="text-align:left;">表单提交时触发</td></tr></tbody></table></div><div class="h5">访问：</div><ul><li><code>document.forms</code> 一个表单元素可以通过 <code>document.forms[name/index]</code> 访问到</li><li><code>form.elements</code> 表单元素可以通过 <code>form.elements[name/index]</code> 的方式访问，或者也可以使用 <code>form[name/index]</code>。elements 属性也适用于 <code>&lt;fieldset&gt;</code></li><li><code>element.form</code> 元素通过 form 属性来引用它们所属的表单</li><li><code>value</code> 可以被通过 <code>input.value</code> 等来获取到 <ul><li>对于单选按钮（radio button）和复选框（checkbox），可以使用 <code>input.checked</code> 来确定是否选择了一个值</li><li>对于 <code>&lt;select&gt;</code>，可以通过索引 <code>select.selectedIndex</code> 来获取它的 value，也可以通过 <code>&lt;option&gt;</code> 集合 <code>select.options</code> 来获取它的 value</li></ul></li></ul><h2 id="框架-对象-frame-object-事件" tabindex="-1"><a class="header-anchor" href="#框架-对象-frame-object-事件" aria-hidden="true">#</a> 框架/对象（Frame/Object）事件</h2><div class="tableBox"><p><span></span></p><table><thead><tr><th style="text-align:center;">属性</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;"><code>abort</code></td><td style="text-align:left;">图像的加载被中断。 ( <code>&lt;object&gt;</code>)</td></tr><tr><td style="text-align:center;"><code>beforeunload</code></td><td style="text-align:left;">在即将离开页面（刷新或关闭）时触发</td></tr><tr><td style="text-align:center;"><code>error</code></td><td style="text-align:left;">在加载文档或图像时发生错误。 ( <code>&lt;object&gt;</code>, <code>&lt;body&gt;</code>和 <code>&lt;frameset&gt;</code>)</td></tr><tr><td style="text-align:center;"><code>hashchange</code></td><td style="text-align:left;">在当前 URL 的锚部分发生修改时触发。</td></tr><tr><td style="text-align:center;"><code>load</code></td><td style="text-align:left;">一张页面或一幅图像完成加载。</td></tr><tr><td style="text-align:center;"><code>pageshow</code></td><td style="text-align:left;">在访问页面时触发</td></tr><tr><td style="text-align:center;"><code>pagehide</code></td><td style="text-align:left;">在离开当前网页跳转到另外一个页面时触发</td></tr><tr><td style="text-align:center;"><code>resize</code></td><td style="text-align:left;">窗口或框架被重新调整大小。</td></tr><tr><td style="text-align:center;"><code>scroll</code></td><td style="text-align:left;">当文档被滚动时发生的事件。</td></tr><tr><td style="text-align:center;"><code>unload</code></td><td style="text-align:left;">退出页面。 ( <code>&lt;body&gt;</code> 和 <code>&lt;frameset&gt;</code>)</td></tr></tbody></table></div><h2 id="数据更改事件" tabindex="-1"><a class="header-anchor" href="#数据更改事件" aria-hidden="true">#</a> 数据更改事件</h2><ul><li><code>change</code> 值被改变 =&gt; 对于文本输入，当失去焦点时触发</li><li><code>input</code> 文本输入的每次更改 =&gt; 立即触发，与 <code>change</code> 不同</li><li><code>cut | copy | paste</code> 剪贴/拷贝/粘贴行为 =&gt; 行为可以被阻止。<code>event.clipboardData</code> 属性可以用于访问剪贴板</li></ul><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,43),v={href:"https://www.runoob.com/jsref/dom-obj-event.html",target:"_blank",rel:"noopener noreferrer"};function h(f,m){const s=i("ExternalLinkIcon");return c(),l("div",null,[r,e(' @import "[TOC]" {cmd="toc" depthFrom=2 depthTo=5 orderedList=false} '),e(" code_chunk_output "),u,e(" /code_chunk_output "),g,n("   "),k,t("ol",null,[t("li",null,[t("a",v,[n("DOM 事件 参考"),d(s)])])])])}const y=o(p,[["render",h],["__file","Events.html.vue"]]);export{y as default};
