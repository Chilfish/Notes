import{_ as p,V as d,W as u,Z as a,X as s,Y as o,$ as e,a0 as n,a1 as c,D as l}from"./framework-94985248.js";const r="/assets/html_label-c0a8eda8.png",k="/assets/html_form-a47aabb0.png",h="/assets/html_input-9a8001c4.png",g="/assets/html_input_type-e6be3563.png",m={},f=a("p",null,[a("br"),a("p",{style:{"font-size":"32px","font-weight":"bold"}},"目录")],-1),v=c('<ul><li><a href="#%E5%85%B3%E9%94%AE%E5%AD%97%E7%BC%A9%E5%86%99">关键字缩写</a></li><li><a href="#meta-%E6%96%87%E6%A1%A3%E7%BA%A7%E5%85%83%E6%95%B0%E6%8D%AE%E5%85%83%E7%B4%A0">&lt;meta&gt; 文档级元数据元素</a></li><li><a href="#skipping">Skipping</a></li><li><a href="#%E8%A1%A8%E5%8D%95">表单</a><ul><li><a href="#%E6%A6%82%E8%BF%B0">概述</a></li><li><a href="#input">input</a></li><li><a href="#button">button</a></li><li><a href="#select">select</a></li></ul></li><li><a href="#audio">audio</a><ul><li><a href="#%E5%B1%9E%E6%80%A7">属性</a></li><li><a href="#%E6%96%B9%E6%B3%95%E4%BA%8B%E4%BB%B6">方法事件</a></li></ul></li></ul>',1),b=a("h2",{id:"关键字缩写",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#关键字缩写","aria-hidden":"true"},"#"),n(" 关键字缩写")],-1),_=a("div",{align:"center"},[a("img",{width:"90%",src:r}),a("br")],-1),E={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element",target:"_blank",rel:"noopener noreferrer"},x=c('<h2 id="meta-文档级元数据元素" tabindex="-1"><a class="header-anchor" href="#meta-文档级元数据元素" aria-hidden="true">#</a> &lt;meta&gt; 文档级元数据元素</h2><h2 id="skipping" tabindex="-1"><a class="header-anchor" href="#skipping" aria-hidden="true">#</a> Skipping</h2><h2 id="表单" tabindex="-1"><a class="header-anchor" href="#表单" aria-hidden="true">#</a> 表单</h2><h3 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h3><ul><li>表单的属性和方法</li></ul><div align="center"><img width="70%" src="'+k+`"><p> 表单 </p></div><br><ul><li><p><strong>且：</strong></p><ul><li><code>form</code> 中的 <code>method</code> 的 GET 方法通常只用于搜索查询，而不是写入数据</li><li>有 <code>name</code> 值才会才 URL 中有值传递</li></ul></li><li><p><strong>获取表单方式：</strong></p><ul><li><p>通过 id 获取。如 var form = document.getElementById(“form1”);</p></li><li><p>通过 document.forms 可以取得页面中所有的表单。如</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> firstForm <span class="token operator">=</span> document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//取得页面中的第一个表单</span>
<span class="token keyword">var</span> myForm <span class="token operator">=</span> document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span>“form2”<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//取得页面中名称为&quot;form2&quot;的表单</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="input" tabindex="-1"><a class="header-anchor" href="#input" aria-hidden="true">#</a> input</h3><ul><li><strong>定义：</strong></li></ul><div align="center"><img width="80%" src="`+h+'"><br></div><ul><li><strong>type</strong> 的类型</li></ul><div align="center"><img width="80%" src="'+g+`"><br></div><h3 id="button" tabindex="-1"><a class="header-anchor" href="#button" aria-hidden="true">#</a> button</h3><h3 id="select" tabindex="-1"><a class="header-anchor" href="#select" aria-hidden="true">#</a> select</h3><ul><li>下拉内容<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test.php<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>选一个水果：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>groups<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>groups<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>groups<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>Banana<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>Cherry<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>Lemon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="audio" tabindex="-1"><a class="header-anchor" href="#audio" aria-hidden="true">#</a> audio</h2><h3 id="属性" tabindex="-1"><a class="header-anchor" href="#属性" aria-hidden="true">#</a> 属性</h3><ul><li><strong>只读属性</strong><ul><li><code>duration</code>：获取媒体文件的播放时长，以 <code>s</code> 为单位，如果无法获取则为 <code>NaN</code>，当<strong>触发 <code>canplay</code> 事件后</strong>就可以获取当前总长度</li><li><code>paused</code>：判断是否已经暂停，返回 <code>true</code>/<code>false</code></li><li><code>ended</code>：判断是否已经播放完毕，返回 <code>true</code>/<code>false</code></li><li><code>error</code>：在发生了错误后，返回错误代码</li><li><code>currentSrc</code>：以字符串的形式发挥正在播放或已经加载的文件，对应浏览器在 <code>source</code> 元素中选择的文件</li><li><code>buffered</code>：获取当前缓冲区大小，返回 <code>TimeRanges</code> 对象</li></ul></li><li><strong>可控制属性</strong><ul><li><code>src</code>：指定音频的文件位置</li><li><code>autoplay</code>：是否自动播放</li><li><code>preload</code>：是否预加载</li><li><code>loop</code>：是否循环播放</li><li><code>controls</code>：显示或隐藏用户控制界面</li><li><code>muted</code>：设置是否静音</li><li><code>volume</code>：在 0.0 到 1.0 间的音量值，或查询当前音量值</li><li><code>currentTime</code>：以 <code>s</code> 为单位返回从开始播放到目前所花的时间，也可设置 <code>currentTime</code> 的值来跳转到特定位置</li></ul></li><li><strong>更多属性</strong><ul><li><code>audioTracks</code>：返回表示可用音频滚到的 <code>AudioTrackList</code> 对象</li><li><code>controller</code>：返回表示音频大年媒体控制器的 <code>MediaController</code> 对象</li><li><code>crossOrigin</code>：设置或返回音频的 <code>CORS</code> 设置</li><li><code>defaultMuted</code>：设置或返回音频默认是否静音</li><li><code>defaultPlaybackRate</code>：设置或返回音频的默认播放速度</li><li><code>mediaGroup</code>：设置或返回音频叔叔的美肌组合的名称</li><li><code>networkState</code>：返回音频的当前网络状态</li><li><code>playbackRate</code>：设置或返回音频的播放速度</li><li><code>seekable</code>：返回标识音频可寻址部分的 <code>TimeRanges</code> 对象</li><li><code>seeking</code>：返回用户当前收正在音频中进行查找</li><li><code>textTracks</code>：返回标识文本滚到的 <code>TextTrackList</code> 对象</li></ul></li></ul><h3 id="方法事件" tabindex="-1"><a class="header-anchor" href="#方法事件" aria-hidden="true">#</a> 方法事件</h3><ul><li><strong>方法</strong><ul><li><code>load()</code>：加载音频、视频软件</li><li><code>paly()</code>：播放</li><li><code>pause()</code>：暂停</li><li><code>canPlayType(obj)</code>：测试饭后指定指定的 <code>Mime</code> 类型的文件</li><li><code>load()</code>：重新加载音频元素</li><li><code>getStartDate()</code>：返回新的 <code>Date</code> 对象，表示当前时间线偏移量</li><li><code>fastSeek()</code>：在音频播放器中指定播放时间</li><li><code>addTextTrack()</code>：想音频添加新的文本轨道</li></ul></li><li><strong>事件</strong><ul><li><code>loadstart</code>：客户端开始请求数据</li><li><code>progress</code>：正在播放的时候不停触发，如果暂停不会触发，触发的时间间隔比较大</li><li><code>play</code>：<code>play()</code>和 <code>autopaly</code> 播放时，类似事件 <code>onplaying</code></li><li><code>pause</code>：<code>pause()</code>方法触发时</li><li><code>ended</code>：当结束播放时</li><li><code>timeupdate</code>：当前播放时间发生改变的时候，播放中常用的时间处理，如果暂停不会触发，触发的时间间隔比较小</li><li><code>canplaythrough</code>：歌曲已经载入完成</li><li><code>canplay</code>：缓冲至可播放状态，类似事件 <code>onloadedmetadata</code></li><li><code>onloadedmetadata</code>：当元数据（比如分辨率和时长）被加载时运行的脚本</li></ul></li></ul>`,21);function y(B,T){const t=l("RouterLink"),i=l("ExternalLinkIcon");return d(),u("div",null,[f,a("ul",null,[a("li",null,[s(t,{to:"/FrontEnd/CSS.html"},{default:o(()=>[n("CSS | Less")]),_:1})]),a("li",null,[s(t,{to:"/FrontEnd/JavaScript/"},{default:o(()=>[n("JavaScript.md")]),_:1})])]),e(' @import "[TOC]" {cmd="toc" depthFrom=2 depthTo=5 orderedList=false} '),e(" code_chunk_output "),v,e(" /code_chunk_output "),b,_,a("blockquote",null,[a("p",null,[n("参考字典："),a("a",E,[n("HTML 元素参考_MDN "),s(i)])])]),x])}const A=p(m,[["render",y],["__file","HTML.html.vue"]]);export{A as default};
