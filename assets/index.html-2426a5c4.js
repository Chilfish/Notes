import{_ as g,V as d,W as c,$ as t,X as r,Y as s,Z as e,a0 as o,a1 as l,F as i}from"./framework-cf51392c.js";const p={},h=t("p",null,[t("br"),t("p",{style:{"font-size":"32px","font-weight":"bold"}},"目录")],-1),u=t("strong",null,"各应用协议：",-1),_=t("li",null,"[FTP]",-1),E=t("li",null,"[套接字 Socket]",-1),B=l('<ul><li><a href="#%E6%A6%82%E8%BF%B0">概述</a></li><li><a href="#%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AE%E5%8E%9F%E7%90%86">应用层协议原理</a><ul><li><a href="#%E7%AB%AF%E7%B3%BB%E7%BB%9F%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1">端系统之间的通信</a></li><li><a href="#%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1">进程通信</a></li><li><a href="#%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AE">应用层协议</a></li></ul></li></ul>',1),P=l('<br><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p>网络应用是计算机网络存在的理由，也正是有一系列的应用需求，才会设计出相应的协议。而 <strong>应用层</strong> 是计算机网络体系结构的 <strong>最顶层</strong>，是 <strong>设计和建立计算机网络的最终目的</strong>，也是计算机网络中发展最快的</p><p>最常见的应用有如 <strong>万维网 WWW</strong>、<strong>多媒体网络（音视频等）</strong>、<strong>文件传送 FTP 和 P2P 文件共享</strong>、<strong>电子邮件</strong>、<strong>域名解析</strong> 等等</p><br><h2 id="应用层协议原理" tabindex="-1"><a class="header-anchor" href="#应用层协议原理" aria-hidden="true">#</a> 应用层协议原理</h2><p>网络应用程序运行在 <strong>处于网络边缘的不同端系统</strong> 上，通过彼此之间的通信来完成某些需求</p><p>而开发一种新的网络应用首先要考虑的问题就是：<strong>网络应用程序在各种端系统上的组织方式和他们之间的关系</strong>。目前主要有两种：</p><ul><li><strong>客户端/服务器</strong> (C/S)</li><li><strong>对等方式</strong> (P2P)</li></ul><h3 id="端系统之间的通信" tabindex="-1"><a class="header-anchor" href="#端系统之间的通信" aria-hidden="true">#</a> 端系统之间的通信</h3><div class="h5">含义：</div><p><code>主机 A 和主机 B 进行通信</code> 实际上是指：“运行在主机 A 上的某个程序和运行在主机 B 上的另一个程序进行通信”。即 <strong>主机 A 的某个进程和主机 B 上的另一个进程进行通信</strong> 。简称为 <strong>计算机之间通信</strong></p><div class="h5">客户-服务器方式</div><p>客户服务器方式（<code>Client</code>／<code>Server</code> 方式）所描述的是进程之间服务和被服务的关系。客户和服务器都是指通信中所涉及的两个应用进程， <strong>客户是请求方，服务器是提供方</strong></p><ul><li><strong>客户软件的特点：</strong> 被用户调用后运行，按需地向服务端发送请求，因此 <strong>用户程序必须知道服务器的 IP 地址</strong></li><li><strong>服务器软件的特点：</strong> 是一种专门用来提供某种服务的程序，可同时处理多个远地或本地客户的请求。 系统启动后即自动调用并<strong>一直不断地运行着</strong>，被动地<strong>等待并接受来自各地的客户的通信请求</strong>，因此服务器程序不需要知道客户程序的地址，而服务器的主机具有固定的 IP 地址</li></ul><blockquote><p><strong>注意：</strong> 客户与服务器的通信关系建立后，通信可以是双向的，客户和服务器都可以发送和接收数据</p></blockquote><p>在 C/S 模式中，数据的分发采用专门的服务器，多个客户端都从此服务器获取数据</p><ul><li><strong>优点是：</strong> 数据的一致性容易控制，系统也容易管理</li><li><strong>缺点是：</strong> 因为服务器的个数只有一个(即便有多个也非常有限)，系统容易出现单一失效点；单一服务器面对众多的客户端，由于 CPU 能力、内存大小、网络带宽的限制，可同时服务的客户端非常有限，可扩展性差</li></ul><br><div class="h5">对等连接方式</div><p><strong>对等连接</strong> (<code>peer-to-peer</code>，简写为 <strong>P2P</strong> ) 是指两个主机在通信时并不区分哪一个是服务请求方还是服务提供方</p><p>只要两个主机都运行了对等连接软件 ( P2P 软件) ，它们就可以进行<strong>平等的、对等连接通信</strong>。双方都可以下载对方已经存储在硬盘中的共享文档</p><p>在 P2P 网络中，每个节点 <strong>既可以从其他节点得到服务，也可以向其他节点提供服务</strong>。最突出的的特点之一就是它的 <strong>可拓展性</strong>，当系统每增加一个对等方时，不仅增加的是服务的请求者，同时也增加了服务的提供者， <strong>系统性能不会因规模的扩大而降低</strong></p>',23),f={href:"http://www.360doc.com/content/14/0305/17/8285430_357987074.shtml",target:"_blank",rel:"noopener noreferrer"},m={href:"https://evilpan.com/2015/10/31/p2p-over-middle-box/",target:"_blank",rel:"noopener noreferrer"},A=l('<br><h3 id="进程通信" tabindex="-1"><a class="header-anchor" href="#进程通信" aria-hidden="true">#</a> 进程通信</h3><p>而在构建网络应用程序前，还需要了解到 <strong>运行在多个端系统的程序是如何互相通信的</strong>。实际上进行通信的是 <strong>进程(process)</strong>，而不是程序，每一个运行的程序可以看做是一个进程</p><p>在两个不同端系统上的程序（如客户端上的浏览器，服务器上的处理程序），通过跨越计算机网络 <strong>交换报文(message)</strong> 而相互通信。如在浏览网页时，浏览器会向服务器发送获取网页数据的 <strong>请求报文</strong>；经过一系列传输后，服务器接收报文并处理后向浏览器发送 <strong>响应报文</strong> 和数据</p><p>在发送或接收报文之前，浏览器还得知道要 <strong>如何发送和接收</strong>，以及 <strong>报文接收方的地址</strong>：</p><div class="h5">报文发送的出入口</div><p>进程发送接收报文之前，得通过一个叫做 <strong>套接字(socket)</strong> 的软件接口才能向网络发送和接收报文。程序开发者可以通过 Socket 控制报文的应用层的一切</p><div class="h5">进程寻址</div><p>两个主机的进程之间想要通信，接收进程需要一个地址，包含了： 1. 主机的地址、2. 在目的主机中指定接收进程的标识符。在计网上这分别为 <strong>IP 地址</strong> 和 <strong>端口号</strong></p><br><h3 id="应用层协议" tabindex="-1"><a class="header-anchor" href="#应用层协议" aria-hidden="true">#</a> 应用层协议</h3><p>在发送报文之前，必须要知道该怎么去构造报文，进程要什么时候发送报文。这就必须有一个统一的规范—— <strong>应用层协议</strong>，它定义了：</p><ul><li>交换的报文类型，如请求还是响应</li><li>各种报文的语法，如报文的各个字段的描述</li><li>字段的语义</li><li>发送报文的时间、对报文的响应规则</li></ul><p>每一个不同的应用都有其对应的协议，就按 <strong>万维网 WWW</strong>、<strong>多媒体网络（音视频等）</strong>、<strong>文件传送 FTP 和 P2P 文件共享</strong>、<strong>电子邮件</strong>、<strong>域名解析</strong> 等来讲吧</p><br>',15);function b(k,v){const n=i("RouterLink"),a=i("ExternalLinkIcon");return d(),c("div",null,[h,t("ul",null,[t("li",null,[u,t("ul",null,[t("li",null,[r(n,{to:"/CSBase/Nets/Application/HTTP.html"},{default:s(()=>[o("HTTP")]),_:1})]),_,t("li",null,[r(n,{to:"/CSBase/Nets/Application/DNS.html"},{default:s(()=>[o("DNS")]),_:1})]),E])])]),e(' @import "[TOC]" {cmd="toc" depthFrom=2 depthTo=5 orderedList=false} '),e(" code_chunk_output "),B,e(" /code_chunk_output "),P,t("blockquote",null,[t("p",null,[o("更多关于 P2P："),t("a",f,[o("P2P 技术原理"),r(a)]),o("，或 "),r(n,{to:"/CSBase/Nets/Summary/P2P_backup.html"},{default:s(()=>[o("备份")]),_:1}),o("、 "),t("a",m,[o("P2P 通信原理及其实现"),r(a)])])]),A])}const F=g(p,[["render",b],["__file","index.html.vue"]]);export{F as default};
