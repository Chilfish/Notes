import{_ as l,V as i,W as u,$ as n,X as e,Y as d,Z as t,a1 as s,a0 as a,F as p}from"./framework-dc28d300.js";const r="/assets/Vue_proj-cfe7ceec.png",k={},v=n("p",null,[n("br"),n("p",{style:{"font-size":"32px","font-weight":"bold"}},"目录")],-1),m=a('<ul><li><a href="#%E5%88%9B%E5%BB%BA">创建</a><ul><li><a href="#%E5%BC%95%E7%94%A8-vuejs-%E6%96%87%E4%BB%B6">引用 vue.js 文件</a></li><li><a href="#vue-%E9%A1%B9%E7%9B%AE">Vue 项目</a><ul><li><a href="#%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE-vue-cli">构建项目 vue-cli</a></li><li><a href="#%E8%BF%90%E8%A1%8C">运行</a></li></ul></li></ul></li><li><a href="#%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95">基本语法</a><ul><li><a href="#%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95%E4%B8%8E%E6%8C%87%E4%BB%A4">模板语法与指令</a></li><li><a href="#%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A">事件绑定</a></li><li><a href="#%E8%A1%A8%E5%8D%95%E8%BE%93%E5%85%A5%E7%BB%91%E5%AE%9A">表单输入绑定</a></li><li><a href="#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">生命周期</a></li><li><a href="#%E5%93%8D%E5%BA%94%E5%BC%8F%E6%95%B0%E6%8D%AE">响应式数据</a></li><li><a href="#%E7%9B%91%E5%90%AC%E6%95%B0%E6%8D%AE">监听数据</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E7%9A%84%E8%AE%A1%E7%AE%97">数据的计算</a></li></ul></li><li><a href="#%E8%B7%AF%E7%94%B1">路由</a><ul><li><a href="#%E5%BC%95%E5%85%A5%E8%B7%AF%E7%94%B1%E4%B8%8E%E9%85%8D%E7%BD%AE">引入路由与配置</a></li><li><a href="#%E8%B7%AF%E7%94%B1%E7%9A%84%E8%B7%B3%E8%BD%AC">路由的跳转</a></li></ul></li><li><a href="#%E5%A4%9A%E7%BB%84%E4%BB%B6">多组件</a><ul><li><a href="#%E5%BC%95%E5%85%A5">引入</a></li><li><a href="#%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1">组件之间的通信</a><ul><li><a href="#%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4">父子组件之间</a></li></ul></li></ul></li><li><a href="#store">Store</a></li></ul>',1),g=a(`<br><h2 id="创建" tabindex="-1"><a class="header-anchor" href="#创建" aria-hidden="true">#</a> 创建</h2><h3 id="引用-vue-js-文件" tabindex="-1"><a class="header-anchor" href="#引用-vue-js-文件" aria-hidden="true">#</a> 引用 vue.js 文件</h3><ul><li><p>直接引用文件或是 cdn：<code>https://unpkg.com/vue@next</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;app&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//返回对象</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 函数方法</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//要挂载的HTML的元素</span>

<span class="token comment">//或：</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> vm <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>data</code> 选项是一个函数。Vue 在创建新组件实例的过程中调用此函数。它应该<strong>返回一个对象</strong>，然后 Vue 会通过响应性系统将其包裹起来，并以 <code>$data</code> 的形式存储在组件实例中</p></li><li><p><code>mount()</code> 挂载应用：应用实例必须在调用了 <code>.mount()</code> 方法后才会渲染出来。该方法接收一个“容器”参数，可以是一个实际的 DOM 元素或是一个 CSS 选择器字符串</p></li></ul><br><h3 id="vue-项目" tabindex="-1"><a class="header-anchor" href="#vue-项目" aria-hidden="true">#</a> Vue 项目</h3><h4 id="构建项目-vue-cli" tabindex="-1"><a class="header-anchor" href="#构建项目-vue-cli" aria-hidden="true">#</a> 构建项目 vue-cli</h4><ul><li><p>如果没安装，先安装 <code>vue-cli</code> 脚手架</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> @vue/cli
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>再创建项目</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>vue create <span class="token punctuation">[</span>options<span class="token punctuation">]</span> app-name

<span class="token builtin class-name">cd</span> app-name
<span class="token function">npm</span> run server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>或用 GUI 来创建</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>vue ui
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>项目文件结构</p></li></ul><div class="img" align="center"><img src="`+r+`"><p> 文件结构 </p></div><h4 id="运行" tabindex="-1"><a class="header-anchor" href="#运行" aria-hidden="true">#</a> 运行</h4><div class="h5">入口：</div><p>使用 Vue 3 的生命周期的情况下，整个组件相关的业务代码，都可以丢到 <code>setup</code> 里编写。因为在 setup 之后，其他的生命周期才会被启用</p><div class="h5">基本语法：</div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// defineComponent 可以用于 TypeScript 的类型推导，简化掉很多编写过程中的类型定义</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 业务代码写这里...</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token comment">// 需要给 template 用的数据、函数放这里 return 出去...</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用 <code>setup</code> 的情况下，请牢记一点：不能再用 <code>this</code> 来获取 Vue 实例，也就是无法通过 <code>this.xxx</code> 、 <code>this.fn()</code> 这样来获取实例上的数据，或者执行实例上的方法</li><li>在 Vue 3 的 <code>defineComponent</code> 写法里，只要你的数据要在 <code>&lt;template&gt;</code> 中使用，就必须在 <code>setup</code> 里 <code>return</code> 出去</li></ul><blockquote><p>当然，只在函数中调用到，而不需要渲染到模板里的，则无需 return</p></blockquote><ul><li><p><strong>而在新 Vue3.2：</strong> 中的语法糖，直接在 <code>script</code> 标签中插入 <code>stup</code>，就不用 <code>return</code> 回去了，同时，脚本的变量什么的都可以被 <code>&lt;template&gt;</code> 获取</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token string">&#39;Hello!&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>log<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><br><h2 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法" aria-hidden="true">#</a> 基本语法</h2><p>可以理解为 客户端的 HTML 元素是要先经过服务端渲染(编译) <code>Vue.js</code> 后才呈现的，所以客户端并不会显示 Vue 的内容</p><h3 id="模板语法与指令" tabindex="-1"><a class="header-anchor" href="#模板语法与指令" aria-hidden="true">#</a> 模板语法与指令</h3><p><strong>文本插值</strong>：<code>{{...}}</code> 标签的内容将会被替代为对应组件实例中 <code>message</code> 属性的值，如果 <code>message</code> 属性的值发生了改变，<code>{{...}}</code> 标签内容也会更新</p><p><strong>指令：</strong> 以 <code>v-*</code>为格式的 attribute 被称为一个 Vue 指令，用来操作 DOM</p><ul><li><code>v-html=&quot;&quot;</code>： 转译输出 HTML 标签<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>rawHtml<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rawHtml</span><span class="token operator">:</span> <span class="token string">&#39;&lt;span style=&quot;color:red&quot;&gt;mie&lt;/span&gt;&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><code>v-bind:属性名=&quot;&quot;</code>，如 <code>:id=&quot;dynId&quot;</code> | <code>:href=&quot;url&quot;</code>，实现动态的属性值 <ul><li>绑定<strong>多类型</strong>时用对象：<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>obj<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">obj</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;mie&#39;</span><span class="token punctuation">,</span>
      <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&#39;haha btns&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>还能使用 js 表达式 (而不是语句)：<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\`list-\${ids}\`<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- return {ids: xxx} --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li>当绑定 class 为对象时，根据 value 的<strong>布尔值</strong>决定是否带有该 key<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>classObj<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">classObj</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">active</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token literal-property property">err</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 最终的结果是 &lt;div class=&quot;active&quot;&gt;&lt;/div&gt; --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><code>v-if=&quot;&quot;</code>：根据返回的布尔值来决定该元素是否展示 —— false 时直接就变成了注释 <code>&lt;!-- --&gt;</code><ul><li>也有 <code>v-if-else=&quot;&quot;</code> 和 <code>v-else=&quot;&quot;</code></li></ul></li><li><code>v-show=&quot;&quot;</code>：同上，但 false 时是 <code>display:none</code></li><li><code>v-on=&quot;&quot;</code>：监听 DOM 事件，简写：<code>&lt;p @click=&quot;fun&quot;&gt;&lt;/p&gt;</code></li><li><code>v-for=&quot;(ele, index) in items&quot;</code>：循环渲染，相当于是 <code>forEach</code><ul><li>也能改为 <code>of</code></li><li>但为了避免重复渲染，要加属性：<code>:key=&quot;index&quot;</code></li><li>循环对象时：<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(value, key, index) in items<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  {{key}}: {{value}}, index: {{index}}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>循环范围：<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>n in x<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{n}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><code>:style</code>：传对象插入样式，多个时传对象数组<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span>
  <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{
    fontSize: &#39;13px&#39;, //直接用的话要用小驼峰命名
    &#39;line-height&#39;: 2, //不然就单引号括起来
    color: &#39;#ff0000&#39;,
    textAlign: &#39;center&#39;
  }<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">&gt;</span></span>
  Hello World!
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="事件绑定" tabindex="-1"><a class="header-anchor" href="#事件绑定" aria-hidden="true">#</a> 事件绑定</h3><p>通过由点 <code>.</code> 表示的指令后缀来调用修饰符:</p><ul><li><code>.stop</code> - 阻止冒泡</li><li><code>.prevent</code> - 阻止默认事件</li><li><code>.capture</code> - 阻止捕获</li><li><code>.self</code> - 只监听触发该元素的事件</li><li><code>.once</code> - 只触发一次</li><li><code>.left</code> - 左键事件</li><li><code>.right</code> - 右键事件</li><li><code>.middle</code> - 中间滚轮事件</li></ul><h3 id="表单输入绑定" tabindex="-1"><a class="header-anchor" href="#表单输入绑定" aria-hidden="true">#</a> 表单输入绑定</h3><p><code>&lt;input v-model=&quot;text&quot;&gt;</code></p><p><code>v-model</code> 还可以用于各种不同类型的输入。它会根据所使用的元素自动扩展到不同的 DOM 属性和事件组合：</p><ul><li>文本类型的 <code>&lt;input&gt;</code> 和 <code>&lt;textarea&gt;</code> 元素会使用到 <code>value</code> 属性和 <code>input</code> 事件；</li><li><code>&lt;input type=&quot;checkbox&quot;&gt;</code> 和 <code>&lt;input type=&quot;radio&quot;&gt;</code> 使用 <code>checked</code> 属性和 <code>change</code> 事件；</li><li><code>&lt;select&gt;</code> 使用的 <code>value</code> 作为 <code> prop</code>，<code>change </code> 作为事件   </li></ul><div class="h5">文本：</div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mes<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  mes is {{mes}}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>复选框：</strong> <code>checkedNames</code> 数组将始终包含来自当前选中框的值</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>Checked names: {{ checkedNames }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkbox<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jack<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Jack<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkedNames<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jack<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Jack<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkbox<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>john<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>John<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkedNames<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>john<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>John<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">checkedNames</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="h5">下拉框：</div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Selected: {{ selected }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>选项：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selected<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>option in options<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>option.value<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    {{ option.text }}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h3><ul><li><code>setup()</code> : 开始创建组件之前，在 <code>beforeCreate</code> 和 <code>created</code> 之前执行，创建的是 <code>data</code> 和 <code>method</code></li><li><code>onBeforeMount()</code> : 组件挂载到节点上之前执行的函数；</li><li><code>onMounted()</code> : 组件挂载完成后执行的函数；</li><li><code>onBeforeUpdate()</code>: 组件更新之前执行的函数；</li><li><code>onUpdated()</code>: 组件更新完成之后执行的函数；</li><li><code>onBeforeUnmount()</code>: 组件卸载之前执行的函数；</li><li><code>onUnmounted()</code>: 组件卸载完成后执行的函数；</li><li><code>onActivated()</code>: 被包含在 <code>&lt;keep-alive&gt;</code> 中的组件，会多出两个生命周期钩子函数，被激活时执行；</li><li><code>onDeactivated()</code>: 比如从 A 组件，切换到 B 组件，A 组件消失时执行；</li><li><code>onErrorCaptured()</code>: 当捕获一个来自子孙组件的异常时激活钩子函数</li></ul><blockquote><p>PS： 使用<code>&lt;keep-alive&gt;</code> 组件会将数据保留在内存中，比如我们不想每次看到一个页面都重新加载数据，就可以使用<code>&lt;keep-alive&gt;</code> 组件解决 在 Vue3 里， 每个生命周期函数都要先导入才可以使用，并且所有生命周期函数统一放在 <code>setup</code> 里运行</p></blockquote><h3 id="响应式数据" tabindex="-1"><a class="header-anchor" href="#响应式数据" aria-hidden="true">#</a> 响应式数据</h3><p>从返回的数据实时更新</p>`,42),h=n("strong",null,"ref：",-1),b=n("code",null,"ref",-1),f=n("code",null,"<>",-1),q=n("code",null,"ref API",-1),E=a(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 单类型</span>
<span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ref</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;Hello World!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 多类型</span>
<span class="token keyword">const</span> phoneNumber <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ref</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">13800138000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 数字数组</span>
<span class="token keyword">const</span> uids <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ref</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><strong>但是：</strong>`,2),x=a("<li>定义<strong>挂载节点</strong>后，也是必须通过 <code>xxx.value</code> 才能正确操作到挂载的 <code>DOM</code> 元素或组件（详见下方的变量的读取与赋值）</li><li>请保证视图渲染完毕后，再执行 DOM 或组件的相关操作，需要放到生命周期的 <code>onMounted</code> 或者 <code>nextTick</code> 函数里</li><li>该变量必须 <code>return</code> 出去才可以给到 <code>template</code> 使用（这一点是 3.x 生命周期的硬性要求，子组件的数据和方法如果要给父组件操作，也要 return 出来才可以）</li>",3),y={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model#html_%E5%85%83%E7%B4%A0%E6%8E%A5%E5%8F%A3",target:"_blank",rel:"noopener noreferrer"},B=n("li",null,[s("读取任何 ref 对象的值都"),n("strong",null,"必须"),s("通过 "),n("code",null,"xxx.value"),s(" 才可以正确获取到")],-1),w=a(`<br><ul><li><strong>reactive:</strong> <code>reactive</code> 是继 <code>ref</code> 之后最常用的一个响应式 API 了，相对于 <code>ref</code>，它的局限性在于只适合对象、数组 定义和使用与 ref 差不多，<strong>但：</strong><ul><li>在 2.x 的时候，在操作数组时，完全可以和普通数组那样随意的处理数据的变化，依然能够保持响应性</li><li>但在 3.x ，如果使用 <code>reactive</code> 定义数组，则不能这么搞了，必须只使用那些不会改变引用地址的操作</li></ul></li></ul><br><ul><li><p><strong>所以：</strong> 为了使用方便的同时又能响应式修改数据，就有了：</p><ul><li><p><code>toRef</code> 创建一个新的 <code>ref</code> 变量，转换 <code>reactive</code> 对象的某个字段为 <code>ref</code> 变量</p><ul><li>在 <code>toRef</code> 的过程中，如果使用了原对象上面不存在的 <code>key</code> ，那么定义出来的变量的 <code>value</code> 将会是 <code>undefined</code> 如果你对这个不存在的 <code>key</code> 的 <code>ref</code> 变量，进行了 <code>value</code> 赋值，那么原来的对象也会同步增加这个 <code>key</code>，其值也会同步更新</li></ul></li><li><p><code>toRefs</code> 创建一个新的对象，它的每个字段都是 <code>reactive</code> 对象各个字段的 <code>ref</code> 变量。本身是个普通对象，但是它的每个字段，都是与原来关联的 <code>ref</code> 变量</p></li></ul></li></ul><blockquote><p>一般是，先用 <code>ref</code> 定义一个响应式数据，再转为 <code>reactive</code> 进行使用</p></blockquote><h3 id="监听数据" tabindex="-1"><a class="header-anchor" href="#监听数据" aria-hidden="true">#</a> 监听数据</h3><p>监听数据变化也是组件里的一项重要工作，比如监听路由变化、监听参数变化等等</p><ul><li><p><strong>语法：</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> watch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token function">watch</span><span class="token punctuation">(</span>
  source<span class="token punctuation">,</span> <span class="token comment">// 必传，要监听的数据源</span>
  callback <span class="token comment">// 必传，监听到变化后要执行的回调函数</span>
  <span class="token comment">// options // 可选，一些监听选项</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>监听的数据源源：</strong> 要想定义的 <code>watch</code> 能够做出预期的行为，数据源必须具备<strong>响应性</strong>或者是一个 <strong><code>getter</code></strong> ，如果只是通过 <code>let</code> 定义一个普通变量，然后去改变这个变量的值，这样是无法监听的</p><ul><li><code>getter</code>函数：<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> userInfo<span class="token punctuation">.</span>name     <span class="token comment">// 只监听 name 的变化</span>
<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>userInfo <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 监听整个对象的变化</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>监听的回调函数：</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 参数：</span>
<span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;打印变化前后的值&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> oldValue<span class="token punctuation">,</span> newValue <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>批量监听：</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">watch</span><span class="token punctuation">(</span>
  <span class="token comment">// 数据源改成了数组</span>
  <span class="token punctuation">[</span>message<span class="token punctuation">,</span> index<span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// 回调的入参也变成了数组，每个数组里面的顺序和数据源数组排序一致</span>
  <span class="token punctuation">(</span><span class="token punctuation">[</span>newMessage<span class="token punctuation">,</span> newIndex<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>oldMessage<span class="token punctuation">,</span> oldIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;message 的变化&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> newMessage<span class="token punctuation">,</span> oldMessage <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;index 的变化&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> newIndex<span class="token punctuation">,</span> oldIndex <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>监听的选项：</strong> 传入一个对象</p><table><thead><tr><th>选项</th><th>类型</th><th>默认值</th><th>可选值</th><th>作用</th></tr></thead><tbody><tr><td>deep</td><td>boolean</td><td>false</td><td>true | false</td><td>是否进行深度监听</td></tr><tr><td>immediate</td><td>boolean</td><td>false</td><td>true | false</td><td>是否立即执行监听回调</td></tr><tr><td>flush</td><td>string</td><td>&#39;pre&#39;</td><td>&#39;pre&#39; | &#39;post&#39; | &#39;sync&#39;</td><td>控制监听回调的调用时机</td></tr><tr><td>onTrack</td><td>(e) =&gt; void</td><td></td><td></td><td>在数据源被追踪时调用</td></tr><tr><td>onTrigger</td><td>(e) =&gt; void</td><td></td><td></td><td>在监听回调被触发时调用</td></tr></tbody></table><ul><li><code>deep</code>： <code>deep</code> 选项接受一个布尔值，可以设置为 <code>true</code> 开启深度监听，或者是 <code>false</code> 关闭深度监听，默认情况下这个选项是 <code>false</code> 关闭深度监听的，但也存在特例 (<code>reactive</code>) 设置为 <code>false</code> 的情况下，如果直接监听一个响应式的 <strong>引用类型</strong> 数据（e.g. <code>Object</code> 、 <code>Array</code> … ），虽然它的属性的值有变化，但对其本身来说是不变的，所以不会触发 <code>watch</code> 的 <code>callback</code> 。这时候要手动启用 <code>deep</code></li></ul></li><li><p><strong>watchEffect：</strong> 传入一个回调函数</p><ul><li>和 <code>watch</code> 的区别 —— 虽然理论上 <code>watchEffect</code> 是 <code>watch</code> 的一个简化操作，可以用来代替 <strong>批量监听</strong> ，但它们也有一定的区别： <ul><li><code>watch</code> 可以访问侦听状态变化前后的值，而 <code>watchEffect</code> 没有</li><li><code>watch</code> 是在属性改变的时候才执行，而 <code>watchEffect</code> 则默认会执行一次，然后在属性改变的时候也会执行 也就是：(被监听的数据)初定义执行，变化时执行</li><li>而且不支持 <code>deep</code> 和 <code>immediate</code></li></ul></li><li>同时，操作 <code>reactive</code> 的引用类型的数据时，要转换下：<code>{ ...userInfo }</code></li></ul></li></ul><h3 id="数据的计算" tabindex="-1"><a class="header-anchor" href="#数据的计算" aria-hidden="true">#</a> 数据的计算</h3><p>只要原始数据没有发生改变，多次访问 <code>computed</code> ，都是会立即返回之前的计算结果，而不是再次执行函数；而普通的 function 调用多少次就执行多少次，每调用一次就计算一次</p><ul><li><strong>用法：</strong><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> fullName <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name1<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name2<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><strong>取值：</strong><ul><li>定义出来的 <code>computed</code> 变量，和 <code>ref</code> 变量的用法一样，也是需要通过 <code>.value</code> 才能拿到它的值</li><li>但是区别在于， <code>computed</code> 的 <code>value</code> 是只读的</li></ul></li><li><strong>但：</strong> 只会更新响应式数据的计算 假设要获取当前的时间信息，因为<em>不是</em>响应式数据，所以这种情况下就需要用普通的<em>函数</em>去获取返回值，才能拿到最新的时间</li><li>而要<strong>改变</strong>时：使用 <code>setter</code> 函数<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> fullName <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// getter我们还是返回一个拼接起来的全名</span>
  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>firstName<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>lastName<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// setter这里我们改成只更新firstName，注意参数也定义TS类型</span>
  <span class="token function">set</span><span class="token punctuation">(</span>newFirstName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    firstName<span class="token punctuation">.</span>value <span class="token operator">=</span> newFirstName<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><strong>而且：</strong> <code>computed</code> 只支持 <code>get()</code> 和 <code>set()</code> 函数</li></ul><h2 id="路由" tabindex="-1"><a class="header-anchor" href="#路由" aria-hidden="true">#</a> 路由</h2><p>像 Vue 工程，可以通过配置一个生态组件，来实现只用一个 html ，却能够完成多个站内页面渲染、跳转的功能。这个生态组件，就是<strong>路由</strong></p><h3 id="引入路由与配置" tabindex="-1"><a class="header-anchor" href="#引入路由与配置" aria-hidden="true">#</a> 引入路由与配置</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createRouter<span class="token punctuation">,</span> createWebHistory<span class="token punctuation">,</span> RouteRecordRaw <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-router&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 路由树的配置</span>
<span class="token keyword">const</span> routes<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>RouteRecordRaw<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    path<span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">&#39;home&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 访问的路径就是 domain/home</span>
    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: &quot;home&quot; */</span> <span class="token string">&#39;@views/home.vue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  history<span class="token operator">:</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BASE_URL</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  routes<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> router<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="路由的跳转" tabindex="-1"><a class="header-anchor" href="#路由的跳转" aria-hidden="true">#</a> 路由的跳转</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 解析成 &lt;a href=&quot;/home&quot;&gt;&lt;/a&gt; --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/home<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ path: &#39;/home&#39; }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ name: &#39;home&#39; }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>User<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 带查询参数，下面的结果为 \`/register?plan=private\` --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ path: &#39;/register&#39;, query: { plan: &#39;private&#39; }}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  Register
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="多组件" tabindex="-1"><a class="header-anchor" href="#多组件" aria-hidden="true">#</a> 多组件</h2><p>思想上是将页面（或要复用的区域）划分为多个组件，每个区域就是一个组件单元</p><h3 id="引入" tabindex="-1"><a class="header-anchor" href="#引入" aria-hidden="true">#</a> 引入</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- app.vue --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fish-bar</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fish-bar</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> FishBar <span class="token keyword">from</span> <span class="token string">&#39;cp/FishBar/index.vue&#39;</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- FishBar/index.vue --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>This is fish-bar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="组件之间的通信" tabindex="-1"><a class="header-anchor" href="#组件之间的通信" aria-hidden="true">#</a> 组件之间的通信</h3><p>通信是指组之间的数据联系</p><h4 id="父子组件之间" tabindex="-1"><a class="header-anchor" href="#父子组件之间" aria-hidden="true">#</a> 父子组件之间</h4><ul><li><p>通常的方法有：</p><table><thead><tr><th>方案</th><th>父组件向子组件</th><th>子组件向父组件</th></tr></thead><tbody><tr><td>props / emits</td><td>props</td><td>emits</td></tr><tr><td>v-model / emits</td><td>v-model</td><td>emits</td></tr><tr><td>ref / emits</td><td>ref</td><td>emits</td></tr><tr><td>provide / inject</td><td>provide</td><td>inject</td></tr><tr><td>EventBus</td><td>emit / on</td><td>emit / on</td></tr><tr><td>Vuex</td><td>-</td><td>-</td></tr></tbody></table></li><li><p><code>props</code> / <code>emits</code>：这是 Vue 跨组件通信最常用，也是基础的一个方案，它的通信过程是：</p><ul><li><code>Father.vue</code> 通过 <code>prop</code> 向 <code>Child.vue</code> 传值（可包含父级定义好的函数）</li><li><code>Child.vue</code> 通过 <code>emit</code> 向 <code>Father.vue</code> 触发父组件的事件执行</li></ul></li></ul><h2 id="store" tabindex="-1"><a class="header-anchor" href="#store" aria-hidden="true">#</a> Store</h2>`,26);function A(_,j){const o=p("RouterLink"),c=p("ExternalLinkIcon");return i(),u("div",null,[v,n("ul",null,[n("li",null,[e(o,{to:"/FrontEnd/Vue/ShoppingCart.demo.html"},{default:d(()=>[s("vite 初体验")]),_:1})])]),t(' @import "[TOC]" {cmd="toc" depthFrom=2 depthTo=5 orderedList=false} '),t(" code_chunk_output "),m,t(" /code_chunk_output "),g,n("ul",null,[n("li",null,[h,s(" 但是在使用 "),b,s(" 时，不能这样子声明，会报错，正确的声明方式应该是使用 "),f,s(" 来包裹类型定义，紧跟在 "),q,s(" 之后："),E,n("ul",null,[x,n("li",null,[s("当变量是 DOM 时，类型应该是 "),n("a",y,[s("HTML 元素"),e(c)])]),B])])]),w])}const C=l(k,[["render",A],["__file","index.html.vue"]]);export{C as default};
