import{_ as l,V as c,W as o,Z as t,$ as s,a0 as n,X as p,a1 as a,F as i}from"./framework-cf51392c.js";const u={},r=s("p",null,[s("br"),s("p",{style:{"font-size":"32px","font-weight":"bold"}},"目录")],-1),d=a('<ul><li><a href="#%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95">基础语法</a><ul><li><a href="#java-%E6%A6%82%E8%BF%B0">Java 概述</a><ul><li><a href="#%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86">工作原理</a></li><li><a href="#%E7%AC%AC%E4%B8%80%E8%A1%8C-java">第一行 Java</a></li></ul></li><li><a href="#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">数据类型</a><ul><li><a href="#%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B">基本类型</a></li><li><a href="#%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">引用数据类型</a><ul><li><a href="#%E6%95%B0%E7%BB%84">数组</a></li><li><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2">字符串</a></li></ul></li></ul></li><li><a href="#%E4%BF%AE%E9%A5%B0%E7%AC%A6">修饰符</a></li><li><a href="#%E5%87%BD%E6%95%B0%E6%96%B9%E6%B3%95">函数方法</a></li></ul></li><li><a href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1">面向对象</a><ul><li><a href="#%E5%A4%9A%E6%80%81">多态</a></li><li><a href="#%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3">抽象类与接口</a></li><li><a href="#%E5%86%85%E9%83%A8%E7%B1%BB">内部类</a></li><li><a href="#%E5%B8%B8%E8%A7%81%E7%B1%BB">常见类</a><ul><li><a href="#object-%E7%B1%BB">Object 类</a></li></ul></li></ul></li></ul>',1),m=a(`<h2 id="基础语法" tabindex="-1"><a class="header-anchor" href="#基础语法" aria-hidden="true">#</a> 基础语法</h2><h3 id="java-概述" tabindex="-1"><a class="header-anchor" href="#java-概述" aria-hidden="true">#</a> Java 概述</h3><h4 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理" aria-hidden="true">#</a> 工作原理</h4><h4 id="第一行-java" tabindex="-1"><a class="header-anchor" href="#第一行-java" aria-hidden="true">#</a> 第一行 Java</h4><p>Java 是完全面向对象的语言，文件名与类名相同，且首字母通常大写。用 <code>javac *.java</code> 将 <code>*.java</code> 文件编译后得到二进制文件 <code>*.class</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fish</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> str <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h3><h4 id="基本类型" tabindex="-1"><a class="header-anchor" href="#基本类型" aria-hidden="true">#</a> 基本类型</h4><p>还是 <code>int</code>、<code>float</code>、<code>String</code>、<code>char</code>、<code>boolean</code>，<strong>常量</strong>为 <code>final</code></p>`,9),k=s("li",null,[s("strong",null,"整形："),s("ul",null,[s("li",null,[n("范围： "),s("code",null,"byte"),n("： "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",null,"±"),s("msup",null,[s("mn",null,"2"),s("mn",null,"7")]),s("mo",null,"−"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"\\pm2^7-1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"±"),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"7")])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),n(" 、 "),s("code",null,"short"),n("： "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",null,"±"),s("msup",null,[s("mn",null,"2"),s("mn",null,"15")]),s("mo",null,"−"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"\\pm2^{15}-1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"±"),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"15")])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),n(" 、 "),s("code",null,"int"),n("： "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",null,"±"),s("msup",null,[s("mn",null,"2"),s("mn",null,"31")]),s("mo",null,"−"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"\\pm2^{31}-1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"±"),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"31")])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),n(" 、"),s("code",null,"long"),n("： "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",null,"±"),s("msup",null,[s("mn",null,"2"),s("mn",null,"63")]),s("mo",null,"−"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"\\pm2^{63}-1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"±"),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"63")])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])])]),s("li",null,[n("特殊表示：长数字可以用下划线分隔： "),s("code",null,"int a = 2_0000_0000"),n("，"),s("code",null,"0x"),n("开头表十六进制，"),s("code",null,"0b"),n("开头表示二进制")])])],-1),h=s("li",null,[s("strong",null,"浮点型："),s("ul",null,[s("li",null,[n("范围："),s("code",null,"float"),n("： "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",null,"±"),s("mn",null,"3.4"),s("mo",null,"×"),s("mn",null,"1"),s("msup",null,[s("mn",null,"0"),s("mn",null,"38")])]),s("annotation",{encoding:"application/x-tex"},"\\pm 3.4 \\times 10^{38}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"±"),s("span",{class:"mord"},"3.4"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8141em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mord"},[s("span",{class:"mord"},"0"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"38")])])])])])])])])])])]),n(" 、"),s("code",null,"double"),n("： "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",null,"±"),s("mn",null,"1.79"),s("mo",null,"×"),s("mn",null,"1"),s("msup",null,[s("mn",null,"0"),s("mn",null,"308")])]),s("annotation",{encoding:"application/x-tex"},"\\pm 1.79 \\times 10^{308}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"±"),s("span",{class:"mord"},"1.79"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8141em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mord"},[s("span",{class:"mord"},"0"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"308")])])])])])])])])])])])]),s("li",null,[n("表示："),s("code",null,"float"),n(" 类型要以 "),s("code",null,"f"),n(" 结尾，默认是 "),s("code",null,"double")])])],-1),v=s("strong",null,"单字符：",-1),g=s("li",null,[n("16 位 Unicode 字符集，编码方式为 "),s("strong",null,"UTF-16BE")],-1),b=s("code",null,"UTF-16",-1),y=s("code",null,"Unicode",-1),f={href:"http://www.chi2ko.com/tool/CJK.htm",target:"_blank",rel:"noopener noreferrer"},w=s("li",null,[n("使用 "),s("code",null,"''"),n(" 括起来")],-1),x=a(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 使用单个字符</span>
<span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token number">65</span><span class="token punctuation">;</span> <span class="token comment">// 使用十进制的整数（Unicode 值），[0, 65535]</span>
<span class="token keyword">char</span> c3 <span class="token operator">=</span> <span class="token char">&#39;\\u0061&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 使用十六进制的整数，格式&#39;\\uXXXX&#39;，(&#39;\\u0000&#39;~&#39;\\u00FF&#39;)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),E=a(`<h4 id="引用数据类型" tabindex="-1"><a class="header-anchor" href="#引用数据类型" aria-hidden="true">#</a> 引用数据类型</h4><p>分为 <strong>类</strong>、<strong>接口</strong>、<strong>数组</strong></p><h5 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h5><ul><li><strong>创建：</strong><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//指定长度但不能初始化</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">233</span><span class="token punctuation">,</span> <span class="token number">455</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 初始化并推断长度</span>
<span class="token comment">// 或直接地：</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">233</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 而字符串数组：</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;fish&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mie&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>特性：</strong> 数组是引用型数据，直接用等号赋值数组时，两者指向同一个地址</li><li><strong>java.util.Arrays 中的类方法：</strong><ul><li><code>String toString(Object[] arr)</code>：将 a 数组转换成一个字符串，括在方括号（<code>[]</code>）中，相邻元素用字符 <code>, </code>（逗号加空格）分隔</li><li><code>void sort(Object[] a)</code>：根据元素的自然顺序对指定对象数组按升序进行排序，数组中的所有元素都必须实现 <code>Comparable </code>接口 （<code>jdk1.7</code> 后，对于原始数据类型，使用双轴快速排序（<code>Dual-Pivot QuickSort</code>），对于对象数据类型，使用 <code>TimSort</code>）</li><li><code>void sort(T[] a, Comparator&lt;? super T&gt; c)</code>：根据指定比较器产生的顺序对指定对象数组进行排序</li><li><code>void parallelSort(Object[] a)</code>：以并发的方式对 a 数组的数组元素进行排序</li><li><code>void setAll(T[] array, IntFunction&lt;T&gt; generator)</code>：使用提供的函数计算每一个元素的值，对指定数组中的所有元素进行设置</li><li><code>void parallelSetAll(T[] array, IntFunction&lt;T&gt; generator)</code>：以并发的方式，使用提供的函数计算每一个元素的值，对指定数组中的所有元素进行设置</li><li><code>type binarySearch(Object[] a, type key)</code>：使用二分法查询 key 元素值在 a 数组中出现的索引，如果 a 数组不包含 key 元素值，则返回 - (插入点 + 1)（调用该方法时要求数组中元素已经按<strong>升序排列</strong>；插入点为第一个大于 key 的元素索引）</li><li><code>boolean equals(Object[] a, Object[] a2)</code>：如果 a 数组和 a2 数组的长度相等，且 a 数组和 a2 数组的数组元素也一一相同，该方法将返回 <code>true</code></li><li><code>Object[] copyOf(Object[] original, int newLength)</code>：复制 <code>original</code> 数组，截取或用 <code>0</code>（数值类型）、<code>false</code>（布尔类型）或者 <code>null</code>（引用类型）填充，以使新数组的长度为 <code>newLength</code></li><li><code>List&lt;T&gt; asList(T... a)</code>：把一个引用类型的数组或指定个数的对象转换成固定长度的 List（<code>Arrays.ArrayList</code>），只能遍历访问该集合里的元素，不可增加、删除该集合里的元素，否则会引发 <code>UnsupportedOperationException</code> 异常（对数组元素的修改，会影响转化过来的集合）</li></ul></li></ul><h5 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h5><ul><li><strong>多行字符串：</strong> 其中共同的前置空格会被去掉<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;
        |  mie |
        |  Fish|
        |  233 |
        &quot;&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>格式化 | 模板字符串：</strong> 可以用类似 <em>C 语言</em> 的<code>printf</code>，也能用 <code>String.format(&quot;&quot;, xx)</code>：<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">&quot;&quot;&quot;
            {
                key: %s,
                value: %d
            }&quot;&quot;&quot;</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="修饰符" tabindex="-1"><a class="header-anchor" href="#修饰符" aria-hidden="true">#</a> 修饰符</h3><ul><li><strong>控制访问权限：</strong><ul><li>默认为 <code>default</code>，只能在当前类或包下的类访问</li><li><code>private</code> 只能在当前类访问</li><li><code>protected</code> 可在被继承的子类访问</li><li><code>public</code> 可以在任何地方被访问</li></ul></li><li><strong><code>static</code>：</strong><ul><li><strong>静态方法</strong><ul><li>静态方法可以直接 <strong>通过类名调用</strong>，任何对象也可以调用，因此静态方法中不存在 <code>this</code> 和 <code>super</code> 关键词</li><li>静态方法 <strong>不可以访问</strong> 所属类的实例变量和实例方法（非静态）！因为实例变量和方法都是与对象相关的，而 <strong>静态方法是独立于对象的</strong></li><li><code>static</code> 方法必须被实现，不可以抽象</li><li>静态方法 <strong>可以直接调用</strong> 同类的其他的静态成员（包括变量和方法）</li><li>虽然静态方法不可以调用非静态成员，但是对象可以调用静态方法</li></ul></li><li><strong>静态变量：</strong> 可以看作 <code>static</code> 变量为一种全局变量 <ul><li>可以被构造器和实例方法调用</li><li>属于整个类而不是某一个对象</li><li>不会被回收</li></ul></li><li><strong>静态代码块：</strong> 一段不依赖于类和方法的代码 <ul><li>静态代码块在类被加载的的时候运行且只运行一次</li><li>静态代码块<strong>优先于主函数执行</strong>。静态代码块还是写在类中，由类调用</li><li>静态代码块中的变量是局部变量，和普通方法中的变量没有区别</li></ul></li></ul></li><li><strong><code>final</code>：</strong><ul><li><code>final</code> 修饰类时，表明这个类 <strong>不能被继承</strong>。 且类中的所有成员方法都会被<strong>隐式地</strong>指定为 <code>final</code> 方法</li><li><code>final</code> 修饰方法时，表明这个方法 <strong>不能被任何子类重写</strong>，因此，如果只有在想明确禁止该方法在子类中被覆盖的情况下才将方法设置为 <code>final</code></li><li><code>final</code> 修饰变量分为两种情况，一种是修饰基本数据类型，表示数据类型的<strong>值不能被修改</strong>； 一种是修饰引用类型，表示对其初始化之后便<strong>不能再让其指向另一个对象</strong></li></ul></li><li><strong><code>this</code>：</strong><ul><li>指向对象本身，或对象中的变量</li><li><code>this(args)</code> 用于调用构造函数</li></ul></li><li><strong><code>super</code>：</strong> 和 <code>this</code> 差不多，但指向了被继承的父类。且：调用 <code>super()</code> 必须写在子类构造方法的第一行，否则编译不通过</li><li><strong><code>abstract</code>：</strong> 抽象类</li></ul><h3 id="函数方法" tabindex="-1"><a class="header-anchor" href="#函数方法" aria-hidden="true">#</a> 函数方法</h3><ul><li><strong>可变参数列表：</strong> 传入的参数个数可变，可为数组，参数最终体现的是<strong>数组</strong>类型<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      sum <span class="token operator">+=</span> num<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p> </p><h2 id="面向对象" tabindex="-1"><a class="header-anchor" href="#面向对象" aria-hidden="true">#</a> 面向对象</h2><h4 id="多态" tabindex="-1"><a class="header-anchor" href="#多态" aria-hidden="true">#</a> 多态</h4><ul><li>多态的 3 个必要<strong>条件</strong><ol><li>继承</li><li>重写</li><li><strong>父类引用指向子类对象</strong></li></ol></li><li><strong>要点：</strong><ul><li>使用父类类型的引用指向子类的对象</li><li>该引用只能调用<strong>父类中定义的方法和变量</strong></li><li>如果<strong>子类中重写了父类中的一个方法</strong>，那么在调用这个方法的时候，将会调用<strong>子类</strong>中的这个方法（动态连接、动态调用） 也就是不能被重写的不算多态 <ul><li><strong><code>static</code> 方法</strong>：因为被 <code>static</code> 修饰的方法是属于类的，而不是属于实例的</li><li><strong><code>final</code> 方法</strong>：因为被 <code>final</code> 修饰的方法无法被子类重写</li><li><strong><code>private</code> 方法和 <code>protected</code> 方法</strong>：前者是因为被 <code>private</code> 修饰的方法对子类不可见。后者是因为尽管被 <code>protected</code> 修饰的方法可以被子类见到，也可以被子类重写，但是它是无法被外部所引用的</li></ul></li><li><strong>变量不能被重写</strong>（覆盖），&quot;重写&quot; 的概念只针对方法，如果在子类中&quot;重写&quot;了父类中的变量，那么在编译时会报错</li></ul></li><li><strong>例：</strong><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 这是父类中的func2()方法，因为下面的子类中重写了该方法 ，所以在父类类型的引用中调用时，</span>
    <span class="token comment">// 这个方法将不再有效，取而代之的是将调用子类中重写的func2()方法</span>
    <span class="token keyword">void</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;AAA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>
    <span class="token comment">// func1(int i)是对func1()方法的一个 *重载*</span>
    <span class="token comment">// 由于在父类中没有定义这个方法，所以它不能被父类类型的引用调用</span>
    <span class="token comment">// 所以在下面的main方法中child.func1(233)会报错</span>
    <span class="token keyword">void</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;BBB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// func2()重写了父类Father中的func2()方法</span>
    <span class="token comment">// 如果父类类型的引用中调用了func2()方法，那么必然是子类中重写的这个方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">void</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;CCC&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// in main</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Father</span> child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 父类引用子类对象即为多态</span>
    child<span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="抽象类与接口" tabindex="-1"><a class="header-anchor" href="#抽象类与接口" aria-hidden="true">#</a> 抽象类与接口</h4><ul><li>用 <code>abstract</code> 定义抽象类</li><li>用 <code>implements</code> 使用接口</li><li>抽象类主要用来 定义父类的整体属性方法，接口是用来 拓展一些有部分共用但不是全部的新方法</li></ul><h4 id="内部类" tabindex="-1"><a class="header-anchor" href="#内部类" aria-hidden="true">#</a> 内部类</h4><h3 id="常见类" tabindex="-1"><a class="header-anchor" href="#常见类" aria-hidden="true">#</a> 常见类</h3><h4 id="object-类" tabindex="-1"><a class="header-anchor" href="#object-类" aria-hidden="true">#</a> Object 类</h4><ul><li><strong>克隆方法：</strong> 要重写 clone 函数才能实现深拷贝<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Goldfish</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Goldfish</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Goldfish</span> cloned<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            cloned <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Goldfish</span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> cloned<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,20);function B(j,_){const e=i("ExternalLinkIcon");return c(),o("div",null,[r,t(' @import "[TOC]" {cmd="toc" depthFrom=2 depthTo=5 orderedList=false} '),t(" code_chunk_output "),d,t(" /code_chunk_output "),m,s("ul",null,[k,h,s("li",null,[v,s("ul",null,[g,s("li",null,[b,n(" 使用 2 或者 4 字节表示一个字符，在 65536 以内的占两个字节，而基本上所有汉字的 "),y,n(" 编码 "),s("a",f,[n("在 19968 到 40869 之间"),p(e)]),n("，所以一个 char 类型可以存储一个汉字")]),w]),x])]),E])}const q=l(u,[["render",B],["__file","JavaSE.html.vue"]]);export{q as default};
