import{_ as c,V as d,W as p,Z as e,X as s,Y as r,a0 as n,$ as t,a1 as o,D as l}from"./framework-94985248.js";const u="/assets/CSS_write_mode-e81f298b.png",h="/assets/CSS_border-a2739753.png",v="/assets/CSS_position-3373188c.png",g={},k=e("p",null,[e("br"),e("p",{style:{"font-size":"32px","font-weight":"bold"}},"目录")],-1),m=e("strong",null,"外链：",-1),b={href:"https://juejin.cn/post/7055101823442485255",target:"_blank",rel:"noopener noreferrer"},f=o('<ul><li><a href="#css">CSS</a><ul><li><a href="#%E6%96%87%E6%9C%AC%E5%AD%97%E4%BD%93">文本字体</a></li><li><a href="#%E5%8D%95%E4%BD%8D">单位</a></li><li><a href="#background-%E8%83%8C%E6%99%AF">background 背景</a></li><li><a href="#%E5%9B%BE%E7%89%87">图片</a></li><li><a href="#%E7%9B%92%E5%AD%90">盒子</a></li><li><a href="#%E5%88%97%E8%A1%A8">列表</a></li><li><a href="#%E9%80%89%E6%8B%A9%E5%99%A8">选择器</a><ul><li><a href="#%E7%BB%84%E5%90%88%E9%80%89%E6%8B%A9%E4%B8%8E%E7%BB%A7%E6%89%BF">组合选择与继承</a></li><li><a href="#%E4%BC%AA%E7%B1%BB">伪类</a></li><li><a href="#%E4%BC%AA%E5%85%83%E7%B4%A0">伪元素</a></li></ul></li><li><a href="#%E5%B8%83%E5%B1%80%E6%96%B9%E5%BC%8F">布局方式</a><ul><li><a href="#flex-%E5%BC%B9%E6%80%A7">flex 弹性</a></li><li><a href="#grid-%E7%BD%91%E6%A0%BC">grid 网格</a></li><li><a href="#float-%E6%B5%AE%E5%8A%A8">float 浮动</a></li><li><a href="#position-%E5%AE%9A%E4%BD%8D">position 定位</a></li><li><a href="#column-%E5%A4%9A%E5%88%97%E5%B8%83%E5%B1%80">column 多列布局</a></li></ul></li><li><a href="#transition-%E8%BF%87%E6%B8%A1">transition 过渡</a><ul><li><a href="#%E5%8F%AF%E8%BF%87%E6%B8%A1%E7%9A%84%E6%A0%B7%E5%BC%8F">可过渡的样式</a></li><li><a href="#%E8%BF%87%E6%B8%A1%E5%87%BD%E6%95%B0">过渡函数</a></li></ul></li><li><a href="#animation-%E5%8A%A8%E7%94%BB">animation 动画</a><ul><li><a href="#%E5%85%B3%E9%94%AE%E5%B8%A7-keyframes-name">关键帧 @keyframes name</a></li></ul></li></ul></li><li><a href="#scss">Scss</a><ul><li><a href="#%E5%9F%BA%E7%A1%80">基础</a></li><li><a href="#%E7%BB%A7%E6%89%BF-%E5%A4%8D%E7%94%A8%E4%B8%8E%E5%AF%BC%E5%85%A5">继承 复用与导入</a></li><li><a href="#%E8%AF%AD%E5%8F%A5">语句</a></li></ul></li></ul>',1),x=o('<h2 id="css" tabindex="-1"><a class="header-anchor" href="#css" aria-hidden="true">#</a> CSS</h2><h3 id="文本字体" tabindex="-1"><a class="header-anchor" href="#文本字体" aria-hidden="true">#</a> 文本字体</h3><ul><li><p><code>line-height</code>，行间距，默认 1.2 ，当行间距等于盒子高度时，就可以使文字<strong>垂直居中</strong></p></li><li><p><code>font-weight: bold | hight</code>，字重(粗细)</p></li><li><p><code>font-size</code>，字体大小，默认 16px, 最小是 12px</p></li><li><p><code>font-family: &quot;fangsong&quot;;</code>，字体样式</p></li><li><p><code>text-decoration</code>，下划线类型</p></li><li><p><code>text-indent</code> ： 第一行文字缩进长度</p></li><li><p><code>text-shadow</code> 设置文本阴影</p></li><li><p><code>text-transform</code> 控制元素中的字母<strong>大小写</strong>规则</p><ul><li><code>none</code> 无转换</li><li><code>capitalize</code> 将每个单词的第一个字母大写</li><li><code>uppercase</code> 将所有字母大写</li><li><code>lowercase</code> 将所有字母小写</li><li><code>ful-width</code> 全角</li></ul></li><li><p><code>write-mode</code> 文字书写方向</p><div align="center"><img width="30%" src="'+u+'"><p>书写方向</p></div></li><li><p><code>white-space</code>：对文本的<strong>换行操作</strong>进行控制</p><ul><li>默认值是 <code>normal</code>，设置文本到达父元素的边界就自动换行</li><li><code>nowrap</code> 设置文本不换行，意思是文本到达边界依然会继续的由左向右平铺</li></ul></li><li><p><code>word-break</code> 属性可以控制<strong>单词或字符进行换行</strong>，默认值为 <code>normal</code>，使浏览器遵循默认的换行规则</p><ul><li><code>word-break:break-all</code>：强制换行，允许<strong>在单词内部换行</strong>，如果只写一个因为单词但是太长，用了这个属性就会强制把单词断开</li><li><code>word-break:keep-all</code>：只允许在半角空格或连字符处换行</li></ul></li><li><p><code>text-overflow</code>：规定当文本<strong>溢出</strong>时的情况：</p><ul><li><code>clip</code> 将文本裁剪</li><li><code>ellipsis</code> 显示<strong>省略符号</strong>来代表被修剪的文本</li><li><code>string</code> 使用给定的<strong>字符串</strong>来代表被修剪的文本</li></ul></li><li><p><code>word-spacing</code> 设置单词间距</p></li><li><p><code>letter-spacing</code> 设置字母间距</p></li><li><p><code>color</code>，字体颜色值</p></li><li><p><strong>对齐：</strong></p><ul><li><code> vertical-align: middle | baseline | top | ...</code>： 仅对设置 <strong>内联元素</strong> 的<strong>上下对齐方式</strong>。在父元素设置此样式时，会对 <code>inline-block</code> 和 <code>inline</code> 类型的<strong>子元素</strong>都有用，这个样式一般用做图片和文字的对齐</li><li><ul><li><code>text-align: left | right | center | justify (文字向两侧对齐)</code> , 文字的<strong>水平对齐方式</strong></li></ul></li></ul></li></ul><br><h3 id="单位" tabindex="-1"><a class="header-anchor" href="#单位" aria-hidden="true">#</a> 单位</h3><div class="h5">绝对长度：</div><ul><li>绝对长度单位是固定的，用任何一个绝对长度表示的长度都将恰好显示为这个尺寸</li><li>不建议在屏幕上使用绝对长度单位，因为屏幕尺寸变化很大。但是，如果已知输出介质，则可以使用它们，例如用于打印布局（print layout）</li></ul><div class="tableBox"><p><span></span></p><table><thead><tr><th style="text-align:left;">单位</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>cm</code></td><td style="text-align:left;">厘米</td></tr><tr><td style="text-align:left;"><code>mm</code></td><td style="text-align:left;">毫米</td></tr><tr><td style="text-align:left;"><code>in</code></td><td style="text-align:left;">英寸 (1in = 96px = 2.54cm)</td></tr><tr><td style="text-align:left;"><code>px</code></td><td style="text-align:left;">像素 (1px = 1/96th of 1in)</td></tr><tr><td style="text-align:left;"><code>pt</code></td><td style="text-align:left;">点 (1pt = 1/72 of 1in)</td></tr></tbody></table></div><ul><li><strong>像素（px）</strong> 是相对于观看设备的。对于低 dpi 的设备，1px 是显示器的一个设备像素（点）。对于打印机和高分辨率屏幕，1px 表示多个设备像素</li></ul><div class="h5">相对长度：</div><ul><li>相对长度单位规定相对于另一个长度属性的长度。相对长度单位在不同渲染介质之间缩放表现得更好</li></ul><div class="tableBox"><p><span></span></p><table><thead><tr><th style="text-align:left;">单位</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>em</code></td><td style="text-align:left;">相对于元素的字体大小（font-size）（2em 表示当前字体大小的 2 倍）</td></tr><tr><td style="text-align:left;"><code>ex</code></td><td style="text-align:left;">相对于当前字体的 x-height(极少使用)</td></tr><tr><td style="text-align:left;"><code>ch</code></td><td style="text-align:left;">相对于 &quot;0&quot;（零）的宽度</td></tr><tr><td style="text-align:left;"><code>rem</code></td><td style="text-align:left;">相对于根元素的字体大小（font-size）</td></tr><tr><td style="text-align:left;"><code>vw</code></td><td style="text-align:left;">相对于视口*宽度的 1%</td></tr><tr><td style="text-align:left;"><code>vh</code></td><td style="text-align:left;">相对于视口*高度的 1%</td></tr><tr><td style="text-align:left;"><code>vmin</code></td><td style="text-align:left;">相对于视口*较小尺寸的 1％</td></tr><tr><td style="text-align:left;"><code>vmax</code></td><td style="text-align:left;">相对于视口*较大尺寸的 1％</td></tr><tr><td style="text-align:left;"><code>%</code></td><td style="text-align:left;">相对于父元素</td></tr></tbody></table></div><ul><li>视口（Viewport）= 浏览器窗口的尺寸。如果视口宽 50 里面，则 1vw = 0.5cm</li></ul><br><h3 id="background-背景" tabindex="-1"><a class="header-anchor" href="#background-背景" aria-hidden="true">#</a> background 背景</h3><p>简写：<code>background: color | image | origin | position | repeat | size | attachment</code></p><ul><li><strong><code>size</code>：</strong><ul><li><code>contain</code>：是缩放以填充盒子，并会 <code>repeat</code></li><li><code>cover</code>：是剪裁以填充盒子</li><li>若为具体数值：百分比或长宽(拉伸), 则 <code>repeat</code> 填充盒子</li></ul></li><li><strong><code>attachment</code>：</strong><ul><li><code>scroll</code>：随整体滚动而不随图片内容</li><li><code>fixed</code>：不随任何滚动</li><li><code>local</code>：随图片内容而滚动</li></ul></li></ul><br><h3 id="图片" tabindex="-1"><a class="header-anchor" href="#图片" aria-hidden="true">#</a> 图片</h3><ul><li><code>opacity</code> , 透明度</li><li><code>object-fit</code> , 调整内容长宽比 属性可接受如下值： <ul><li><code>fill</code> - 默认值。调整替换后的内容大小，以填充元素的内容框。如有必要，将拉伸或挤压物体以适应该对象</li><li><code>contain</code> - 缩放替换后的内容以保持其纵横比，同时将其放入元素的内容框</li><li><code>cover</code> - 调整替换内容的大小，以在填充元素的整个内容框时保持其长宽比。该对象将被裁剪以适应</li><li><code>none</code> - 不对替换的内容调整大小</li><li><code>scale-down</code> - 调整内容大小就像没有指定内容或包含内容一样（将导致较小的具体对象尺寸）</li></ul></li></ul><br><h3 id="盒子" tabindex="-1"><a class="header-anchor" href="#盒子" aria-hidden="true">#</a> 盒子</h3><ul><li><strong>边框 <code>border</code>：</strong> <code>border</code> 属性是一个复合属性，可以按照 <code>border-width</code> | <code>border-style</code> | <code>border-color</code> 的顺序设置边框</li><li><code>border-radius</code> , 圆角半径</li><li><code>margin</code> , 外边距 <ul><li>当只指定一个值时，该值会统一应用到<strong>全部四个边</strong>的外边距上</li><li>指定两个值时，第一个值会应用于<strong>上边和下边</strong>的外边距，第二个值应用于<strong>左边和右边</strong></li><li>指定三个值时，第一个值应用于<strong>上边</strong>，第二个值应用于<strong>右边和左边</strong>，第三个则应用于<strong>下边</strong>的外边距</li><li>指定四个值时，依次（<strong>顺时针方向</strong>）作为上边，右边，下边，和左边的外边距</li><li>也可以单是 <code>margin-right</code>来指定</li><li><strong>居中</strong>则是 <code>margin</code>的<code>left</code>和<code>right</code>为 <strong><code>auto</code></strong>，且同时元素的<strong>宽是确定</strong>的</li></ul></li><li><code>padding</code> , 内边距</li><li><code>height</code>、<code>width</code> , 宽高</li><li>但是，如图 完整的框是指 长：<code>width + 2\\*(margin + padding + border)</code></li></ul><div align="center"><img width="50%" src="'+h+'"><p> Border </p></div><ul><li>而用了 <strong><code>box-sizing: border-box;</code></strong> 后，边距不影响宽度了（放全局）</li></ul><br><h3 id="列表" tabindex="-1"><a class="header-anchor" href="#列表" aria-hidden="true">#</a> 列表</h3><div class="h5"><code>list-style-type</code></div><ul><li><code>none</code>：不使用项目符号</li><li><code>disc</code>：实心圆</li><li><code>circle</code>：空心圆</li><li><code>square</code>：实心方块</li><li><code>decimal</code>：阿拉伯数字</li><li><code>lower-alpha</code>：小写英文字母</li><li><code>upper-alpha</code>：大写英文字母</li><li><code>lower-roman</code>：小写罗马数字</li><li><code>upper-roman</code>：大写罗马数字</li></ul><p><strong><code>list-style-image</code>：</strong> 属性用来设置对象的列表项是否<strong>图像</strong>作为项目符号</p><ul><li><code>url()</code>：指定图片的域名</li><li><code>none</code>：不指定图片符号</li></ul><p><strong><code>list-style-position</code>：</strong> 属性用来设置对象的列表序号的位置</p><ul><li><code>outside</code>：默认值,让列表符号与文字分离开</li><li><code>inside</code>：使得列表序号在文本内，可以通过控制文本来控制</li></ul><br><h3 id="选择器" tabindex="-1"><a class="header-anchor" href="#选择器" aria-hidden="true">#</a> 选择器</h3><h4 id="组合选择与继承" tabindex="-1"><a class="header-anchor" href="#组合选择与继承" aria-hidden="true">#</a> 组合选择与继承</h4><ul><li><strong>优先级：</strong> 内联 &gt; ID 选择器 &gt; 类选择器 &gt; 标签选择器</li><li><code>.class1.class2</code> ，同时包含这两个 class 的元素</li><li><code>div p {xxx}</code> ，是指以<code>div</code>父项的所有<strong>子孙项</strong><code>p</code>的样式都受 xxx 影响</li><li><code>div&gt;p {}</code> ，只有<code>div</code>的直接<strong>子项</strong><code>p</code>才算，而孙项的<code>p</code>不受影响：<code>in html： &lt;div&gt;&lt;span&gt;&lt;p&gt;</code></li><li><code>div+p{}</code> ，拥有<strong>共同父项</strong>的<code>div</code>和<code>p</code>（兄弟项），且<code>p</code>位于<code>div</code>下的<strong>第一项</strong>，<code>p</code>的样式才受影响；这时<code>div</code>的<strong>子项</strong><code>p</code>不受影响</li><li><code>div~p{}</code> ，所有与<code>div</code>互为兄弟关系的<code>p</code>都受样式影响</li><li>但还有 <strong>属性选择器</strong>： <ul><li><code>input[type=&quot;text&quot;] {}</code> ：类型为 <code>input</code> 且是<code>text</code>的样式受影响</li><li>自定义属性：如 <code>&lt;div data-123=&quot;texts&quot;&gt;&lt;/div&gt;</code> <code>-&gt;</code> <code>div[data-123] {}</code></li><li>指定 <br><table><tbody><tr><th>选择器</th><th>例子</th><th>例子描述</th></tr><tr><td><code>[<i>attribute</i>]</code></td><td>[target]</td><td>选择带有target属性的所有元素。</td></tr><tr><td><code>[<i>attribute</i>=<i>value</i>]</code></td><td>[target=_blank]</td><td>选择带有target=&quot;_blank&quot;属性的所有元素。</td></tr><tr><td><code>[<i>attribute</i>~=<i>value</i>]</code></td><td>[title~=flower]</td><td>选择title属性包含单词&quot;flower&quot;的所有元素。</td></tr><tr><td><code>[<i>attribute</i>|=<i>value</i>]</code></td><td>[lang|=en]</td><td>选择lang属性值以&quot;en&quot;开头的所有元素。</td></tr><tr><td><code>[<i>attribute</i>^=<i>value</i>]</code></td><td>a[href^=&quot;https&quot;]</td><td>选择其src属性值以&quot;https&quot;开头的每个&lt;a&gt;元素。</td></tr><tr><td><code>[<i>attribute</i>$=<i>value</i>]</code></td><td>a[href$=&quot;.pdf&quot;]</td><td>选择其src属性以&quot;.pdf&quot;结尾的所有&lt;a&gt;元素。</td></tr><tr><td><code>[<i>attribute</i>*=<i>value</i>]</code></td><td>a[href*=&quot;abc&quot;]</td><td>选择其href属性值中包含&quot;abc&quot;子串的每个&lt;a&gt;元素。</td></tr></tbody></table></li></ul></li></ul><br><h4 id="伪类" tabindex="-1"><a class="header-anchor" href="#伪类" aria-hidden="true">#</a> 伪类</h4><div class="h5">状态：</div><ul><li><code>:link</code> 超链接点击之前</li><li><code>:visited</code> 链接被访问过之后 但 <code>a</code>标签涵盖了<code>link</code>、<code>visited</code>的状态</li><li><code>:hover</code> “悬停”：鼠标放到标签上的时候</li><li><code>:active</code> “激活”： 鼠标点击标签，但是不松手时</li><li><code>:focus</code> 是某个标签获得焦点时的样式（比如某个输入框获得焦点）</li></ul><div class="h5">指定元素：</div><ul><li><code>:not</code> 一个否定伪类，用于匹配不符合参数选择器的元素</li><li><code>:first-child</code> 匹配元素的第一个子元素</li><li><code>:last-child</code> 匹配元素的最后一个子元素</li><li><code>:first-of-type</code> 表示一组兄弟元素中其类型的第一个元素</li><li><code>:last-of-type</code> 表示一组兄弟元素中其类型的最后一个元素</li><li><code>:nth-child</code> 根据元素的位置匹配一个或者多个元素，它接受一个 an+b 形式的参数</li><li><code>:nth-last-child</code> 与<code>:nth-child</code> 相似，不同之处在于它从最后一个子元素开始计数</li><li><code>:nth-of-type</code> 与 <code>nth-child</code> 相似，不同之处在于它是只匹配特定类型的元素</li><li><code>:nth-last-type</code> 与 <code>nth-of-type</code> 相似，不同之处在于它是从最后一个子元素开始计数的</li><li><code>:only-child</code> 当元素是其父元素中唯一的子元素时，<code>:only-child</code> 匹配该元素</li><li><code>:only-of-type</code> 当元素是其父元素中唯一特定类型的子元素时，<code>:only-child</code> 匹配该元素</li><li><code>:target</code> 当 url 带有瞄名称，指向文档内某个具体的元素时<code>:target</code> 匹配该元素</li></ul><div class="h5">表单：</div><ul><li><code>:checked</code> 匹配被选中的 <code>input</code> 元素，这个 <code>input</code> 元素包裹 <code>radio</code> 和 <code>checkbox</code>.</li><li><code>:default</code> 匹配默认选中的元素</li><li><code>:disabled</code> 匹配禁用的表单元素</li><li><code>:empty</code> 匹配没有子元素的元素，如果元素中含有文本节点，html 元素或者一个空格，则<code>:empty</code> 不能匹配这个元素</li><li><code>:enabled</code> 匹配没有设置 disabled 属性的表单元素</li><li><code>:in-range</code> 匹配在指定区域内元素，</li><li><code>:out-of-range</code> 匹配不在指定区域内的元素</li><li><code>:indetermimate</code> 当某组中的单选框或复选框还没有选取状态时，匹配该组中所有的单选框或复选框</li><li><code>:valid</code> 匹配条件验证正确的表单元素</li><li><code>:invalid</code> 匹配提交验证错误的表单元素</li><li><code>:optional</code> <code>:required</code> 匹配设置有无设置 <code>required</code> 属性的表单元素</li><li><code>:read-only</code> 匹配设置了只读属性的元素</li><li><code>:read-write</code> 匹配处于编辑状态的元素</li><li><code>:placeholder-shown</code> 当 <code>input</code> 设置了 <code>placeholder</code> 后，在用户输入前生效</li></ul><div class="h5">其他：</div><ul><li><code>:fullscreen</code> 全屏时触发</li></ul><br><h4 id="伪元素" tabindex="-1"><a class="header-anchor" href="#伪元素" aria-hidden="true">#</a> 伪元素</h4><ul><li><code>::first-letter</code> 选择每个元素的第一个字母</li><li><code>::first-line</code> 选择每个元素的第一行</li><li><code>::first-child</code> 选择器匹配属于任意元素的第一个<strong>子元素</strong></li><li><code>::before</code> 在每个元素之前插入内容</li><li><code>::after</code> 在每个元素之后插入内容</li><li><code>::selection</code> 用户选中的部分</li></ul>',50),y={href:"http://www.alloyteam.com/2016/05/summary-of-pseudo-classes-and-pseudo-elements/",target:"_blank",rel:"noopener noreferrer"},_=o(`<br><h3 id="布局方式" tabindex="-1"><a class="header-anchor" href="#布局方式" aria-hidden="true">#</a> 布局方式</h3><h4 id="flex-弹性" tabindex="-1"><a class="header-anchor" href="#flex-弹性" aria-hidden="true">#</a> flex 弹性</h4><div class="h5">定义：</div><p>基于一维的布局。只要给<code>flex</code>元素的父元素声明 <code>display： flex</code> ，默认地所有子元素就会排成一行，且自动分配小大以充分展示元素的内容。所以是，<strong>在父元素定义 <code>flex</code>，然后再在子元素再定义下列属性</strong></p><div class="h5">子元素的分布：</div><ul><li><code>flex-direction</code>：默认为<code>row</code> 水平排列，<code>column</code>为竖直排列。<code>flex-wrap</code>：溢出时自动换行换行 <ul><li>可以将两个属性 <code>flex-direction</code> 和 <code>flex-wrap</code> 组合为简写属性 <code>flex-flow</code>。第一个指定的值为 <code>flex-direction</code> ，第二个指定的值为 <code>flex-wrap</code>.</li></ul></li><li><code>flex-grow</code>：元素放大比例。值为 0 或 正整数(按比例分配多余的空间)</li><li><code>flex-shrink</code>：元素缩小比例。值为 1 或 0；</li><li><code>flex-basic</code>：设置子元素初始化大小，给上面两个属性分配多余空间之前，计算项目是否有多余空间，默认值为 auto,即项目本身的大小</li><li>（可简写：<code>flex: grow shrink basic</code>）</li></ul><div class="h5">子元素对齐方式：</div><p>要先定义父元素的长宽，子元素才会对齐</p><ul><li><strong><code>justify-content</code></strong> ： 属性用来使元素在<strong>主轴</strong>方向上对齐，主轴方向是通过<code>flex-direction</code> 设置的方向。初始值是<code>flex-start</code><ul><li>可分为：<code>center</code>、<code>flex-start</code>、<code>flex-end</code>、<code>stretch(在轴上撑满整个父元素)</code>、<code>space-around</code>(元素之间的距离相等)、<code>space-between</code>(元素左右的空间相等、<strong>贴边</strong>)</li></ul></li><li><strong><code>align-items</code></strong>： 属性可以使元素在<strong>交叉轴</strong>方向对齐。初始值为<code>stretch</code><ul><li>可分为：<code>center</code>、<code>flex-start</code>、<code>flex-end</code>、<code>stretch</code>、<code>baseline(基于文本内容基线)</code></li></ul></li><li><strong><code>align-content</code></strong>：当容器内为<strong>多行元素</strong>时的对齐方式，把每一行当做整体来对齐，同 items</li><li><strong><code>align-self</code></strong>：单独的对齐方式</li></ul><div class="h5">另一种居中对齐：</div><p>必须定义宽高才能 <code>auto</code></p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.par</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> xx<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> xx<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.child</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> xx<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> xx<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="grid-网格" tabindex="-1"><a class="header-anchor" href="#grid-网格" aria-hidden="true">#</a> grid 网格</h4><br><h4 id="float-浮动" tabindex="-1"><a class="header-anchor" href="#float-浮动" aria-hidden="true">#</a> float 浮动</h4><p>创建：<code>float: left | right | none (默认值) | inherit (继承父元素的浮动属性)</code></p><p>清除：<code>clear: left | right | both</code></p><br><h4 id="position-定位" tabindex="-1"><a class="header-anchor" href="#position-定位" aria-hidden="true">#</a> position 定位</h4><div class="h5">定位的属性：</div><ul><li><code>static</code> : <strong>默认</strong>的定位方式，没有特别的地方</li><li><code>relative</code> : <strong>相对定位</strong>，不添加偏移量则与 <code>static</code> 没差</li><li><code>absolute</code> : <strong>绝对定位</strong>，往上冒泡地找定位方式**不是 <code>static</code>**的祖先(父)元素，并相对于该元素绝对定位</li><li><code>fixed</code> : 相对于浏览器窗口固定</li><li><code>sticky</code> : <strong>粘性定位</strong>，当元素(滚动条)移动到预设位置时固定</li></ul><div align="center"><img width="80%" src="`+v+'"><p> position </p></div><br><h4 id="column-多列布局" tabindex="-1"><a class="header-anchor" href="#column-多列布局" aria-hidden="true">#</a> column 多列布局</h4><ul><li><code>column-count: number</code>：列数</li><li><code>column-gap: number</code>：列间间隔</li><li><code>column-rule: style color</code>：间隔样式，同<code>border</code></li><li><code>column-width: number</code>：列宽</li></ul>',27),E={href:"https://juejin.cn/post/6940627375537258527#heading-9",target:"_blank",rel:"noopener noreferrer"},w={href:"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html",target:"_blank",rel:"noopener noreferrer"},B=e("br",null,null,-1),q=e("h3",{id:"transition-过渡",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#transition-过渡","aria-hidden":"true"},"#"),n(" transition 过渡")],-1),A=e("li",null,[e("code",null,"transition-property"),n(" 指定使用过渡效果的 css 属性")],-1),$=e("li",null,[e("code",null,"transition-duration"),n(" 设置过渡动画持续时间")],-1),C=e("code",null,"transition-timing-function",-1),S=e("li",null,[e("code",null,"liner"),n(" ：匀速")],-1),F=e("li",null,[e("code",null,"ease-in"),n("：减速")],-1),z=e("li",null,[e("code",null,"ease-out"),n("：加速")],-1),D=e("li",null,[e("code",null,"ease-in-out"),n("：先加速再减速")],-1),j=e("code",null,"cubic-bezier",-1),L={href:"http://cubic-bezier.com",target:"_blank",rel:"noopener noreferrer"},V=e("li",null,[e("code",null,"transition-delay"),n(" 设置动画的延迟时间")],-1),N=e("li",null,[n("简写："),e("code",null,"transition: 属性 持续 函数 延迟")],-1),R=e("li",null,[n("transition 的优点在于简单易用，但是它有几个很大的局限 "),e("ol",null,[e("li",null,"需要事件触发，所以没法在网页加载时自动发生"),e("li",null,"是一次性的，不能重复发生，除非一再触发"),e("li",null,"只能定义开始状态和结束状态，不能定义中间状态，也就是说只有两个状态"),e("li",null,"规则，只能定义一个属性的变化，不能涉及多个属性")])],-1),T={href:"https://www.cnblogs.com/xiaohuochai/p/5347930.html",target:"_blank",rel:"noopener noreferrer"},I=o(`<br><h4 id="可过渡的样式" tabindex="-1"><a class="header-anchor" href="#可过渡的样式" aria-hidden="true">#</a> 可过渡的样式</h4><ul><li>颜色: <code>color</code> <code>border-color</code> <code>outline-color</code></li><li>位置: <code>position</code> <code>left</code> <code>right</code> <code>top</code> <code>bottom</code></li><li>长度: <ul><li><code>height</code> <code>width</code></li><li><code>border-width</code> <code>margin</code> <code>padding</code> <code>outline-width</code></li><li><code>font-size</code> <code>line-height</code> <code>text-indent</code> <code>vertical-align</code></li><li><code>border-spacing</code> <code>letter-spacing</code> <code>word-spacing</code></li></ul></li><li>数字: <code>opacity</code> <code>visibility</code> <code>z-index</code> <code>font-weight</code> <code>zoom</code></li><li>组合: <code>text-shadow</code> <code>transform</code> <code>box-shadow</code> <code>clip</code></li><li>其他: <code>gradient</code></li></ul><br><h4 id="过渡函数" tabindex="-1"><a class="header-anchor" href="#过渡函数" aria-hidden="true">#</a> 过渡函数</h4><ul><li><code>scale(value)</code> : 用于修改元素的大小。可以通过向量形式定义的缩放值来放大或缩小元素，同时可以在不同的方向设置不同的缩放值</li></ul><br><h3 id="animation-动画" tabindex="-1"><a class="header-anchor" href="#animation-动画" aria-hidden="true">#</a> animation 动画</h3><ul><li><code>animation-name</code>：none 为默认值，将没有任何动画效果，其可以用来覆盖任何动画</li><li><code>animation-duration</code>：默认值为 0，意味着动画周期为 0，也就是没有任何动画效果</li><li><code>animation-timing-function</code>：与 <code>transition-timing-function</code> 一样</li><li><code>animation-delay</code>：在开始执行动画时需要等待的时间</li><li><code>animation-iteration-count</code>：定义动画的播放次数，默认为 1，如果为 <code>infinite</code>，则无限次循环播放</li><li><code>animation-direction</code>：动画播放方向 <ul><li>默认为 <code>normal</code>，每次循环都是向前播放，（0-100）</li><li>另一个值为 <code>alternate</code>，动画播放为偶数次则向前播放，如果为基数词就反方向播放</li></ul></li><li><code>animation-state</code>：动画播放状态 <ul><li>默认为 <code>running</code>，播放</li><li><code>paused</code>，暂停</li></ul></li><li><code>animation-fill-mode</code>：定义动画开始之前和结束之后发生的操作. <ul><li>默认值为 <code>none</code>，动画结束时回到动画没开始时的状态</li><li><code>forwards</code>，动画结束后继续应用最后关键帧的位置，即保存在结束状态</li><li><code>backwards</code>，让动画回到第一帧的状态</li><li><code>both</code>：轮流应用 <code>forwards</code> 和 <code>backwards</code> 规则</li></ul></li><li>简写： <code>animation: duration | timing-function | delay | iteration-count | direction | fill-mode | play-state | name</code></li></ul><br><h4 id="关键帧-keyframes-name" tabindex="-1"><a class="header-anchor" href="#关键帧-keyframes-name" aria-hidden="true">#</a> 关键帧 @keyframes name</h4><p>在 animation 申明 name 后，再另写关键帧动画样式</p><br><h2 id="scss" tabindex="-1"><a class="header-anchor" href="#scss" aria-hidden="true">#</a> Scss</h2><h3 id="基础" tabindex="-1"><a class="header-anchor" href="#基础" aria-hidden="true">#</a> 基础</h3><div class="h5">编译：</div><ul><li><p>安装 <code>live Sass Compile</code> 插件，再点底栏的 <code>watch sass</code>。 <code>settings.json</code> 的配置：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;liveSassCompile.settings.formats&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;format&quot;</span><span class="token operator">:</span> <span class="token string">&quot;compact&quot;</span><span class="token punctuation">,</span> <span class="token comment">//可定制的出口 CSS样式</span>
      <span class="token comment">// - expanded：缩进成css样式</span>
      <span class="token comment">// - nested：按Scss的嵌套层次缩进</span>
      <span class="token comment">// - compact：按分类缩进，以空行为界</span>
      <span class="token comment">// - compressed：完全缩进成一行</span>
      <span class="token property">&quot;extensionName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;.min.css&quot;</span><span class="token punctuation">,</span> <span class="token comment">//编译后缀名</span>
      <span class="token property">&quot;savePath&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/css&quot;</span> <span class="token comment">//编译保存的路径，以当前工作区为根目录</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// 排除编译的路径</span>
  <span class="token property">&quot;liveSassCompile.settings.excludeList&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;**/node_modules/**&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.vscode/**&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>而且不编译单行注释， <code>compressed</code> 不编译多行注释，<code>/*! xxx */</code> 强制编译</p></blockquote></li></ul><div class="h5">变量：</div><div class="language-scss line-numbers-mode" data-ext="scss"><pre class="language-scss"><code><span class="token property"><span class="token variable">$primary_color</span></span><span class="token punctuation">:</span> #243e59<span class="token punctuation">;</span>
<span class="token property"><span class="token variable">$name</span></span><span class="token punctuation">:</span> <span class="token string">&#39;fish&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 使用</span>
<span class="token selector">.<span class="token variable">#{$name}</span> </span><span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">$primary_color</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 编译成：</span>
<span class="token selector">.fish </span><span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #243e59<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>模板字符串：</strong> <code>#{$var}</code>：在字符串里套变量</p><p><strong>嵌套选择：</strong> 像 <code>html</code> 那样的嵌套结构。而缩略属性也能写：</p><div class="language-scss line-numbers-mode" data-ext="scss"><pre class="language-scss"><code><span class="token selector">html </span><span class="token punctuation">{</span>
  <span class="token selector">font: </span><span class="token punctuation">{</span>
    <span class="token property">size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>
    <span class="token property">decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
    <span class="token property">family</span><span class="token punctuation">:</span> <span class="token string">&#39;Lato&#39;</span><span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 等同于</span>
<span class="token selector">html </span><span class="token punctuation">{</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>
  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">&#39;xxxx&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>父级选择器：</strong> 也就是将 当前的属性名替换成 <code>&amp;</code></p><div class="language-scss line-numbers-mode" data-ext="scss"><pre class="language-scss"><code><span class="token selector">.fish </span><span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #654321<span class="token punctuation">;</span>
  <span class="token selector"><span class="token parent important">&amp;</span>:hover </span><span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #123456<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//编译成：</span>
<span class="token selector">.fish </span><span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #654321<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.fish:hover </span><span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #123456<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="继承-复用与导入" tabindex="-1"><a class="header-anchor" href="#继承-复用与导入" aria-hidden="true">#</a> 继承 复用与导入</h3><ul><li><strong><code>@mixin</code>：</strong> 类比于函数，还可以传入参数。按顺序传入或指定参数名<div class="language-scss line-numbers-mode" data-ext="scss"><pre class="language-scss"><code><span class="token comment">// 默认参数为0</span>
<span class="token keyword">@mixin</span> <span class="token function">absolute</span><span class="token punctuation">(</span><span class="token property"><span class="token variable">$top</span></span><span class="token punctuation">:</span> 0<span class="token punctuation">,</span> <span class="token property"><span class="token variable">$right</span></span><span class="token punctuation">:</span> 0<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token variable">$top</span><span class="token punctuation">;</span>
  <span class="token property">right</span><span class="token punctuation">:</span> <span class="token variable">$right</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.fish </span><span class="token punctuation">{</span>
  <span class="token keyword">@include</span> <span class="token function">absolute</span><span class="token punctuation">(</span>20px<span class="token punctuation">,</span> 30px<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// absolute();</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><code>@mixin</code> 是可以重复使用的一组 css 声明，有助于减少重复代码，只需声明一次，就可在文件中引用。混合指令可以包含所有的 css 规则，绝大部分 scss 规则，可以传递参数，输出多样化的样式</li><li><strong><code>@extend</code>：</strong> 继承样式： <code>@extend .fish;</code></li><li><strong><code>@import</code>：</strong> scss 拓展了 <code>@import</code> 的功能，允许其导入 scss 或 sass 文件。被导入的文件将合并编译到同一个 css 文件中，被导入的文件中所包含的变量或者混合指令 (<code>mixin</code>) 都可以在导入的文件中使用</li><li><strong><code>@Partials</code>：</strong> 忽略编译的文件，在文件名前加一个下划线。主要是用来定义<strong>公共样式</strong>的，专门用于被其他的 scss 文件 import 进行使用的</li><li><strong><code>@function</code>：</strong> 主要用于计算，带返回值 <code>@return</code></li></ul><p><strong>也就是：</strong> <code>@function</code> 用来计算，<code>@mixin</code> 用来封装样式，<code>@import</code> 用来抽离他们为一个模块</p><br><h3 id="语句" tabindex="-1"><a class="header-anchor" href="#语句" aria-hidden="true">#</a> 语句</h3><div class="h5">@if</div><p><code>@if</code> 语法和 js 类似，基本格式是<code>@if...@else if...@else</code></p><div class="language-scss line-numbers-mode" data-ext="scss"><pre class="language-scss"><code><span class="token selector">.fish </span><span class="token punctuation">{</span>
  <span class="token keyword">@if</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">&gt;</span> 20<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #123<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">@else if</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">&lt;</span> 20<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #234<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">@else</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #233<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="h5">@for</div><p>for 在条件范围内重复操作，这个指令包含两种格式： <code>@for $var from &lt;start&gt; through | to &lt;end&gt;;</code></p><p>两者区别在于 <code>through</code> 与 <code>to</code> 的含义：</p><ul><li>使用 <code>through</code> 时，条件范围：<code>[start, end]</code></li><li>使用 <code>to</code> 时条件范围：<code>[start, end)</code></li><li><code>$var</code> 可以是任何变量，比如<code>$i</code>，<code>&lt;start&gt;</code> 和 <code>&lt;end&gt;</code> 必须是整数值</li></ul><div class="language-scss line-numbers-mode" data-ext="scss"><pre class="language-scss"><code><span class="token keyword">@for</span> <span class="token variable">$i</span> <span class="token keyword">from</span> <span class="token selector">1 to 3 </span><span class="token punctuation">{</span>
  .fish <span class="token property">span</span><span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span><span class="token variable">#{$i}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 20 <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">-</span> 1<span class="token punctuation">)</span> <span class="token operator">+</span> px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="h5">@each</div><p>类似于 <code>foreach</code></p><div class="language-scss line-numbers-mode" data-ext="scss"><pre class="language-scss"><code><span class="token property"><span class="token variable">$num_list</span></span><span class="token punctuation">:</span> 1 3 4<span class="token punctuation">;</span>
<span class="token keyword">@each</span> <span class="token selector"><span class="token variable">$ele</span> in <span class="token variable">$num_list</span> </span><span class="token punctuation">{</span>
  <span class="token selector">.p<span class="token variable">#{$ele}</span> </span><span class="token punctuation">{</span>
    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token variable">$ele</span> <span class="token operator">*</span> <span class="token variable">$ele</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="h5">@while：</div><div class="language-scss line-numbers-mode" data-ext="scss"><pre class="language-scss"><code><span class="token property"><span class="token variable">$column</span></span><span class="token punctuation">:</span> 12<span class="token punctuation">;</span>
<span class="token keyword">@while</span> <span class="token selector"><span class="token variable">$column</span>&gt;0 </span><span class="token punctuation">{</span>
  <span class="token selector">.col-sm-<span class="token variable">#{$column}</span> </span><span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">$column</span> <span class="token operator">/</span> 12 <span class="token operator">*</span> 100%<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token property"><span class="token variable">$column</span></span><span class="token punctuation">:</span> <span class="token variable">$column</span> <span class="token operator">-</span> 1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,43);function H(M,P){const i=l("RouterLink"),a=l("ExternalLinkIcon");return d(),p("div",null,[k,e("ul",null,[e("li",null,[m,e("ul",null,[e("li",null,[s(i,{to:"/FrontEnd/HTML.html"},{default:r(()=>[n("HTML")]),_:1})]),e("li",null,[e("a",b,[n("Scss 教程"),s(a)])])])])]),t(' @import "[TOC]" {cmd="toc" depthFrom=2 depthTo=5 orderedList=false} '),t(" code_chunk_output "),f,t(" /code_chunk_output "),x,e("blockquote",null,[e("p",null,[n("Ref: "),e("a",y,[n("伪类与伪元素"),s(a)])])]),_,e("blockquote",null,[e("p",null,[n("Ref: "),e("a",E,[n("flex 与 grid 区别"),s(a)]),n(" 、 "),e("a",w,[n("CSS flex 布局"),s(a)])])]),B,q,e("ul",null,[A,$,e("li",null,[C,n(" 设置动画的时间函数 "),e("ul",null,[S,F,z,D,e("li",null,[j,n("：三次贝塞尔曲线，"),e("a",L,[n("可以定制"),s(a)])])])]),V,N,R]),e("blockquote",null,[e("p",null,[n("Ref： "),e("a",T,[n("深入理解 transition"),s(a)])])]),I])}const W=c(g,[["render",H],["__file","CSS.html.vue"]]);export{W as default};
