import{_ as i,V as l,W as d,Z as a,$ as e,X as o,Y as r,a0 as n,a1 as s,F as c}from"./framework-cf51392c.js";const u={},k=e("p",null,[e("br"),e("p",{style:{"font-size":"32px","font-weight":"bold"}},"目录")],-1),h=s('<ul><li><a href="#%E8%B7%AF%E7%94%B1">路由</a><ul><li><a href="#app-%E5%AF%B9%E8%B1%A1-%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95">app 对象 属性和方法</a></li><li><a href="#request-%E5%B1%9E%E6%80%A7%E4%B8%8E-response-%E6%96%B9%E6%B3%95">Request 属性与 Response 方法</a></li><li><a href="#%E4%B8%AD%E9%97%B4%E4%BB%B6">中间件</a></li></ul></li><li><a href="#%E5%8F%82%E8%80%83">参考</a></li></ul>',1),m=s('<h2 id="路由" tabindex="-1"><a class="header-anchor" href="#路由" aria-hidden="true">#</a> 路由</h2><p>路由表示应用程序端点 (URI) 的定义以及端点响应客户机请求的方式</p><p>我们所使用的 app 与 <code>HTTP</code> 方法相对应的 <code>Express</code> 对象方法来定义路由，如 <code>app.get()</code> 用于处理 GET 请求</p><p>这些路由方法都指定了回调函数 ，当程序接收到指定的路由（端点）的时候（也就是说 <code>HTTP</code> 方法请求时被调用），来调用回调函数，换句话说就是应用程序监听与指定路由和方法匹配的请求，当检测到匹配时，他会调用对应的回调函数</p>',4),g=s(`<li><strong>如：</strong><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> express <span class="token keyword">from</span> <span class="token string">&#39;express&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 以下默认已经创建了 app</span>
app <span class="token comment">// 当浏览器发送了 GET /mie 请求(req)时</span>
  <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/mie&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 服务器就发送响应(res)数据</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">&#39;1023&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;open on http://localhost:1023/mie&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),f=s(`<strong>方法：</strong><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>app<span class="token punctuation">.</span><span class="token constant">METHODS</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><code>path</code>`,3),v={href:"https://www.npmjs.com/package/path-to-regexp",target:"_blank",rel:"noopener noreferrer"},b=s(`<h3 id="app-对象-属性和方法" tabindex="-1"><a class="header-anchor" href="#app-对象-属性和方法" aria-hidden="true">#</a> app 对象 属性和方法</h3><ul><li><code>app.route(path)</code>：即对同一个路径不同 HTTP 方法时：<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 这样就不用在每个方法前都加路由地址了</span>
app<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&#39;user/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><code>app.use([path,] fn)</code>：</li></ul><h3 id="request-属性与-response-方法" tabindex="-1"><a class="header-anchor" href="#request-属性与-response-方法" aria-hidden="true">#</a> Request 属性与 Response 方法</h3><ul><li><strong>Response:</strong><ul><li><code>res.end([data] [，encoding])</code>：用于快速结束没有数据的响应，而 data 只能是 <code>string | Buffer</code> 类型</li><li><code>res.send(data)</code>： 只发送一个 <code>https</code> 响应至请求端，只接收一个参数，这个参数可以是任何类型。因为执行这个方法的时候会自动设置响应头数据类型，即响应头里 <code>Content-Type</code> 字段</li><li><code>res.json(data)</code>：只发送 json 类型的数据</li><li><code>res.status(num)</code>：设定 HTTP 状态码</li><li><code>res.redirect([status,] path)</code>：重定向至...... 还能设置状态码(可选参数)</li><li><code>res.download(path, [filename, fn(err)])</code>：下载文件请求，<code>filename</code> 为下载文件的别名</li><li><code>res.render(viewPath, [locals, fn(err, html)])</code>：渲染一个视图，并把一个 <code>HTML</code> 字符串发送给客户端，<code>locals</code> 是一个对象，其属性定义了视图内的局部变量。<code>fn</code> 是一个回调函数，如果提供了，这个方法返回可能的错误信息和渲染字符串。如果有错误，这个方法会使用一个 <code>next(err)</code> 的内部函数</li><li><code>res.cookie(name, value, [options])</code>：设置 <strong>Cookie</strong>。<code>options</code> 的属性： <ul><li><code>domain</code> ： <code>cookie</code> 在什么域名下有效，类型为 <code>String</code> 。默认为网站域名</li><li><code>expires</code> ： <code>cookie</code> 过期时间，类型为 <code>Date</code> 。如果没有设置或者设置为 0 ，那么该 <code>cookie</code> 只在这个这个 <code>session</code> 有效，即关闭浏览器后，这个 <code>cookie</code> 会被浏览器删除</li><li><code>httpOnly</code> ： 只能被 <code>web server</code> 访问，类型 <code>Boolean</code></li><li><code>maxAge</code> ： 实现 <code>expires</code> 的功能，设置 <code>cookie</code> 过期的时间，类型为 <code>String</code> ，指明从现在开始，多少毫秒以后， <code>cookie</code> 到期</li><li><code>path</code> ： <code>cookie</code> 在什么路径下有效，默认为&#39;/&#39;，类型为 <code>String</code></li><li><code>secure</code> ：只能被 <code>HTTPS</code> 使用，类型 <code>Boolean</code> ，默认为 <code>false</code></li><li><code>signed</code> ：使用签名，类型 <code>Boolean</code> ，默认为 <code>false</code> 。 <code>express</code> 会使用 <code>req.secret</code> 来完成签名，需要 <code>cookie-parser</code> 配合使用</li></ul></li><li><code>res.clearCookie(name, [options])</code>：删 Cookie</li></ul></li></ul><br><ul><li><strong>Request ：</strong><ul><li><code>req.url</code>：返回请求的 URL</li><li><code>req.query</code>：返回 URL ?后的参数，json 类型</li><li><code>req.params</code>：返回 URL 中的自定义参数，json 类型。如：<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/home/:uid/:pages&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// URL: &quot;/home/2333/fish&quot;</span>
<span class="token comment">// 返回：{ uid: 2333, pages: &quot;fish&quot; }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><code>req.body</code>：返回 POST 请求的参数</li><li><code>req.headers</code>：返回请求头数据，json 类型</li><li><code>req.baseUrl</code>：返回路由当前的根路径</li><li><code>req.originalUrl</code>：返回原始请求 URL</li><li><code>req.path</code>：返回请求路径</li></ul></li></ul><h3 id="中间件" tabindex="-1"><a class="header-anchor" href="#中间件" aria-hidden="true">#</a> 中间件</h3><ul><li><strong>内置中间件：</strong><ul><li><code>express.json()</code> 解析 <code>Content-Type</code> 为 <code>application/json</code> 格式的请求体</li><li><code>express.urlencoded()</code> 解析 <code>Content-Type</code> 为 <code>application/x-www-form-urlencoded</code> 格式的请求体</li><li><code>express.raw()</code> 解析 <code>Content-Type</code> 为 <code>application/octet-stream</code> 格式的请求体</li><li><code>express.text()</code> 解析 <code>Content-Type</code> 为 <code>text/plain</code> 格式的请求体</li><li><code>express.static()</code> 托管静态资源文件</li></ul></li><li><strong>Cors:</strong><ul><li>3</li></ul></li></ul><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,9),_={href:"https://segmentfault.com/a/1190000004139342",target:"_blank",rel:"noopener noreferrer"};function x(E,q){const p=c("RouterLink"),t=c("ExternalLinkIcon");return l(),d("div",null,[k,a(' @import "[TOC]" {cmd="toc" depthFrom=2 depthTo=5 orderedList=false} '),e("ul",null,[e("li",null,[o(p,{to:"/FrontEnd/Node.js/"},{default:r(()=>[n("Node.js")]),_:1})])]),a(" code_chunk_output "),h,a(" /code_chunk_output "),m,e("ul",null,[g,e("li",null,[f,n(" 路径可以是 "),e("a",v,[n("正则匹配"),o(t)])])]),b,e("blockquote",null,[e("p",null,[n("Ref: "),e("a",_,[n("res.cookie 的使用"),o(t)])])])])}const T=i(u,[["render",x],["__file","Express.html.vue"]]);export{T as default};
