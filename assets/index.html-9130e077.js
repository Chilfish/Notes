import{_ as i,V as r,W as u,Z as n,X as a,Y as e,$ as o,a0 as s,a1 as p,D as l}from"./framework-94985248.js";const d="/assets/DS_base-716f8ac1.png",k={},m=n("p",null,[n("br"),n("p",{style:{"font-size":"32px","font-weight":"bold"}},"目录")],-1),v=n("strong",null,"线性结构",-1),h=n("li",null,[n("a",{href:"#"},"字符串 String")],-1),b=n("strong",null,"非线性结构结构",-1),g=n("li",null,[n("a",{href:"#"},"散列表 Hash")],-1),w=n("li",null,[n("a",{href:"#"},"堆 Heap")],-1),y=n("li",null,[n("a",{href:"#"},"图 Graph")],-1),_=p('<ul><li><a href="#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5">基本概念</a><ul><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B0%E6%8D%AE">什么是数据</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E7%9A%84%E5%88%86%E7%B1%BB">数据的分类</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%88%86%E7%B1%BB">数据类型的分类</a></li></ul></li><li><a href="#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E5%88%86%E7%B1%BB">数据结构的分类</a><ul><li><a href="#%E6%8C%89%E9%80%BB%E8%BE%91%E7%BB%93%E6%9E%84%E5%88%86%E7%B1%BB">按逻辑结构分类</a></li><li><a href="#%E6%8C%89%E5%82%A8%E5%AD%98%E7%BB%93%E6%9E%84%E5%88%86%E7%B1%BB">按储存结构分类</a></li></ul></li><li><a href="#%E8%BF%AD%E4%BB%A3%E5%99%A8">迭代器</a></li></ul>',1),x=n("br",null,null,-1),f={class:"custom-container info"},E=n("p",{class:"custom-container-title"},"相关信息",-1),B=n("strong",null,"主要参考书：",-1),L={href:"https://book.douban.com/subject/30393441/",target:"_blank",rel:"noopener noreferrer"},A={class:"custom-container tip"},T=n("p",{class:"custom-container-title"},"提示",-1),D=p('<br><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h2><p>数据是存储在计算机内存里的，在存储时决定了数据的顺序和位置关系的就是“数据结构”</p><p>数据结构是数据元素间逻辑关系的表示，是计算机中存储与组织数据的方式。计算机主存储器中特定数据结构的表示称为 <em>存储结构</em>，辅助(外)存储器(如硬盘、U 盘等)中的存储结构表示称为 <em>文件结构</em></p><h3 id="什么是数据" tabindex="-1"><a class="header-anchor" href="#什么是数据" aria-hidden="true">#</a> 什么是数据</h3><p>数据是描述客观事物的符号，可被计算机读取、识别、处理。与数据相关的重要概念有以下几个：</p><ul><li><strong>数据元素(data element)：</strong> 组成数据的基本单位，在程序中通常作为一个整体进行考虑和处理，也被称为记录</li><li><strong>数据项(data item)：</strong> 具有独立含义的最小标识单位。例如，一条数据记录可以称为一个数据元素，数据记录的某个字段就是一个数据项</li><li><strong>数据对象(data object)：</strong> 性质相同的数据元素的集合，是数据的一个子集</li><li><strong>数据结构：</strong> 相互之间存在一种或多种特定关系的数据元素的集合。数据结构包含三方面：<strong>数据的逻辑结构、数据的存储结构和数据的运算</strong></li></ul><p>例：在一张用户表中，一行记录就是一个 <em>数据元素</em>，用户的姓名就是一个 <em>数据项</em>，年龄条件大于 20 的用户就是一个 <em>数据对象</em>，是整个用户表的子集。在实际应用中，可以将数据对象简称为 <em>数据</em></p><h3 id="数据的分类" tabindex="-1"><a class="header-anchor" href="#数据的分类" aria-hidden="true">#</a> 数据的分类</h3><p>在计算机或普遍的的编程语言中，数据通常分为两大类： <strong>原始数据结构</strong>、<strong>非原始数据结构</strong></p><div class="img" align="center"><img src="'+d+'"><p> 计算机内的数据分类 </p></div><div class="h5">原始数据结构的特点：</div><ul><li>原始数据结构是计算机的基本结构，可通过机器指令直接操作</li><li>这些数据类型在大多数编程语言中都是内置类型</li><li>而保存另一个变量的 <strong>内存地址</strong> 的变量称为指针</li></ul><div class="h5">非原始数据结构的特点：</div><ul><li>从原始数据结构派生，数据结构更复杂</li><li>非原始数据类型根据结构进一步分为线性和非线性数据结构 <ul><li>数组(线性)：数组是相同数据类型的元素的固定大小的有序序列集合</li><li>列表(线性-链表)：包含可变数量元素的有序集合称为列表</li><li>文件(非线性-树)：文件是逻辑相关信息的集合。可以将其视为包含各个字段的大型记录列表</li></ul></li></ul><h3 id="数据类型的分类" tabindex="-1"><a class="header-anchor" href="#数据类型的分类" aria-hidden="true">#</a> 数据类型的分类</h3><br><h2 id="数据结构的分类" tabindex="-1"><a class="header-anchor" href="#数据结构的分类" aria-hidden="true">#</a> 数据结构的分类</h2><p>数据结构分为逻辑结构和物理结构</p><ul><li><strong>逻辑结构：</strong> 指数据元素之间逻辑关系的数据结构，这里的逻辑关系是指数据元素之间的前后间关系，与数据在计算机中的存储位置无关</li><li><strong>物理结构：</strong> 指数据的逻辑结构在计算机存储空间中的存放形式称为数据的物理结构，也叫做<strong>存储结构</strong></li></ul><h3 id="按逻辑结构分类" tabindex="-1"><a class="header-anchor" href="#按逻辑结构分类" aria-hidden="true">#</a> 按逻辑结构分类</h3><p>数据的逻辑结构主要分为线性结构和非线性结构</p><ul><li><p><strong>线性结构：</strong> 数据结构的元素之间存在一对一的 <strong>线性关系</strong>，所有结点都最多只有一个直接前趋结点和一个直接后继结点。常见的有数组、队列、链表、栈</p></li><li><p><strong>非线性结构：</strong> 各个结点之间具有多个对应关系，一个结点可能有多个直接前趋结点和多个直接后继结点。常见的有多维数组、广义表、树结构和图结构等</p></li></ul><div style="text-align:center;margin:1rem;"><p><span></span></p><table><thead><tr><th style="text-align:left;">线性数据结构</th><th style="text-align:left;">非线性数据结构</th></tr></thead><tbody><tr><td style="text-align:left;">数据元素以线性顺序排列，其中每个元素都附加到其上一个和下一个相邻元素</td><td style="text-align:left;">数据元素以分层方式附加</td></tr><tr><td style="text-align:left;">所有数据元素在同一层级</td><td style="text-align:left;">数据元素涉及多个层级</td></tr><tr><td style="text-align:left;">单次运行即可遍历所有数据元素</td><td style="text-align:left;">单次运行难以遍历所有数据元素</td></tr><tr><td style="text-align:left;">没有以有效的方式利用存储器</td><td style="text-align:left;">有效方式利用存储器</td></tr></tbody></table></div><br><h3 id="按储存结构分类" tabindex="-1"><a class="header-anchor" href="#按储存结构分类" aria-hidden="true">#</a> 按储存结构分类</h3><p>数据的物理结构（存储结构），<strong>表示数据元素之间的逻辑关系</strong>，一种数据结构的逻辑结构根据需要可以表示成多种存储结构，常用的存储结构有：</p><ul><li><p><strong>顺序存储：</strong> 存储顺序是连续的，在内存中用一组 <strong>地址连续的存储单元</strong>依次存储线性表的各个数据元素</p><ul><li>优点：节省存储空间，只需要存储数据节点，不需存储节点间的逻辑关系</li><li>缺点：插入和删除元素需要移动元素，效率低下</li></ul></li><li><p><strong>链式存储：</strong> 在内存中的存储元素不一定是连续的，用任意地址的存储单元存储元素，元素节点存放数据元素以及 <strong>通过指针指向相邻元素的地址信息</strong></p><ul><li>优点：便于修改，修改时只需要修改数据节点的指针指向，不需要移动其它节点</li><li>缺点：存储空间利用率低，需额外空间存储数据节点间的逻辑关系。因为结点之间不一定相邻，因此不能对结点进行随机访问 <blockquote><p>随机访问（亦称随机存取、直接访问）指数据被读取或写入时，<strong>所需要的时间与这段数据所在的存储位置无关</strong>。链表只能顺序访问，从链表的第一个数据元素开始顺序读取，而无法像数组一样根据下标获取指定数据</p></blockquote></li></ul></li><li><p><strong>索引存储：</strong> 索引存储结构在存储数据元素的同时，还建立附加的 <strong>索引表</strong>。索引表中的每一项称为索引项，索引项的形式为 <code>(关键字，地址)</code>，关键字用于标识数据元素，地址为数据指针。各结点的地址在索引表中是依次排列的</p><ul><li>优点：可以快速查找，可以随机访问，方便修改</li><li>缺点：建立索引表增加了时间和空间的开销</li></ul></li><li><p><strong>散列存储：</strong> 散列存储结构是根据结点的值确定结点的存储地址。以结点作为自变量，通过散列函数算出结果 i，再把 i 作为结点的存储地址，故又称为 <code>Hash 存储</code></p><ul><li>优点：查找速度快，适用于快速查找和插入的场景</li><li>缺点：只存结点数据，不存结点之间的关系</li></ul></li></ul><br>',29),C=n("blockquote",null,[n("p",null,[s("为什么一堆“教程”一上来就都是直接的 复杂度 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",null,"→")]),n("annotation",{encoding:"application/x-tex"},"\\to")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.3669em"}}),n("span",{class:"mrel"},"→")])])]),s(" 数组 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",null,"→")]),n("annotation",{encoding:"application/x-tex"},"\\to")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.3669em"}}),n("span",{class:"mrel"},"→")])])]),s(" 链表 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",null,"…")]),n("annotation",{encoding:"application/x-tex"},"\\dots")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.123em"}}),n("span",{class:"minner"},"…")])])]),s("，都跳过了概念呢……")])],-1),M=p(`<br><h2 id="迭代器" tabindex="-1"><a class="header-anchor" href="#迭代器" aria-hidden="true">#</a> 迭代器</h2><p>在想要遍历或访问数据结构中的数据时，一方面希望只使用共有的方法就能遍历，另一方面又希望能够统一各个数据结构的遍历方式，于是就有了 <strong>迭代器</strong></p><p>就如，<code>std::vector</code> 是用数组实现的，<code>std::list</code>使用链表实现的，<code>std::map</code>则是红黑树实现，每个 <strong>容器</strong> 的遍历方式都不一样，遍历的边界也都不一样，这时候就需要迭代器去统一</p><p>而对表的一些操作，尤其是在表的中间进行插入和删除的操作，需要位置的概念。在 STL 中位置由内嵌的 <code>iterator</code> 表示。它定义了一对方法：</p><ul><li><code>iterator begin()</code>：表示容器|表的第一项</li><li><code>Iterator end()</code>：表示容器|表最后一项之后的位置</li></ul><p>使用迭代器对表的遍历，即为从表头一直到表尾。如：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="h5">一些对迭代器的操作：</div><ul><li><code>++it</code> 和 <code>++it</code>：将迭代器推到下一个位置</li><li><code>--it</code> 和 <code>it--</code>：将迭代器推到上一个位置</li><li><code>it1 == it2</code> 和 <code>it1 != it2</code>：比较是否指向同一个位置</li><li><code>*it</code>，返回迭代器指向数据的引用</li><li><code>It + n</code> 和 <code>it - n</code>：将迭代器向前或向后推 n 个位置</li></ul><p>其中，对于数据的访问有两种情况：只读或读写：<code>const_iterator</code> 表示只读迭代器，不允许改写指向元素的值， <code>iterator</code> 则是可读写迭代器</p><p>一个的 <strong>双向迭代器：</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token keyword">class</span> <span class="token class-name">xxx</span> <span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token comment">// 或是其他的内部的数据结构</span>
  <span class="token keyword">typedef</span> Node <span class="token keyword">int</span><span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token comment">// 只读迭代器，不能改写指向元素的值</span>
  <span class="token keyword">class</span> <span class="token class-name">const_iterator</span> <span class="token punctuation">{</span>
  <span class="token keyword">protected</span><span class="token operator">:</span>
    Node <span class="token operator">*</span>cur<span class="token punctuation">;</span> <span class="token comment">// 指迭代器当前指向的元素</span>
    <span class="token keyword">int</span> index<span class="token punctuation">;</span> <span class="token comment">// 记录迭代器当前指向的线性结构的“下标”</span>
    <span class="token keyword">const</span> xxx<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">*</span>thisList<span class="token punctuation">;</span> <span class="token comment">// 指向迭代器本身的对象的指针</span>
    <span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">xxx</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// 向本对象声明友元</span>

    <span class="token function">const_iterator</span><span class="token punctuation">(</span><span class="token keyword">const</span> xxx<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">&amp;</span>l<span class="token punctuation">,</span> Node <span class="token operator">*</span>p<span class="token punctuation">)</span>
      <span class="token operator">:</span>thisList<span class="token punctuation">{</span><span class="token operator">&amp;</span>l<span class="token punctuation">}</span><span class="token punctuation">,</span> cur<span class="token punctuation">{</span>p<span class="token punctuation">}</span><span class="token punctuation">,</span> index<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token comment">// 判断迭代器是否失效</span>
    <span class="token keyword">void</span> <span class="token function">assertValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">||</span> thisList <span class="token operator">==</span> <span class="token keyword">nullptr</span>
        <span class="token operator">||</span> cur <span class="token operator">==</span> thisList<span class="token operator">-&gt;</span>head<span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token function">IteratorError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 返回当前迭代器指向元素的值</span>
    T <span class="token operator">&amp;</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
      <span class="token function">assertValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> cur<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

  <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token comment">// 重载 *以访问值</span>
    <span class="token keyword">const</span> T <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">// 向前推进迭代器</span>
    const_iterator <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>next <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token function">IteratorError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
      <span class="token operator">++</span>index<span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    const_iterator <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      const_iterator old <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
      <span class="token operator">++</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> old<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 向后推进迭代器</span>
    const_iterator <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">--</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>prev <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token function">IteratorError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>prev<span class="token punctuation">;</span>
      <span class="token operator">--</span>index<span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    const_iterator <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">--</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      const_iterator old <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
      <span class="token operator">--</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> old<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 迭代器向前推进x位</span>
    const_iterator <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">++</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 迭代器向后推进x位</span>
    const_iterator <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">--</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 返回两个迭代器之间的距离</span>
    <span class="token keyword">int</span> <span class="token keyword">operator</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">const</span> const_iterator <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> index <span class="token operator">-</span> x<span class="token punctuation">.</span>index<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 判断两个迭代器是否相等</span>
    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> const_iterator <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> cur <span class="token operator">==</span> rhs<span class="token punctuation">.</span>cur<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">!=</span><span class="token punctuation">(</span><span class="token keyword">const</span> const_iterator <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">==</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13);function S(N,V){const t=l("RouterLink"),c=l("ExternalLinkIcon");return r(),u("div",null,[m,n("ul",null,[n("li",null,[v,n("ul",null,[n("li",null,[a(t,{to:"/Algorithm/DS/LinearList.html"},{default:e(()=>[s("数组、栈、队列")]),_:1})]),n("li",null,[a(t,{to:"/Algorithm/DS/LinkedList.html"},{default:e(()=>[s("链表 Linked List")]),_:1})]),h])]),n("li",null,[b,n("ul",null,[n("li",null,[a(t,{to:"/Algorithm/DS/Tree.html"},{default:e(()=>[s("树 Tree")]),_:1})]),g,w,y])])]),o(' @import "[TOC]" {cmd="toc" depthFrom=1 depthTo=6 orderedList=false} '),o(" code_chunk_output "),_,o(" /code_chunk_output "),x,n("div",f,[E,n("p",null,[B,s(),n("a",L,[s("数据结构与算法分析 C++语言描述第四版 —— Mark Allen Weiss（电子工业出版社）"),a(c)])])]),n("div",A,[T,n("p",null,[s("在设计上更多地参考了 C++的 "),a(t,{to:"/Algorithm/STL.html"},{default:e(()=>[s("STL 标准库容器")]),_:1}),s(" ）模仿 -> 尽头都是手搓个低配版 STL 了）")])]),D,C,M])}const q=i(k,[["render",S],["__file","index.html.vue"]]);export{q as default};
